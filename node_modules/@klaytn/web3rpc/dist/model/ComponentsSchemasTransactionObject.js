"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
 * web3rpc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The ComponentsSchemasTransactionObject model module.
 * @module model/ComponentsSchemasTransactionObject
 * @version 0.9.8
 */
var ComponentsSchemasTransactionObject = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>ComponentsSchemasTransactionObject</code>.
   * @alias module:model/ComponentsSchemasTransactionObject
   * @param type {String} An integer representing the type of the transaction.
   * @param nonce {String} The block number where this transaction was in.
   * @param gasPrice {String} Gas price provided by the sender in peb. null when it is not a legacy transaction.
   * @param maxFeePerGas {String} A maximum amount to pay for the transaction to execute. null when it is a legacy transaction.
   * @param maxPriorityFeePerGas {String} Gas tip cap for dynamic fee transaction in peb. null when it is a legacy transaction.
   * @param gas {String} Gas provided by the sender.
   * @param value {String} Integer of values sent with this transaction.
   * @param v {String} ECDSA recovery id.
   * @param r {String} ECDSA signature r.
   * @param s {String} ECDSA signature s.
   * @param chainId {String} Chain id set on the requested node.
   * @param accessList {Array.<String>} An array of accessList.
   * @param hash {String} Hash of the transaction.
   */
  function ComponentsSchemasTransactionObject(type, nonce, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas, value, v, r, s, chainId, accessList, hash) {
    _classCallCheck(this, ComponentsSchemasTransactionObject);
    ComponentsSchemasTransactionObject.initialize(this, type, nonce, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas, value, v, r, s, chainId, accessList, hash);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(ComponentsSchemasTransactionObject, null, [{
    key: "initialize",
    value: function initialize(obj, type, nonce, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas, value, v, r, s, chainId, accessList, hash) {
      obj['type'] = type;
      obj['nonce'] = nonce;
      obj['gasPrice'] = gasPrice;
      obj['maxFeePerGas'] = maxFeePerGas;
      obj['maxPriorityFeePerGas'] = maxPriorityFeePerGas;
      obj['gas'] = gas;
      obj['value'] = value;
      obj['v'] = v;
      obj['r'] = r;
      obj['s'] = s;
      obj['chainId'] = chainId;
      obj['accessList'] = accessList;
      obj['hash'] = hash;
    }

    /**
     * Constructs a <code>ComponentsSchemasTransactionObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComponentsSchemasTransactionObject} obj Optional instance to populate.
     * @return {module:model/ComponentsSchemasTransactionObject} The populated <code>ComponentsSchemasTransactionObject</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ComponentsSchemasTransactionObject();
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('nonce')) {
          obj['nonce'] = _ApiClient["default"].convertToType(data['nonce'], 'String');
        }
        if (data.hasOwnProperty('gasPrice')) {
          obj['gasPrice'] = _ApiClient["default"].convertToType(data['gasPrice'], 'String');
        }
        if (data.hasOwnProperty('maxFeePerGas')) {
          obj['maxFeePerGas'] = _ApiClient["default"].convertToType(data['maxFeePerGas'], 'String');
        }
        if (data.hasOwnProperty('maxPriorityFeePerGas')) {
          obj['maxPriorityFeePerGas'] = _ApiClient["default"].convertToType(data['maxPriorityFeePerGas'], 'String');
        }
        if (data.hasOwnProperty('gas')) {
          obj['gas'] = _ApiClient["default"].convertToType(data['gas'], 'String');
        }
        if (data.hasOwnProperty('value')) {
          obj['value'] = _ApiClient["default"].convertToType(data['value'], 'String');
        }
        if (data.hasOwnProperty('v')) {
          obj['v'] = _ApiClient["default"].convertToType(data['v'], 'String');
        }
        if (data.hasOwnProperty('r')) {
          obj['r'] = _ApiClient["default"].convertToType(data['r'], 'String');
        }
        if (data.hasOwnProperty('s')) {
          obj['s'] = _ApiClient["default"].convertToType(data['s'], 'String');
        }
        if (data.hasOwnProperty('chainId')) {
          obj['chainId'] = _ApiClient["default"].convertToType(data['chainId'], 'String');
        }
        if (data.hasOwnProperty('accessList')) {
          obj['accessList'] = _ApiClient["default"].convertToType(data['accessList'], ['String']);
        }
        if (data.hasOwnProperty('hash')) {
          obj['hash'] = _ApiClient["default"].convertToType(data['hash'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComponentsSchemasTransactionObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComponentsSchemasTransactionObject</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(ComponentsSchemasTransactionObject.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data[property]) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
        throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
      }
      // ensure the json data is a string
      if (data['nonce'] && !(typeof data['nonce'] === 'string' || data['nonce'] instanceof String)) {
        throw new Error("Expected the field `nonce` to be a primitive type in the JSON string but got " + data['nonce']);
      }
      // ensure the json data is a string
      if (data['gasPrice'] && !(typeof data['gasPrice'] === 'string' || data['gasPrice'] instanceof String)) {
        throw new Error("Expected the field `gasPrice` to be a primitive type in the JSON string but got " + data['gasPrice']);
      }
      // ensure the json data is a string
      if (data['maxFeePerGas'] && !(typeof data['maxFeePerGas'] === 'string' || data['maxFeePerGas'] instanceof String)) {
        throw new Error("Expected the field `maxFeePerGas` to be a primitive type in the JSON string but got " + data['maxFeePerGas']);
      }
      // ensure the json data is a string
      if (data['maxPriorityFeePerGas'] && !(typeof data['maxPriorityFeePerGas'] === 'string' || data['maxPriorityFeePerGas'] instanceof String)) {
        throw new Error("Expected the field `maxPriorityFeePerGas` to be a primitive type in the JSON string but got " + data['maxPriorityFeePerGas']);
      }
      // ensure the json data is a string
      if (data['gas'] && !(typeof data['gas'] === 'string' || data['gas'] instanceof String)) {
        throw new Error("Expected the field `gas` to be a primitive type in the JSON string but got " + data['gas']);
      }
      // ensure the json data is a string
      if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
        throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
      }
      // ensure the json data is a string
      if (data['v'] && !(typeof data['v'] === 'string' || data['v'] instanceof String)) {
        throw new Error("Expected the field `v` to be a primitive type in the JSON string but got " + data['v']);
      }
      // ensure the json data is a string
      if (data['r'] && !(typeof data['r'] === 'string' || data['r'] instanceof String)) {
        throw new Error("Expected the field `r` to be a primitive type in the JSON string but got " + data['r']);
      }
      // ensure the json data is a string
      if (data['s'] && !(typeof data['s'] === 'string' || data['s'] instanceof String)) {
        throw new Error("Expected the field `s` to be a primitive type in the JSON string but got " + data['s']);
      }
      // ensure the json data is a string
      if (data['chainId'] && !(typeof data['chainId'] === 'string' || data['chainId'] instanceof String)) {
        throw new Error("Expected the field `chainId` to be a primitive type in the JSON string but got " + data['chainId']);
      }
      // ensure the json data is an array
      if (!Array.isArray(data['accessList'])) {
        throw new Error("Expected the field `accessList` to be an array in the JSON data but got " + data['accessList']);
      }
      // ensure the json data is a string
      if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
        throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
      }
      return true;
    }
  }]);
  return ComponentsSchemasTransactionObject;
}();
ComponentsSchemasTransactionObject.RequiredProperties = ["type", "nonce", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "gas", "value", "v", "r", "s", "chainId", "accessList", "hash"];

/**
 * An integer representing the type of the transaction.
 * @member {String} type
 */
ComponentsSchemasTransactionObject.prototype['type'] = undefined;

/**
 * The block number where this transaction was in.
 * @member {String} nonce
 */
ComponentsSchemasTransactionObject.prototype['nonce'] = undefined;

/**
 * Gas price provided by the sender in peb. null when it is not a legacy transaction.
 * @member {String} gasPrice
 */
ComponentsSchemasTransactionObject.prototype['gasPrice'] = undefined;

/**
 * A maximum amount to pay for the transaction to execute. null when it is a legacy transaction.
 * @member {String} maxFeePerGas
 */
ComponentsSchemasTransactionObject.prototype['maxFeePerGas'] = undefined;

/**
 * Gas tip cap for dynamic fee transaction in peb. null when it is a legacy transaction.
 * @member {String} maxPriorityFeePerGas
 */
ComponentsSchemasTransactionObject.prototype['maxPriorityFeePerGas'] = undefined;

/**
 * Gas provided by the sender.
 * @member {String} gas
 */
ComponentsSchemasTransactionObject.prototype['gas'] = undefined;

/**
 * Integer of values sent with this transaction.
 * @member {String} value
 */
ComponentsSchemasTransactionObject.prototype['value'] = undefined;

/**
 * ECDSA recovery id.
 * @member {String} v
 */
ComponentsSchemasTransactionObject.prototype['v'] = undefined;

/**
 * ECDSA signature r.
 * @member {String} r
 */
ComponentsSchemasTransactionObject.prototype['r'] = undefined;

/**
 * ECDSA signature s.
 * @member {String} s
 */
ComponentsSchemasTransactionObject.prototype['s'] = undefined;

/**
 * Chain id set on the requested node.
 * @member {String} chainId
 */
ComponentsSchemasTransactionObject.prototype['chainId'] = undefined;

/**
 * An array of accessList.
 * @member {Array.<String>} accessList
 */
ComponentsSchemasTransactionObject.prototype['accessList'] = undefined;

/**
 * Hash of the transaction.
 * @member {String} hash
 */
ComponentsSchemasTransactionObject.prototype['hash'] = undefined;
var _default = exports["default"] = ComponentsSchemasTransactionObject;