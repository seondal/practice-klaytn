"use strict";
// Unit conversion utilities
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toPeb = exports.fromPeb = exports.parseUnits = exports.formatUnits = exports.parseKlay = exports.formatKlay = exports.parseKlayUnits = exports.formatKlayUnits = void 0;
const units_1 = require("@ethersproject/units");
const lodash_1 = __importDefault(require("lodash"));
// All in lowercase. The ambiguity between mKLAY and MKLAY is resolved in getKlayDecimals.
const names = [
    "peb",
    "kpeb",
    "mpeb",
    "ston",
    "uklay",
    "mklay",
    "klay",
    "kklay",
    "mklay",
    "gklay",
    "tklay", // 30
];
// Returns the decimal corresponding the unitName.
// If not found, returns undefined.
function getKlayDecimals(unitName) {
    if (lodash_1.default.isString(unitName)) {
        const lower = unitName.toLowerCase();
        // Tricky special cases.
        // Gpeb is alias to ston, thus 9 decimals
        if (lower == "gpeb") {
            return 9;
        }
        // mKLAY and MKLAY are different
        if (lower == "mklay" && unitName[0] == "m") {
            return 15;
        }
        else if (lower == "mklay" && unitName[0] == "M") {
            return 24;
        }
        const index = names.indexOf(lower);
        if (index !== -1) {
            return index * 3;
        }
    }
    return undefined;
}
// Convert [value]peb to [unit].
function formatKlayUnits(value, unitName) {
    const decimals = getKlayDecimals(unitName);
    if (decimals) {
        // Klay units
        return (0, units_1.formatUnits)(value, decimals);
    }
    else {
        // Fallback to Eth units and raw numbers.
        // Though parseEthUnits rejects uppercase, we allow it here for consistency with getKlayDecimals.
        if (lodash_1.default.isString(unitName)) {
            unitName = unitName.toLowerCase();
        }
        return (0, units_1.formatUnits)(value, unitName);
    }
}
exports.formatKlayUnits = formatKlayUnits;
// Convert [value][unit] to peb.
function parseKlayUnits(value, unitName) {
    const decimals = getKlayDecimals(unitName);
    if (decimals) {
        // Klay units
        return (0, units_1.parseUnits)(value, decimals);
    }
    else {
        // Fallback to Eth units and raw numbers.
        // Though parseEthUnits rejects uppercase, we allow it here for consistency with getKlayDecimals.
        if (lodash_1.default.isString(unitName)) {
            unitName = unitName.toLowerCase();
        }
        return (0, units_1.parseUnits)(value, unitName);
    }
}
exports.parseKlayUnits = parseKlayUnits;
// Convert [peb]peb to KLAY
function formatKlay(peb) {
    return formatKlayUnits(peb, 18);
}
exports.formatKlay = formatKlay;
// Convert [klay]KLAY to peb
function parseKlay(klay) {
    return parseKlayUnits(klay, 18);
}
exports.parseKlay = parseKlay;
// Shadow ethers functions because klay functions deals with both.
exports.formatUnits = formatKlayUnits;
exports.parseUnits = parseKlayUnits;
// Alias to web3js-like names
exports.fromPeb = formatKlay; // Equivalent to web3.utils.fromWei
exports.toPeb = parseKlay; // Equivalent to web3.utils.toWei
//# sourceMappingURL=units.js.map