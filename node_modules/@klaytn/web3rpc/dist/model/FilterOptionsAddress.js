"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _class;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
 * web3rpc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The FilterOptionsAddress model module.
 * @module model/FilterOptionsAddress
 * @version 0.9.8
 */
var FilterOptionsAddress = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>FilterOptionsAddress</code>.
   * (optional) Contract address or a list of addresses from which logs should originate.
   * @alias module:model/FilterOptionsAddress
   * @param {(module:model/String|module:model/[String])} instance The actual instance to initialize FilterOptionsAddress.
   */
  function FilterOptionsAddress() {
    var instance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    _classCallCheck(this, FilterOptionsAddress);
    /**
     * Returns the JSON representation of the actual intance.
     * @return {string}
     */
    _defineProperty(this, "toJSON", function () {
      return this.getActualInstance();
    });
    if (instance === null) {
      this.actualInstance = null;
      return;
    }
    var match = 0;
    var errorMessages = [];
    // Contract address
    try {
      // validate array of string
      if (!(typeof instance === 'string')) {
        throw new Error("Invalid input. Must be string. Input: " + JSON.stringify(instance));
      }
      this.actualInstance = instance;
      match++;
    } catch (err) {
      // json data failed to deserialize into String
      errorMessages.push("Failed to construct String: " + err);
    }
    try {
      // validate array data type
      if (!Array.isArray(instance)) {
        throw new Error("Invalid data type. Expecting array. Input: " + instance);
      }
      // validate array of string
      var _iterator = _createForOfIteratorHelper(instance),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var item = _step.value;
          if (!(typeof item === 'number' && item % 1 === 0)) {
            throw new Error("Invalid array items. Must be string. Input: " + instance);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      this.actualInstance = instance;
      match++;
    } catch (err) {
      // json data failed to deserialize into [String]
      errorMessages.push("Failed to construct [String]: " + err);
    }
    if (match > 1) {
      throw new Error("Multiple matches found constructing `FilterOptionsAddress` with oneOf schemas String, [String]. Input: " + JSON.stringify(instance));
    } else if (match === 0) {
      this.actualInstance = null; // clear the actual instance in case there are multiple matches
      throw new Error("No match found constructing `FilterOptionsAddress` with oneOf schemas String, [String]. Details: " + errorMessages.join(", "));
    } else {// only 1 match
      // the input is valid
    }
  }

  /**
   * Constructs a <code>FilterOptionsAddress</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FilterOptionsAddress} obj Optional instance to populate.
   * @return {module:model/FilterOptionsAddress} The populated <code>FilterOptionsAddress</code> instance.
   */
  _createClass(FilterOptionsAddress, [{
    key: "getActualInstance",
    value:
    /**
     * Gets the actaul instance, which can be <code>String</code>, <code>[String]</code>.
     * @return {(module:model/String|module:model/[String])} The actual instance.
     */
    function getActualInstance() {
      return this.actualInstance;
    }

    /**
     * Sets the actaul instance, which can be <code>String</code>, <code>[String]</code>.
     * @param {(module:model/String|module:model/[String])} obj The actual instance.
     */
  }, {
    key: "setActualInstance",
    value: function setActualInstance(obj) {
      this.actualInstance = FilterOptionsAddress.constructFromObject(obj).getActualInstance();
    }
  }], [{
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      return new FilterOptionsAddress(data);
    }
  }]);
  return FilterOptionsAddress;
}();
_class = FilterOptionsAddress;
/**
 * Create an instance of FilterOptionsAddress from a JSON string.
 * @param {string} json_string JSON string.
 * @return {module:model/FilterOptionsAddress} An instance of FilterOptionsAddress.
 */
_defineProperty(FilterOptionsAddress, "fromJSON", function (json_string) {
  return _class.constructFromObject(JSON.parse(json_string));
});
FilterOptionsAddress.OneOf = ["String", "[String]"];
var _default = exports["default"] = FilterOptionsAddress;