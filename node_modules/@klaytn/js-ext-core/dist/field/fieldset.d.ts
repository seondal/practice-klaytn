import { FieldTypes, Fields } from "./common";
export declare abstract class FieldSet {
    static type: number;
    static typeName: string;
    static fieldTypes: FieldTypes;
    readonly type: number;
    readonly typeName: string;
    readonly fieldTypes: FieldTypes;
    protected fields: Fields;
    constructor();
    private get _static();
    setFields(obj: Fields): void;
    setFieldsFromArray(names: string[], array: any[]): void;
    getField(name: string): any;
    getFields(names: string[]): any[];
    toObject(): Fields;
}
export interface ConcreteFieldSet<T extends FieldSet> {
    type: number;
    fieldTypes: FieldTypes;
    new (): T;
}
export declare class FieldSetFactory<T extends FieldSet> {
    private registry;
    private requiredFields;
    constructor(requiredFields?: string[]);
    add(cls: ConcreteFieldSet<T>): void;
    has(type?: any): boolean;
    lookup(type?: any): ConcreteFieldSet<T>;
    fromObject(fields: Fields): T;
}
//# sourceMappingURL=fieldset.d.ts.map