"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _FilterOptionsAddress = _interopRequireDefault(require("./FilterOptionsAddress"));
var _FilterOptionsFromBlock = _interopRequireDefault(require("./FilterOptionsFromBlock"));
var _FilterOptionsToBlock = _interopRequireDefault(require("./FilterOptionsToBlock"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
 * web3rpc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The FilterOptions model module.
 * @module model/FilterOptions
 * @version 0.9.8
 */
var FilterOptions = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>FilterOptions</code>.
   * @alias module:model/FilterOptions
   */
  function FilterOptions() {
    _classCallCheck(this, FilterOptions);
    FilterOptions.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(FilterOptions, null, [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>FilterOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FilterOptions} obj Optional instance to populate.
     * @return {module:model/FilterOptions} The populated <code>FilterOptions</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new FilterOptions();
        if (data.hasOwnProperty('fromBlock')) {
          obj['fromBlock'] = _FilterOptionsFromBlock["default"].constructFromObject(data['fromBlock']);
        }
        if (data.hasOwnProperty('toBlock')) {
          obj['toBlock'] = _FilterOptionsToBlock["default"].constructFromObject(data['toBlock']);
        }
        if (data.hasOwnProperty('address')) {
          obj['address'] = _FilterOptionsAddress["default"].constructFromObject(data['address']);
        }
        if (data.hasOwnProperty('topics')) {
          obj['topics'] = _ApiClient["default"].convertToType(data['topics'], ['String']);
        }
        if (data.hasOwnProperty('blockHash')) {
          obj['blockHash'] = _ApiClient["default"].convertToType(data['blockHash'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FilterOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FilterOptions</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // validate the optional field `fromBlock`
      if (data['fromBlock']) {
        // data not null
        _FilterOptionsFromBlock["default"].validateJSON(data['fromBlock']);
      }
      // validate the optional field `toBlock`
      if (data['toBlock']) {
        // data not null
        _FilterOptionsToBlock["default"].validateJSON(data['toBlock']);
      }
      // validate the optional field `address`
      if (data['address']) {
        // data not null
        _FilterOptionsAddress["default"].validateJSON(data['address']);
      }
      // ensure the json data is an array
      if (!Array.isArray(data['topics'])) {
        throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
      }
      // ensure the json data is a string
      if (data['blockHash'] && !(typeof data['blockHash'] === 'string' || data['blockHash'] instanceof String)) {
        throw new Error("Expected the field `blockHash` to be a primitive type in the JSON string but got " + data['blockHash']);
      }
      return true;
    }
  }]);
  return FilterOptions;
}();
/**
 * @member {module:model/FilterOptionsFromBlock} fromBlock
 */
FilterOptions.prototype['fromBlock'] = undefined;

/**
 * @member {module:model/FilterOptionsToBlock} toBlock
 */
FilterOptions.prototype['toBlock'] = undefined;

/**
 * @member {module:model/FilterOptionsAddress} address
 */
FilterOptions.prototype['address'] = undefined;

/**
 * (optional) Array of 32-byte DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with “or” options.
 * @member {Array.<String>} topics
 */
FilterOptions.prototype['topics'] = undefined;

/**
 * (optional) A filter option that restricts the logs returned to the single block with the 32-byte hash blockHash. Using blockHash is equivalent to fromBlock = toBlock = the block number with hash blockHash. If blockHash is present in in the filter criteria, then neither fromBlock nor toBlock are allowed
 * @member {String} blockHash
 */
FilterOptions.prototype['blockHash'] = undefined;
var _default = exports["default"] = FilterOptions;