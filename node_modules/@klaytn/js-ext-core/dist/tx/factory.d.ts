import { Transaction as EthersTransaction } from "@ethersproject/transactions";
import { FieldSet, FieldSetFactory, Fields } from "../field";
import { SignatureLike } from "../util";
export declare abstract class KlaytnTx extends FieldSet {
    abstract sigRLP(): string;
    abstract txHashRLP(): string;
    abstract setFieldsFromRLP(rlp: string): void;
    sigFeePayerRLP(): string;
    senderTxHashRLP(): string;
    throwTypeError(msg: string): never;
    addSenderSig(sig: SignatureLike): void;
    addFeePayerSig(sig: SignatureLike): void;
    encodeNestedRLP(innerFieldNames: string[], outerFieldNames: string[]): string;
    encodeTypePrefixedRLP(namesWithoutType: string[]): string;
    decodeTypePrefixedRLP(rlp: string, namesWithoutType: string[]): void;
    decodeTypePrefixedVarlenRLP(rlp: string, ...namesCandidates: string[][]): void;
}
declare class _KlaytnTxFactory extends FieldSetFactory<KlaytnTx> {
    constructor();
    fromObject(fields: Fields): KlaytnTx;
    fromRLP(rlp: string): KlaytnTx;
}
export declare const KlaytnTxFactory: _KlaytnTxFactory;
export declare function parseTransaction(rlp: string): EthersTransaction;
export {};
//# sourceMappingURL=factory.d.ts.map