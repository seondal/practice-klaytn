"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _GetChainConfig200Response = _interopRequireDefault(require("../model/GetChainConfig200Response"));
var _GetChainConfigRequest = _interopRequireDefault(require("../model/GetChainConfigRequest"));
var _GetParams200Response = _interopRequireDefault(require("../model/GetParams200Response"));
var _GetParamsRequest = _interopRequireDefault(require("../model/GetParamsRequest"));
var _GetRewardsAccumulated200Response = _interopRequireDefault(require("../model/GetRewardsAccumulated200Response"));
var _GetRewardsAccumulatedRequest = _interopRequireDefault(require("../model/GetRewardsAccumulatedRequest"));
var _IdxCache200Response = _interopRequireDefault(require("../model/IdxCache200Response"));
var _IdxCacheFromDb200Response = _interopRequireDefault(require("../model/IdxCacheFromDb200Response"));
var _IdxCacheFromDbRequest = _interopRequireDefault(require("../model/IdxCacheFromDbRequest"));
var _IdxCacheRequest = _interopRequireDefault(require("../model/IdxCacheRequest"));
var _ItemCacheFromDb200Response = _interopRequireDefault(require("../model/ItemCacheFromDb200Response"));
var _ItemCacheFromDbRequest = _interopRequireDefault(require("../model/ItemCacheFromDbRequest"));
var _MyVotes200Response = _interopRequireDefault(require("../model/MyVotes200Response"));
var _MyVotesRequest = _interopRequireDefault(require("../model/MyVotesRequest"));
var _MyVotingPower200Response = _interopRequireDefault(require("../model/MyVotingPower200Response"));
var _MyVotingPowerRequest = _interopRequireDefault(require("../model/MyVotingPowerRequest"));
var _PendingChanges200Response = _interopRequireDefault(require("../model/PendingChanges200Response"));
var _PendingChangesRequest = _interopRequireDefault(require("../model/PendingChangesRequest"));
var _ShowTally200Response = _interopRequireDefault(require("../model/ShowTally200Response"));
var _ShowTallyRequest = _interopRequireDefault(require("../model/ShowTallyRequest"));
var _TotalVotingPower200Response = _interopRequireDefault(require("../model/TotalVotingPower200Response"));
var _TotalVotingPowerRequest = _interopRequireDefault(require("../model/TotalVotingPowerRequest"));
var _Vote200Response = _interopRequireDefault(require("../model/Vote200Response"));
var _VoteRequest = _interopRequireDefault(require("../model/VoteRequest"));
var _Votes200Response = _interopRequireDefault(require("../model/Votes200Response"));
var _VotesRequest = _interopRequireDefault(require("../model/VotesRequest"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
 * web3rpc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Governance service.
* @module api/GovernanceApi
* @version 0.9.8
*/
var GovernanceApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new GovernanceApi. 
  * @alias module:api/GovernanceApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function GovernanceApi(apiClient) {
    _classCallCheck(this, GovernanceApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the getChainConfig operation.
   * @callback module:api/GovernanceApi~getChainConfigCallback
   * @param {String} error Error message, if any.
   * @param {module:model/GetChainConfig200Response} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * [getChainConfig]
   * The getChainConfig property provides the latest chain configuration. This is equivalent to chainConfigAt() with an empty parameter.  **NOTE:** In versions earlier than Klaytn v1.10.0, this API returned the initial chain configuration. However, due to its confusing name, it is updated since Klaytn v1.10.0. To query the initial chain configuration, use getChainConfigAt(0) instead.  **JSONRPC:** `governance_getChainConfig` 
   * @param {Object} opts Optional parameters
   * @param {module:model/GetChainConfigRequest} opts.getChainConfigRequest 
   * @param {module:api/GovernanceApi~getChainConfigCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/GetChainConfig200Response}
   */
  _createClass(GovernanceApi, [{
    key: "getChainConfig",
    value: function getChainConfig(opts, callback) {
      opts = opts || {};
      var postBody = new _GetChainConfigRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetChainConfig200Response["default"];
      return this.apiClient.callApi('/governance/getChainConfig', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getParams operation.
     * @callback module:api/GovernanceApi~getParamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetParams200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [getParams]
     * The getParams returns governance items at specific block.  **WARNING:** governance_getParams API will be deprecated since Klaytn v1.11 (see klaytn#1783). Use governance_getParams instead.  **NOTE:** In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.  **NOTE:** The block number can be larger than the latest block number, in which case the API returns the tentative value based on the current chain state. The future governance parameters are subject to change via additional governance votes or GovParam contract state changes.  **JSONRPC:** `governance_getParams` 
     * @param {module:model/BlockNumberOrTag} blockNumber Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetParamsRequest} opts.getParamsRequest 
     * @param {module:api/GovernanceApi~getParamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetParams200Response}
     */
  }, {
    key: "getParams",
    value: function getParams(blockNumber, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockNumber' is set
      if (blockNumber === undefined || blockNumber === null) {
        throw new Error("Missing the required parameter 'blockNumber' when calling getParams");
      }
      var postBody = new _GetParamsRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockNumber);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetParams200Response["default"];
      return this.apiClient.callApi('/governance/getParams', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRewardsAccumulated operation.
     * @callback module:api/GovernanceApi~getRewardsAccumulatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRewardsAccumulated200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [getRewardsAccumulated]
     * The API returns accumulated reward information in a given block range ( between firstBlock and lastBlock).  **JSONRPC:** `governance_getRewardsAccumulated` 
     * @param {Number} firstBlock First block
     * @param {Number} lastBlock Last block
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRewardsAccumulatedRequest} opts.getRewardsAccumulatedRequest 
     * @param {module:api/GovernanceApi~getRewardsAccumulatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRewardsAccumulated200Response}
     */
  }, {
    key: "getRewardsAccumulated",
    value: function getRewardsAccumulated(firstBlock, lastBlock, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'firstBlock' is set
      if (firstBlock === undefined || firstBlock === null) {
        throw new Error("Missing the required parameter 'firstBlock' when calling getRewardsAccumulated");
      }
      // verify the required parameter 'lastBlock' is set
      if (lastBlock === undefined || lastBlock === null) {
        throw new Error("Missing the required parameter 'lastBlock' when calling getRewardsAccumulated");
      }
      var postBody = new _GetRewardsAccumulatedRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(firstBlock);
      postBody.params.push(lastBlock);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetRewardsAccumulated200Response["default"];
      return this.apiClient.callApi('/governance/getRewardsAccumulated', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the idxCache operation.
     * @callback module:api/GovernanceApi~idxCacheCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdxCache200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [idxCache]
     * The idxCache property returns an array of current idxCache in the memory cache. idxCache contains the block numbers where governance change happened. The cache can have up to 1000 block numbers in memory by default.  **JSONRPC:** `governance_idxCache` 
     * @param {Object} opts Optional parameters
     * @param {module:model/IdxCacheRequest} opts.idxCacheRequest 
     * @param {module:api/GovernanceApi~idxCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdxCache200Response}
     */
  }, {
    key: "idxCache",
    value: function idxCache(opts, callback) {
      opts = opts || {};
      var postBody = new _IdxCacheRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _IdxCache200Response["default"];
      return this.apiClient.callApi('/governance/idxCache', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the idxCacheFromDb operation.
     * @callback module:api/GovernanceApi~idxCacheFromDbCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdxCacheFromDb200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [idxCacheFromDb]
     * The idxCacheFromDb returns an array that contains all block numbers on which a governance change ever happened. The result of idxCacheFromDb is the same or longer than that of idxCache  **JSONRPC:** `governance_idxCacheFromDb` 
     * @param {Object} opts Optional parameters
     * @param {module:model/IdxCacheFromDbRequest} opts.idxCacheFromDbRequest 
     * @param {module:api/GovernanceApi~idxCacheFromDbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdxCacheFromDb200Response}
     */
  }, {
    key: "idxCacheFromDb",
    value: function idxCacheFromDb(opts, callback) {
      opts = opts || {};
      var postBody = new _IdxCacheFromDbRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _IdxCacheFromDb200Response["default"];
      return this.apiClient.callApi('/governance/idxCacheFromDb', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the itemCacheFromDb operation.
     * @callback module:api/GovernanceApi~itemCacheFromDbCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemCacheFromDb200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [itemCacheFromDb]
     * The itemCacheFromDb returns the governance information stored in the given block. If no changes were stored in the given block, the function returns null.  **JSONRPC:** `governance_itemCacheFromDb` 
     * @param {Number} blockNumber A block number to query the governance change made in the block.
     * @param {Object} opts Optional parameters
     * @param {module:model/ItemCacheFromDbRequest} opts.itemCacheFromDbRequest 
     * @param {module:api/GovernanceApi~itemCacheFromDbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemCacheFromDb200Response}
     */
  }, {
    key: "itemCacheFromDb",
    value: function itemCacheFromDb(blockNumber, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockNumber' is set
      if (blockNumber === undefined || blockNumber === null) {
        throw new Error("Missing the required parameter 'blockNumber' when calling itemCacheFromDb");
      }
      var postBody = new _ItemCacheFromDbRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockNumber);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ItemCacheFromDb200Response["default"];
      return this.apiClient.callApi('/governance/itemCacheFromDb', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the myVotes operation.
     * @callback module:api/GovernanceApi~myVotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MyVotes200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [myVotes]
     * The myVotes property provides my vote information in the epoch. Each vote is stored in a block when the user's node generates a new block. After current epoch ends, this information is cleared.  **JSONRPC:** `governance_myVotes` 
     * @param {Object} opts Optional parameters
     * @param {module:model/MyVotesRequest} opts.myVotesRequest 
     * @param {module:api/GovernanceApi~myVotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyVotes200Response}
     */
  }, {
    key: "myVotes",
    value: function myVotes(opts, callback) {
      opts = opts || {};
      var postBody = new _MyVotesRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MyVotes200Response["default"];
      return this.apiClient.callApi('/governance/myVotes', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the myVotingPower operation.
     * @callback module:api/GovernanceApi~myVotingPowerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MyVotingPower200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [myVotingPower]
     * The myVotingPower property provides the voting power of the node. The voting power can be 1.0 ~ 2.0. In \"none\", \"single\" governance mode, totalVotingPower don't provide any information.  **JSONRPC:** `governance_myVotingPower` 
     * @param {Object} opts Optional parameters
     * @param {module:model/MyVotingPowerRequest} opts.myVotingPowerRequest 
     * @param {module:api/GovernanceApi~myVotingPowerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyVotingPower200Response}
     */
  }, {
    key: "myVotingPower",
    value: function myVotingPower(opts, callback) {
      opts = opts || {};
      var postBody = new _MyVotingPowerRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MyVotingPower200Response["default"];
      return this.apiClient.callApi('/governance/myVotingPower', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the pendingChanges operation.
     * @callback module:api/GovernanceApi~pendingChangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PendingChanges200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [pendingChanges]
     * The pendingChanges returns the list of items that have received enough number of votes but not yet finalized. At the end of the current epoch, these changes will be finalized and the result will be in effect from the epoch after next epoch.  **JSONRPC:** `governance_pendingChanges` 
     * @param {Object} opts Optional parameters
     * @param {module:model/PendingChangesRequest} opts.pendingChangesRequest 
     * @param {module:api/GovernanceApi~pendingChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PendingChanges200Response}
     */
  }, {
    key: "pendingChanges",
    value: function pendingChanges(opts, callback) {
      opts = opts || {};
      var postBody = new _PendingChangesRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _PendingChanges200Response["default"];
      return this.apiClient.callApi('/governance/pendingChanges', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the showTally operation.
     * @callback module:api/GovernanceApi~showTallyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowTally200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [showTally]
     * The showTally property provides the current tally of governance votes. It shows the aggregated approval rate in percentage. When it goes over 50%, the vote passes.  **JSONRPC:** `governance_showTally` 
     * @param {Object} opts Optional parameters
     * @param {module:model/ShowTallyRequest} opts.showTallyRequest 
     * @param {module:api/GovernanceApi~showTallyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowTally200Response}
     */
  }, {
    key: "showTally",
    value: function showTally(opts, callback) {
      opts = opts || {};
      var postBody = new _ShowTallyRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ShowTally200Response["default"];
      return this.apiClient.callApi('/governance/showTally', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the totalVotingPower operation.
     * @callback module:api/GovernanceApi~totalVotingPowerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TotalVotingPower200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [totalVotingPower]
     * The totalVotingPower property provides the sum of all voting power that CNs have. Each CN has 1.0 ~ 2.0 voting power. In \"none\", \"single\" governance mode, totalVotingPower don't provide any information.  **JSONRPC:** `governance_totalVotingPower` 
     * @param {Object} opts Optional parameters
     * @param {module:model/TotalVotingPowerRequest} opts.totalVotingPowerRequest 
     * @param {module:api/GovernanceApi~totalVotingPowerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TotalVotingPower200Response}
     */
  }, {
    key: "totalVotingPower",
    value: function totalVotingPower(opts, callback) {
      opts = opts || {};
      var postBody = new _TotalVotingPowerRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TotalVotingPower200Response["default"];
      return this.apiClient.callApi('/governance/totalVotingPower', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the vote operation.
     * @callback module:api/GovernanceApi~voteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vote200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [vote]
     * The vote method submits a new vote. If the node has the right to vote based on governance mode, the vote can be placed. If not, an error message will be returned and the vote will be ignored.  **JSONRPC:** `governance_vote` 
     * @param {String} key Name of the configuration setting to be changed. Key has the form of domain.field
     * @param {String} value Various types of value for each key.
     * @param {Object} opts Optional parameters
     * @param {module:model/VoteRequest} opts.voteRequest 
     * @param {module:api/GovernanceApi~voteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vote200Response}
     */
  }, {
    key: "vote",
    value: function vote(key, value, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling vote");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling vote");
      }
      var postBody = new _VoteRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(key);
      postBody.params.push(value);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Vote200Response["default"];
      return this.apiClient.callApi('/governance/vote', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the votes operation.
     * @callback module:api/GovernanceApi~votesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Votes200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [votes]
     * The votes returns the votes from all nodes in the epoch. These votes are gathered from the header of each block.  **JSONRPC:** `governance_votes` 
     * @param {Object} opts Optional parameters
     * @param {module:model/VotesRequest} opts.votesRequest 
     * @param {module:api/GovernanceApi~votesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Votes200Response}
     */
  }, {
    key: "votes",
    value: function votes(opts, callback) {
      opts = opts || {};
      var postBody = new _VotesRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Votes200Response["default"];
      return this.apiClient.callApi('/governance/votes', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
  return GovernanceApi;
}();