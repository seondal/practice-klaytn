"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _BacktraceAt200Response = _interopRequireDefault(require("../model/BacktraceAt200Response"));
var _BacktraceAtRequest = _interopRequireDefault(require("../model/BacktraceAtRequest"));
var _BlockProfile200Response = _interopRequireDefault(require("../model/BlockProfile200Response"));
var _BlockProfileRequest = _interopRequireDefault(require("../model/BlockProfileRequest"));
var _ChaindbCompact200Response = _interopRequireDefault(require("../model/ChaindbCompact200Response"));
var _ChaindbCompactRequest = _interopRequireDefault(require("../model/ChaindbCompactRequest"));
var _ChaindbProperty200Response = _interopRequireDefault(require("../model/ChaindbProperty200Response"));
var _ChaindbPropertyRequest = _interopRequireDefault(require("../model/ChaindbPropertyRequest"));
var _CpuProfile200Response = _interopRequireDefault(require("../model/CpuProfile200Response"));
var _CpuProfileRequest = _interopRequireDefault(require("../model/CpuProfileRequest"));
var _DumpBlock200Response = _interopRequireDefault(require("../model/DumpBlock200Response"));
var _DumpBlockRequest = _interopRequireDefault(require("../model/DumpBlockRequest"));
var _DumpStateTrie200Response = _interopRequireDefault(require("../model/DumpStateTrie200Response"));
var _DumpStateTrieRequest = _interopRequireDefault(require("../model/DumpStateTrieRequest"));
var _FreeOSMemory200Response = _interopRequireDefault(require("../model/FreeOSMemory200Response"));
var _FreeOSMemoryRequest = _interopRequireDefault(require("../model/FreeOSMemoryRequest"));
var _GcStats200Response = _interopRequireDefault(require("../model/GcStats200Response"));
var _GcStatsRequest = _interopRequireDefault(require("../model/GcStatsRequest"));
var _GetBadBlocks200Response = _interopRequireDefault(require("../model/GetBadBlocks200Response"));
var _GetBadBlocksRequest = _interopRequireDefault(require("../model/GetBadBlocksRequest"));
var _GetBlockRlp200Response = _interopRequireDefault(require("../model/GetBlockRlp200Response"));
var _GetBlockRlpRequest = _interopRequireDefault(require("../model/GetBlockRlpRequest"));
var _GetModifiedAccountsByHash200Response = _interopRequireDefault(require("../model/GetModifiedAccountsByHash200Response"));
var _GetModifiedAccountsByHashRequest = _interopRequireDefault(require("../model/GetModifiedAccountsByHashRequest"));
var _GetModifiedAccountsByNumber200Response = _interopRequireDefault(require("../model/GetModifiedAccountsByNumber200Response"));
var _GetModifiedAccountsByNumberRequest = _interopRequireDefault(require("../model/GetModifiedAccountsByNumberRequest"));
var _GetModifiedStorageNodesByNumber200Response = _interopRequireDefault(require("../model/GetModifiedStorageNodesByNumber200Response"));
var _GetModifiedStorageNodesByNumberRequest = _interopRequireDefault(require("../model/GetModifiedStorageNodesByNumberRequest"));
var _GoTrace200Response = _interopRequireDefault(require("../model/GoTrace200Response"));
var _GoTraceRequest = _interopRequireDefault(require("../model/GoTraceRequest"));
var _IsPProfRunning200Response = _interopRequireDefault(require("../model/IsPProfRunning200Response"));
var _IsPProfRunningRequest = _interopRequireDefault(require("../model/IsPProfRunningRequest"));
var _MemStats200Response = _interopRequireDefault(require("../model/MemStats200Response"));
var _MemStatsRequest = _interopRequireDefault(require("../model/MemStatsRequest"));
var _Metrics200Response = _interopRequireDefault(require("../model/Metrics200Response"));
var _MetricsRequest = _interopRequireDefault(require("../model/MetricsRequest"));
var _MutexProfile200Response = _interopRequireDefault(require("../model/MutexProfile200Response"));
var _MutexProfileRequest = _interopRequireDefault(require("../model/MutexProfileRequest"));
var _Preimage200Response = _interopRequireDefault(require("../model/Preimage200Response"));
var _PreimageRequest = _interopRequireDefault(require("../model/PreimageRequest"));
var _PrintBlock200Response = _interopRequireDefault(require("../model/PrintBlock200Response"));
var _PrintBlockRequest = _interopRequireDefault(require("../model/PrintBlockRequest"));
var _SeedHash200Response = _interopRequireDefault(require("../model/SeedHash200Response"));
var _SeedHashRequest = _interopRequireDefault(require("../model/SeedHashRequest"));
var _SetBlockProfileRate200Response = _interopRequireDefault(require("../model/SetBlockProfileRate200Response"));
var _SetBlockProfileRateRequest = _interopRequireDefault(require("../model/SetBlockProfileRateRequest"));
var _SetGCPercent200Response = _interopRequireDefault(require("../model/SetGCPercent200Response"));
var _SetGCPercentRequest = _interopRequireDefault(require("../model/SetGCPercentRequest"));
var _SetHead200Response = _interopRequireDefault(require("../model/SetHead200Response"));
var _SetHeadRequest = _interopRequireDefault(require("../model/SetHeadRequest"));
var _SetMutexProfileFraction200Response = _interopRequireDefault(require("../model/SetMutexProfileFraction200Response"));
var _SetMutexProfileFractionRequest = _interopRequireDefault(require("../model/SetMutexProfileFractionRequest"));
var _SetVMLogTarget200Response = _interopRequireDefault(require("../model/SetVMLogTarget200Response"));
var _SetVMLogTargetRequest = _interopRequireDefault(require("../model/SetVMLogTargetRequest"));
var _Stacks200Response = _interopRequireDefault(require("../model/Stacks200Response"));
var _StacksRequest = _interopRequireDefault(require("../model/StacksRequest"));
var _StandardTraceBadBlockToFile200Response = _interopRequireDefault(require("../model/StandardTraceBadBlockToFile200Response"));
var _StandardTraceBadBlockToFileRequest = _interopRequireDefault(require("../model/StandardTraceBadBlockToFileRequest"));
var _StandardTraceBlockToFile200Response = _interopRequireDefault(require("../model/StandardTraceBlockToFile200Response"));
var _StandardTraceBlockToFileRequest = _interopRequireDefault(require("../model/StandardTraceBlockToFileRequest"));
var _StandardTracingOptions = _interopRequireDefault(require("../model/StandardTracingOptions"));
var _StartCPUProfile200Response = _interopRequireDefault(require("../model/StartCPUProfile200Response"));
var _StartCPUProfileRequest = _interopRequireDefault(require("../model/StartCPUProfileRequest"));
var _StartCollectingTrieStats200Response = _interopRequireDefault(require("../model/StartCollectingTrieStats200Response"));
var _StartCollectingTrieStatsRequest = _interopRequireDefault(require("../model/StartCollectingTrieStatsRequest"));
var _StartContractWarmUp200Response = _interopRequireDefault(require("../model/StartContractWarmUp200Response"));
var _StartContractWarmUpRequest = _interopRequireDefault(require("../model/StartContractWarmUpRequest"));
var _StartGoTrace200Response = _interopRequireDefault(require("../model/StartGoTrace200Response"));
var _StartGoTraceRequest = _interopRequireDefault(require("../model/StartGoTraceRequest"));
var _StartPProf200Response = _interopRequireDefault(require("../model/StartPProf200Response"));
var _StartPProfRequest = _interopRequireDefault(require("../model/StartPProfRequest"));
var _StartWarmUp200Response = _interopRequireDefault(require("../model/StartWarmUp200Response"));
var _StartWarmUpRequest = _interopRequireDefault(require("../model/StartWarmUpRequest"));
var _StopCPUProfile200Response = _interopRequireDefault(require("../model/StopCPUProfile200Response"));
var _StopCPUProfileRequest = _interopRequireDefault(require("../model/StopCPUProfileRequest"));
var _StopGoTrace200Response = _interopRequireDefault(require("../model/StopGoTrace200Response"));
var _StopGoTraceRequest = _interopRequireDefault(require("../model/StopGoTraceRequest"));
var _StopPProf200Response = _interopRequireDefault(require("../model/StopPProf200Response"));
var _StopPProfRequest = _interopRequireDefault(require("../model/StopPProfRequest"));
var _StopWarmUp200Response = _interopRequireDefault(require("../model/StopWarmUp200Response"));
var _StopWarmUpRequest = _interopRequireDefault(require("../model/StopWarmUpRequest"));
var _StorageRangeAt200Response = _interopRequireDefault(require("../model/StorageRangeAt200Response"));
var _StorageRangeAtRequest = _interopRequireDefault(require("../model/StorageRangeAtRequest"));
var _TraceBadBlock200Response = _interopRequireDefault(require("../model/TraceBadBlock200Response"));
var _TraceBadBlockRequest = _interopRequireDefault(require("../model/TraceBadBlockRequest"));
var _TraceBlock200Response = _interopRequireDefault(require("../model/TraceBlock200Response"));
var _TraceBlockByHash200Response = _interopRequireDefault(require("../model/TraceBlockByHash200Response"));
var _TraceBlockByHashRequest = _interopRequireDefault(require("../model/TraceBlockByHashRequest"));
var _TraceBlockByNumber200Response = _interopRequireDefault(require("../model/TraceBlockByNumber200Response"));
var _TraceBlockByNumberRange200Response = _interopRequireDefault(require("../model/TraceBlockByNumberRange200Response"));
var _TraceBlockByNumberRangeRequest = _interopRequireDefault(require("../model/TraceBlockByNumberRangeRequest"));
var _TraceBlockByNumberRequest = _interopRequireDefault(require("../model/TraceBlockByNumberRequest"));
var _TraceBlockFromFile200Response = _interopRequireDefault(require("../model/TraceBlockFromFile200Response"));
var _TraceBlockFromFileRequest = _interopRequireDefault(require("../model/TraceBlockFromFileRequest"));
var _TraceBlockRequest = _interopRequireDefault(require("../model/TraceBlockRequest"));
var _TraceChain200Response = _interopRequireDefault(require("../model/TraceChain200Response"));
var _TraceChainRequest = _interopRequireDefault(require("../model/TraceChainRequest"));
var _TraceTransaction200Response = _interopRequireDefault(require("../model/TraceTransaction200Response"));
var _TraceTransactionRequest = _interopRequireDefault(require("../model/TraceTransactionRequest"));
var _TracingOptions = _interopRequireDefault(require("../model/TracingOptions"));
var _Verbosity200Response = _interopRequireDefault(require("../model/Verbosity200Response"));
var _VerbosityByID200Response = _interopRequireDefault(require("../model/VerbosityByID200Response"));
var _VerbosityByIDRequest = _interopRequireDefault(require("../model/VerbosityByIDRequest"));
var _VerbosityByName200Response = _interopRequireDefault(require("../model/VerbosityByName200Response"));
var _VerbosityByNameRequest = _interopRequireDefault(require("../model/VerbosityByNameRequest"));
var _VerbosityRequest = _interopRequireDefault(require("../model/VerbosityRequest"));
var _Vmodule200Response = _interopRequireDefault(require("../model/Vmodule200Response"));
var _VmoduleRequest = _interopRequireDefault(require("../model/VmoduleRequest"));
var _WriteBlockProfile200Response = _interopRequireDefault(require("../model/WriteBlockProfile200Response"));
var _WriteBlockProfileRequest = _interopRequireDefault(require("../model/WriteBlockProfileRequest"));
var _WriteMemProfile200Response = _interopRequireDefault(require("../model/WriteMemProfile200Response"));
var _WriteMemProfileRequest = _interopRequireDefault(require("../model/WriteMemProfileRequest"));
var _WriteMutexProfile200Response = _interopRequireDefault(require("../model/WriteMutexProfile200Response"));
var _WriteMutexProfileRequest = _interopRequireDefault(require("../model/WriteMutexProfileRequest"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
 * web3rpc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Debug service.
* @module api/DebugApi
* @version 0.9.8
*/
var DebugApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new DebugApi. 
  * @alias module:api/DebugApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DebugApi(apiClient) {
    _classCallCheck(this, DebugApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the backtraceAt operation.
   * @callback module:api/DebugApi~backtraceAtCallback
   * @param {String} error Error message, if any.
   * @param {module:model/BacktraceAt200Response} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * [Logging-backtraceAt]
   * Sets the logging backtrace location. When a backtrace location is set and a log message is emitted at that location, the stack of the goroutine executing the log statement will be printed to stderr.  **JSONRPC:** `debug_backtraceAt` 
   * @param {String} location The logging backtrace location specified as \\<filename>:\\<line>.
   * @param {Object} opts Optional parameters
   * @param {module:model/BacktraceAtRequest} opts.backtraceAtRequest 
   * @param {module:api/DebugApi~backtraceAtCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/BacktraceAt200Response}
   */
  _createClass(DebugApi, [{
    key: "backtraceAt",
    value: function backtraceAt(location, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling backtraceAt");
      }
      var postBody = new _BacktraceAtRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(location);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _BacktraceAt200Response["default"];
      return this.apiClient.callApi('/debug/logging/backtraceAt', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the blockProfile operation.
     * @callback module:api/DebugApi~blockProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlockProfile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Profiling-blockProfile]
     * Turns on block profiling for the given duration and writes profile data to disk. It uses a profile rate of 1 for most accurate information. If a different rate is desired, set the rate and write the profile manually using debug_writeBlockProfile.  **JSONRPC:** `debug_blockProfile` 
     * @param {String} file The filename for the profiling result.
     * @param {Number} seconds The profiling duration in seconds.
     * @param {Object} opts Optional parameters
     * @param {module:model/BlockProfileRequest} opts.blockProfileRequest 
     * @param {module:api/DebugApi~blockProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlockProfile200Response}
     */
  }, {
    key: "blockProfile",
    value: function blockProfile(file, seconds, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling blockProfile");
      }
      // verify the required parameter 'seconds' is set
      if (seconds === undefined || seconds === null) {
        throw new Error("Missing the required parameter 'seconds' when calling blockProfile");
      }
      var postBody = new _BlockProfileRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(file);
      postBody.params.push(seconds);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _BlockProfile200Response["default"];
      return this.apiClient.callApi('/debug/profiling/blockProfile', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the chaindbCompact operation.
     * @callback module:api/DebugApi~chaindbCompactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChaindbCompact200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-chaindbCompact]
     * ChaindbCompact flattens the entire key-value database into a single level, removing all unused slots and merging all keys.  **JSONRPC:** `debug_chaindbCompact` 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChaindbCompactRequest} opts.chaindbCompactRequest 
     * @param {module:api/DebugApi~chaindbCompactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChaindbCompact200Response}
     */
  }, {
    key: "chaindbCompact",
    value: function chaindbCompact(opts, callback) {
      opts = opts || {};
      var postBody = new _ChaindbCompactRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ChaindbCompact200Response["default"];
      return this.apiClient.callApi('/debug/chaindbCompact', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the chaindbProperty operation.
     * @callback module:api/DebugApi~chaindbPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChaindbProperty200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-chaindbProperty]
     * ChaindbProperty returns leveldb properties of the key-value database.  **JSONRPC:** `debug_chaindbProperty` 
     * @param {String} string string
     * @param {Object} opts Optional parameters
     * @param {module:model/ChaindbPropertyRequest} opts.chaindbPropertyRequest 
     * @param {module:api/DebugApi~chaindbPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChaindbProperty200Response}
     */
  }, {
    key: "chaindbProperty",
    value: function chaindbProperty(string, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'string' is set
      if (string === undefined || string === null) {
        throw new Error("Missing the required parameter 'string' when calling chaindbProperty");
      }
      var postBody = new _ChaindbPropertyRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(string);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ChaindbProperty200Response["default"];
      return this.apiClient.callApi('/debug/chaindbProperty', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the cpuProfile operation.
     * @callback module:api/DebugApi~cpuProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CpuProfile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Profiling-cpuProfile]
     * Turns on CPU profiling for the given duration and writes profile data to disk.  **JSONRPC:** `debug_cpuProfile` 
     * @param {String} file The filename for the profiling result.
     * @param {Number} seconds The profiling duration in seconds.
     * @param {Object} opts Optional parameters
     * @param {module:model/CpuProfileRequest} opts.cpuProfileRequest 
     * @param {module:api/DebugApi~cpuProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CpuProfile200Response}
     */
  }, {
    key: "cpuProfile",
    value: function cpuProfile(file, seconds, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling cpuProfile");
      }
      // verify the required parameter 'seconds' is set
      if (seconds === undefined || seconds === null) {
        throw new Error("Missing the required parameter 'seconds' when calling cpuProfile");
      }
      var postBody = new _CpuProfileRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(file);
      postBody.params.push(seconds);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CpuProfile200Response["default"];
      return this.apiClient.callApi('/debug/profiling/cpuProfile', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the dumpBlock operation.
     * @callback module:api/DebugApi~dumpBlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DumpBlock200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-dumpBlock]
     * Retrieves the state that corresponds to the block number and returns a list of accounts (including storage and code).  **NOTE:** This function correctly returns the state for a few latest, currently 4, block numbers. Retrieving older block state is restricted depending on the value set for the command-line option --state.block-interval (default: 128). This means that the function performs the state retrieval against only the block numbers that are multiples of state.block-interval. For example, when state.block-interval is 128, this function returns the state for the block numbers \"0x0\", \"0x80\", \"0x100\", \"0x180\", and so on. If the block number is not a multiple of state.block-interval, it returns 'missing trie node' error.  **JSONRPC:** `debug_dumpBlock` 
     * @param {module:model/BlockNumberOrHashOrTag} blockNumberOrHash Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter, or block hash.
     * @param {Object} opts Optional parameters
     * @param {module:model/DumpBlockRequest} opts.dumpBlockRequest 
     * @param {module:api/DebugApi~dumpBlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DumpBlock200Response}
     */
  }, {
    key: "dumpBlock",
    value: function dumpBlock(blockNumberOrHash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockNumberOrHash' is set
      if (blockNumberOrHash === undefined || blockNumberOrHash === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHash' when calling dumpBlock");
      }
      var postBody = new _DumpBlockRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockNumberOrHash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DumpBlock200Response["default"];
      return this.apiClient.callApi('/debug/blockchainInspection/dumpBlock', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the dumpStateTrie operation.
     * @callback module:api/DebugApi~dumpStateTrieCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DumpStateTrie200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-dumpStateTrie]
     * Retrieves all state/storage tries of the given state root.  **JSONRPC:** `debug_dumpStateTrie` 
     * @param {String} number The block number.
     * @param {Object} opts Optional parameters
     * @param {module:model/DumpStateTrieRequest} opts.dumpStateTrieRequest 
     * @param {module:api/DebugApi~dumpStateTrieCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DumpStateTrie200Response}
     */
  }, {
    key: "dumpStateTrie",
    value: function dumpStateTrie(number, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling dumpStateTrie");
      }
      var postBody = new _DumpStateTrieRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(number);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DumpStateTrie200Response["default"];
      return this.apiClient.callApi('/debug/blockchainInspection/dumpStateTrie', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the freeOSMemory operation.
     * @callback module:api/DebugApi~freeOSMemoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FreeOSMemory200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [freeOSMemory]
     * Returns unused memory to the OS.  **JSONRPC:** `debug_freeOSMemory` 
     * @param {Object} opts Optional parameters
     * @param {module:model/FreeOSMemoryRequest} opts.freeOSMemoryRequest 
     * @param {module:api/DebugApi~freeOSMemoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FreeOSMemory200Response}
     */
  }, {
    key: "freeOSMemory",
    value: function freeOSMemory(opts, callback) {
      opts = opts || {};
      var postBody = new _FreeOSMemoryRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _FreeOSMemory200Response["default"];
      return this.apiClient.callApi('/debug/runtimeDebugging/freeOSMemory', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the gcStats operation.
     * @callback module:api/DebugApi~gcStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GcStats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [gcStats]
     * Returns GC statistics.  **JSONRPC:** `debug_gcStats` 
     * @param {Object} opts Optional parameters
     * @param {module:model/GcStatsRequest} opts.gcStatsRequest 
     * @param {module:api/DebugApi~gcStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GcStats200Response}
     */
  }, {
    key: "gcStats",
    value: function gcStats(opts, callback) {
      opts = opts || {};
      var postBody = new _GcStatsRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GcStats200Response["default"];
      return this.apiClient.callApi('/debug/runtimeDebugging/gcStats', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getBadBlocks operation.
     * @callback module:api/DebugApi~getBadBlocksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBadBlocks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-getBadBlocks]
     * Returns a list of the last 'bad blocks' that the client has seen on the network.  **JSONRPC:** `debug_getBadBlocks` 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetBadBlocksRequest} opts.getBadBlocksRequest 
     * @param {module:api/DebugApi~getBadBlocksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBadBlocks200Response}
     */
  }, {
    key: "getBadBlocks",
    value: function getBadBlocks(opts, callback) {
      opts = opts || {};
      var postBody = new _GetBadBlocksRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetBadBlocks200Response["default"];
      return this.apiClient.callApi('/debug/blockchainInspection/getBadBlocks', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getBlockRlp operation.
     * @callback module:api/DebugApi~getBlockRlpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockRlp200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-getBlockRlp]
     * Retrieves and returns the RLP-encoded block by the block number.  **NOTE**: In versions earlier than Klaytn v1.7.0, only integer type is available.  **JSONRPC:** `debug_getBlockRlp` 
     * @param {module:model/BlockNumberOrHashOrTag} blockNumberOrHash Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter, or block hash.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetBlockRlpRequest} opts.getBlockRlpRequest 
     * @param {module:api/DebugApi~getBlockRlpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockRlp200Response}
     */
  }, {
    key: "getBlockRlp",
    value: function getBlockRlp(blockNumberOrHash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockNumberOrHash' is set
      if (blockNumberOrHash === undefined || blockNumberOrHash === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHash' when calling getBlockRlp");
      }
      var postBody = new _GetBlockRlpRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockNumberOrHash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetBlockRlp200Response["default"];
      return this.apiClient.callApi('/debug/blockchainInspection/getBlockRlp', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getModifiedAccountsByHash operation.
     * @callback module:api/DebugApi~getModifiedAccountsByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetModifiedAccountsByHash200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-getModifiedAccountsByHash]
     * Returns all accounts that have changed between the two blocks specified by their block hashes. Changes made in endBlockHash are included, but changes made in startBlockHash are not. If endBlockHash is not given, it returns the accounts modified in the startBlockHash. A change is defined as a difference in nonce, balance, code hash, or storage hash.  **JSONRPC:** `debug_getModifiedAccountsByHash` 
     * @param {String} startBlockHash The first block hash of the range to check.
     * @param {Object} opts Optional parameters
     * @param {String} opts.endBlockHash (optional) The last block hash of the range.
     * @param {module:model/GetModifiedAccountsByHashRequest} opts.getModifiedAccountsByHashRequest 
     * @param {module:api/DebugApi~getModifiedAccountsByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetModifiedAccountsByHash200Response}
     */
  }, {
    key: "getModifiedAccountsByHash",
    value: function getModifiedAccountsByHash(startBlockHash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'startBlockHash' is set
      if (startBlockHash === undefined || startBlockHash === null) {
        throw new Error("Missing the required parameter 'startBlockHash' when calling getModifiedAccountsByHash");
      }
      var postBody = new _GetModifiedAccountsByHashRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(startBlockHash);
      var defaultValue = null;
      defaultValue = "latest";
      var optParam = opts['endBlockHash'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'endBlockHash' when calling getModifiedAccountsByHash");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetModifiedAccountsByHash200Response["default"];
      return this.apiClient.callApi('/debug/blockchainInspection/getModifiedAccountsByHash', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getModifiedAccountsByNumber operation.
     * @callback module:api/DebugApi~getModifiedAccountsByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetModifiedAccountsByNumber200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-getModifiedAccountsByNumber]
     * Returns all accounts that have changed between the two blocks specified by their block numbers. Changes made in endBlockNum are included, but changes made in startBlockNum are not. If endBlockNum is not given, it returns the accounts modified in the startBlockNum. A change is defined as a difference in nonce, balance, code hash, or storage hash.  **JSONRPC:** `debug_getModifiedAccountsByNumber` 
     * @param {Number} startBlockNum The first block number of the range to check.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.endBlockNum (optional) The last block number of the range.
     * @param {module:model/GetModifiedAccountsByNumberRequest} opts.getModifiedAccountsByNumberRequest 
     * @param {module:api/DebugApi~getModifiedAccountsByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetModifiedAccountsByNumber200Response}
     */
  }, {
    key: "getModifiedAccountsByNumber",
    value: function getModifiedAccountsByNumber(startBlockNum, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'startBlockNum' is set
      if (startBlockNum === undefined || startBlockNum === null) {
        throw new Error("Missing the required parameter 'startBlockNum' when calling getModifiedAccountsByNumber");
      }
      var postBody = new _GetModifiedAccountsByNumberRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(startBlockNum);
      var defaultValue = null;
      defaultValue = "latest";
      var optParam = opts['endBlockNum'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'endBlockNum' when calling getModifiedAccountsByNumber");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetModifiedAccountsByNumber200Response["default"];
      return this.apiClient.callApi('/debug/blockchainInspection/getModifiedAccountsByNumber', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getModifiedStorageNodesByNumber operation.
     * @callback module:api/DebugApi~getModifiedStorageNodesByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetModifiedStorageNodesByNumber200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-getModifiedStorageNodesByNumber]
     * Returns the number of changed or modified state trie nodes.  **JSONRPC:** `debug_getModifiedStorageNodesByNumber` 
     * @param {String} address Address
     * @param {Number} startBlockNum The first block number of the range to check.
     * @param {Number} endBlockNum The last block number of the range.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetModifiedStorageNodesByNumberRequest} opts.getModifiedStorageNodesByNumberRequest 
     * @param {module:api/DebugApi~getModifiedStorageNodesByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetModifiedStorageNodesByNumber200Response}
     */
  }, {
    key: "getModifiedStorageNodesByNumber",
    value: function getModifiedStorageNodesByNumber(address, startBlockNum, endBlockNum, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getModifiedStorageNodesByNumber");
      }
      // verify the required parameter 'startBlockNum' is set
      if (startBlockNum === undefined || startBlockNum === null) {
        throw new Error("Missing the required parameter 'startBlockNum' when calling getModifiedStorageNodesByNumber");
      }
      // verify the required parameter 'endBlockNum' is set
      if (endBlockNum === undefined || endBlockNum === null) {
        throw new Error("Missing the required parameter 'endBlockNum' when calling getModifiedStorageNodesByNumber");
      }
      var postBody = new _GetModifiedStorageNodesByNumberRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(address);
      postBody.params.push(startBlockNum);
      postBody.params.push(endBlockNum);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetModifiedStorageNodesByNumber200Response["default"];
      return this.apiClient.callApi('/debug/getModifiedStorageNodesByNumber', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the goTrace operation.
     * @callback module:api/DebugApi~goTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoTrace200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [RuntimeTrace-goTrace]
     * Turns on Go runtime tracing for the given duration and writes trace data to disk.  **JSONRPC:** `debug_goTrace` 
     * @param {String} file The filename for the trace output.
     * @param {Number} seconds The tracing duration in seconds.
     * @param {Object} opts Optional parameters
     * @param {module:model/GoTraceRequest} opts.goTraceRequest 
     * @param {module:api/DebugApi~goTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoTrace200Response}
     */
  }, {
    key: "goTrace",
    value: function goTrace(file, seconds, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling goTrace");
      }
      // verify the required parameter 'seconds' is set
      if (seconds === undefined || seconds === null) {
        throw new Error("Missing the required parameter 'seconds' when calling goTrace");
      }
      var postBody = new _GoTraceRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(file);
      postBody.params.push(seconds);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GoTrace200Response["default"];
      return this.apiClient.callApi('/debug/runtimeTracing/goTrace', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the isPProfRunning operation.
     * @callback module:api/DebugApi~isPProfRunningCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsPProfRunning200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Profiling-isPProfRunning]
     * Returns true if the pprof HTTP server is running and false otherwise.  **JSONRPC:** `debug_isPProfRunning` 
     * @param {Object} opts Optional parameters
     * @param {module:model/IsPProfRunningRequest} opts.isPProfRunningRequest 
     * @param {module:api/DebugApi~isPProfRunningCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsPProfRunning200Response}
     */
  }, {
    key: "isPProfRunning",
    value: function isPProfRunning(opts, callback) {
      opts = opts || {};
      var postBody = new _IsPProfRunningRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _IsPProfRunning200Response["default"];
      return this.apiClient.callApi('/debug/profiling/isPProfRunning', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the memStats operation.
     * @callback module:api/DebugApi~memStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemStats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [memStats]
     * Returns detailed runtime memory statistics.  **JSONRPC:** `debug_memStats` 
     * @param {Object} opts Optional parameters
     * @param {module:model/MemStatsRequest} opts.memStatsRequest 
     * @param {module:api/DebugApi~memStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemStats200Response}
     */
  }, {
    key: "memStats",
    value: function memStats(opts, callback) {
      opts = opts || {};
      var postBody = new _MemStatsRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MemStats200Response["default"];
      return this.apiClient.callApi('/debug/runtimeDebugging/memStats', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the metrics operation.
     * @callback module:api/DebugApi~metricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metrics200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [metrics]
     * Retrieves all the known system metrics collected by the node.  **JSONRPC:** `debug_metrics` 
     * @param {Boolean} raw true If raw data is output as it is, false If not
     * @param {Object} opts Optional parameters
     * @param {module:model/MetricsRequest} opts.metricsRequest 
     * @param {module:api/DebugApi~metricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metrics200Response}
     */
  }, {
    key: "metrics",
    value: function metrics(raw, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'raw' is set
      if (raw === undefined || raw === null) {
        throw new Error("Missing the required parameter 'raw' when calling metrics");
      }
      var postBody = new _MetricsRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(raw);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Metrics200Response["default"];
      return this.apiClient.callApi('/debug/runtimeDebugging/metrics', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the mutexProfile operation.
     * @callback module:api/DebugApi~mutexProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MutexProfile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Profiling-mutexProfile]
     * Turns on mutex profiling for nsec (nanosecond) and writes profile data to file. It uses a profile rate of 1 for most accurate information. If a different rate is desired, set the rate and write the profile manually.  **JSONRPC:** `debug_mutexProfile` 
     * @param {String} file The filename for the profiling result.
     * @param {Number} seconds The profiling duration in seconds.
     * @param {Object} opts Optional parameters
     * @param {module:model/MutexProfileRequest} opts.mutexProfileRequest 
     * @param {module:api/DebugApi~mutexProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MutexProfile200Response}
     */
  }, {
    key: "mutexProfile",
    value: function mutexProfile(file, seconds, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling mutexProfile");
      }
      // verify the required parameter 'seconds' is set
      if (seconds === undefined || seconds === null) {
        throw new Error("Missing the required parameter 'seconds' when calling mutexProfile");
      }
      var postBody = new _MutexProfileRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(file);
      postBody.params.push(seconds);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MutexProfile200Response["default"];
      return this.apiClient.callApi('/debug/profiling/mutexProfile', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the preimage operation.
     * @callback module:api/DebugApi~preimageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Preimage200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-preimage]
     * Returns the preimage for a sha3 hash, if known.  **JSONRPC:** `debug_preimage` 
     * @param {String} hash sha3 hash.
     * @param {Object} opts Optional parameters
     * @param {module:model/PreimageRequest} opts.preimageRequest 
     * @param {module:api/DebugApi~preimageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Preimage200Response}
     */
  }, {
    key: "preimage",
    value: function preimage(hash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling preimage");
      }
      var postBody = new _PreimageRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(hash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Preimage200Response["default"];
      return this.apiClient.callApi('/debug/blockchainInspection/preimage', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the printBlock operation.
     * @callback module:api/DebugApi~printBlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrintBlock200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-printBlock]
     * Retrieves a block and returns its pretty printed form.  **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer type is available.*  **JSONRPC:** `debug_printBlock` 
     * @param {module:model/BlockNumberOrHashOrTag} blockNumberOrHash Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter, or block hash.
     * @param {Object} opts Optional parameters
     * @param {module:model/PrintBlockRequest} opts.printBlockRequest 
     * @param {module:api/DebugApi~printBlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrintBlock200Response}
     */
  }, {
    key: "printBlock",
    value: function printBlock(blockNumberOrHash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockNumberOrHash' is set
      if (blockNumberOrHash === undefined || blockNumberOrHash === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHash' when calling printBlock");
      }
      var postBody = new _PrintBlockRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockNumberOrHash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _PrintBlock200Response["default"];
      return this.apiClient.callApi('/debug/blockchainInspection/printBlock', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the seedHash operation.
     * @callback module:api/DebugApi~seedHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SeedHash200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-seedHash]
     * Retrieves the seed hash of a block.  **JSONRPC:** `debug_seedHash` 
     * @param {Number} blockNumber The block number.
     * @param {Object} opts Optional parameters
     * @param {module:model/SeedHashRequest} opts.seedHashRequest 
     * @param {module:api/DebugApi~seedHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeedHash200Response}
     */
  }, {
    key: "seedHash",
    value: function seedHash(blockNumber, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockNumber' is set
      if (blockNumber === undefined || blockNumber === null) {
        throw new Error("Missing the required parameter 'blockNumber' when calling seedHash");
      }
      var postBody = new _SeedHashRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockNumber);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SeedHash200Response["default"];
      return this.apiClient.callApi('/debug/seedHash', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the setBlockProfileRate operation.
     * @callback module:api/DebugApi~setBlockProfileRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetBlockProfileRate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Profiling-setBlockProfileRate]
     * Sets the rate (in samples/sec) of goroutine block profile data collection. A non-zero rate enables block profiling, setting it to zero stops the profile. Collected profile data can be written using debug_writeBlockProfile.  **JSONRPC:** `debug_setBlockProfileRate` 
     * @param {Number} rate The profiling rate in samples/sec.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetBlockProfileRateRequest} opts.setBlockProfileRateRequest 
     * @param {module:api/DebugApi~setBlockProfileRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetBlockProfileRate200Response}
     */
  }, {
    key: "setBlockProfileRate",
    value: function setBlockProfileRate(rate, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'rate' is set
      if (rate === undefined || rate === null) {
        throw new Error("Missing the required parameter 'rate' when calling setBlockProfileRate");
      }
      var postBody = new _SetBlockProfileRateRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(rate);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SetBlockProfileRate200Response["default"];
      return this.apiClient.callApi('/debug/profiling/setBlockProfileRate', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the setGCPercent operation.
     * @callback module:api/DebugApi~setGCPercentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetGCPercent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [setGCPercent]
     * Sets the garbage collection target percentage. It returns the previous setting. A negative value disables GC.  **JSONRPC:** `debug_setGCPercent` 
     * @param {Number} percent Garbage collection target percentage.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetGCPercentRequest} opts.setGCPercentRequest 
     * @param {module:api/DebugApi~setGCPercentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetGCPercent200Response}
     */
  }, {
    key: "setGCPercent",
    value: function setGCPercent(percent, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'percent' is set
      if (percent === undefined || percent === null) {
        throw new Error("Missing the required parameter 'percent' when calling setGCPercent");
      }
      var postBody = new _SetGCPercentRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(percent);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SetGCPercent200Response["default"];
      return this.apiClient.callApi('/debug/runtimeDebugging/setGCPercent', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the setHead operation.
     * @callback module:api/DebugApi~setHeadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetHead200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-setHead]
     * Sets the current head of the local chain by block number.  **WARNING:** This API is not yet implemented and always returns \"not yet implemented API\" error.  **NOTE:** This is a destructive action and may severely damage your chain. Use with extreme caution.  **JSONRPC:** `debug_setHead` 
     * @param {String} number The block number in hexadecimal string.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetHeadRequest} opts.setHeadRequest 
     * @param {module:api/DebugApi~setHeadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetHead200Response}
     */
  }, {
    key: "setHead",
    value: function setHead(number, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling setHead");
      }
      var postBody = new _SetHeadRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(number);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SetHead200Response["default"];
      return this.apiClient.callApi('/debug/blockchainInspection/setHead', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the setMutexProfileFraction operation.
     * @callback module:api/DebugApi~setMutexProfileFractionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetMutexProfileFraction200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Profiling-setMutexProfileFraction]
     * SetMutexProfileFraction sets the rate of mutex profiling.  **JSONRPC:** `debug_setMutexProfileFraction` 
     * @param {Number} rate rate
     * @param {Object} opts Optional parameters
     * @param {module:model/SetMutexProfileFractionRequest} opts.setMutexProfileFractionRequest 
     * @param {module:api/DebugApi~setMutexProfileFractionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetMutexProfileFraction200Response}
     */
  }, {
    key: "setMutexProfileFraction",
    value: function setMutexProfileFraction(rate, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'rate' is set
      if (rate === undefined || rate === null) {
        throw new Error("Missing the required parameter 'rate' when calling setMutexProfileFraction");
      }
      var postBody = new _SetMutexProfileFractionRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(rate);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SetMutexProfileFraction200Response["default"];
      return this.apiClient.callApi('/debug/setMutexProfileFraction', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the setVMLogTarget operation.
     * @callback module:api/DebugApi~setVMLogTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetVMLogTarget200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Logging-setVMLogTarget]
     * Sets the output target of vmlog precompiled contract. When the output target is a file, logs from vmlog calls in smart contracts will be written to DATADIR/log/vm.log. Here DATADIR is the directory specified by --datadir when launching klay. On the other hand, the output target is stdout, logs will be displayed like a debug message on the standard output.  **JSONRPC:** `debug_setVMLogTarget` 
     * @param {Number} target The output target (0 no output, 1 file, 2 stdout, 3 both) (default 0)
     * @param {Object} opts Optional parameters
     * @param {module:model/SetVMLogTargetRequest} opts.setVMLogTargetRequest 
     * @param {module:api/DebugApi~setVMLogTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetVMLogTarget200Response}
     */
  }, {
    key: "setVMLogTarget",
    value: function setVMLogTarget(target, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling setVMLogTarget");
      }
      var postBody = new _SetVMLogTargetRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(target);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SetVMLogTarget200Response["default"];
      return this.apiClient.callApi('/debug/logging/setVMLogTarget', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the stacks operation.
     * @callback module:api/DebugApi~stacksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stacks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [stacks]
     * Returns a printed representation of the stacks of all goroutines.  **JSONRPC:** `debug_stacks` 
     * @param {Object} opts Optional parameters
     * @param {module:model/StacksRequest} opts.stacksRequest 
     * @param {module:api/DebugApi~stacksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stacks200Response}
     */
  }, {
    key: "stacks",
    value: function stacks(opts, callback) {
      opts = opts || {};
      var postBody = new _StacksRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Stacks200Response["default"];
      return this.apiClient.callApi('/debug/runtimeDebugging/stacks', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the standardTraceBadBlockToFile operation.
     * @callback module:api/DebugApi~standardTraceBadBlockToFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StandardTraceBadBlockToFile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [StandardTrace-standardTraceBadBlockToFile]
     * Similar to debug_traceBadBlock, standardTraceBadBlockToFile accepts a bad block hash and will replay the bad block. It returns a list of file names containing tracing result. Note that the files will be stored in the machine that serves this API.  **JSONRPC:** `debug_standardTraceBadBlockToFile` 
     * @param {String} hash Hash of a block.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, module:model/StandardTracingOptions>} opts.options See standard tracing options.
     * @param {module:model/StandardTraceBadBlockToFileRequest} opts.standardTraceBadBlockToFileRequest 
     * @param {module:api/DebugApi~standardTraceBadBlockToFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StandardTraceBadBlockToFile200Response}
     */
  }, {
    key: "standardTraceBadBlockToFile",
    value: function standardTraceBadBlockToFile(hash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling standardTraceBadBlockToFile");
      }
      var postBody = new _StandardTraceBadBlockToFileRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(hash);
      var defaultValue = null;
      defaultValue = {};
      var optParam = opts['options'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'options' when calling standardTraceBadBlockToFile");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _StandardTraceBadBlockToFile200Response["default"];
      return this.apiClient.callApi('/debug/vMStandardTracing/standardTraceBadBlockToFile', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the standardTraceBlockToFile operation.
     * @callback module:api/DebugApi~standardTraceBlockToFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StandardTraceBlockToFile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [StandardTrace-standardTraceBlockToFile]
     * Similar to debug_traceBlock, standardTraceBlockToFile accepts a block hash and will replay the block that is already present in the database. It returns a list of file names containing tracing result. Note that the files will be stored in the machine that serves this API.  **JSONRPC:** `debug_standardTraceBlockToFile` 
     * @param {String} hash Hash of a block.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, module:model/StandardTracingOptions>} opts.options See standard tracing options.
     * @param {module:model/StandardTraceBlockToFileRequest} opts.standardTraceBlockToFileRequest 
     * @param {module:api/DebugApi~standardTraceBlockToFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StandardTraceBlockToFile200Response}
     */
  }, {
    key: "standardTraceBlockToFile",
    value: function standardTraceBlockToFile(hash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling standardTraceBlockToFile");
      }
      var postBody = new _StandardTraceBlockToFileRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(hash);
      var defaultValue = null;
      defaultValue = {};
      var optParam = opts['options'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'options' when calling standardTraceBlockToFile");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _StandardTraceBlockToFile200Response["default"];
      return this.apiClient.callApi('/debug/vMStandardTracing/standardTraceBlockToFile', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the startCPUProfile operation.
     * @callback module:api/DebugApi~startCPUProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartCPUProfile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Profiling-startCPUProfile]
     * Turns on CPU profiling indefinitely, writing to the given file.  **JSONRPC:** `debug_startCPUProfile` 
     * @param {String} file The filename for the profiling output.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartCPUProfileRequest} opts.startCPUProfileRequest 
     * @param {module:api/DebugApi~startCPUProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartCPUProfile200Response}
     */
  }, {
    key: "startCPUProfile",
    value: function startCPUProfile(file, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling startCPUProfile");
      }
      var postBody = new _StartCPUProfileRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(file);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _StartCPUProfile200Response["default"];
      return this.apiClient.callApi('/debug/profiling/startCPUProfile', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the startCollectingTrieStats operation.
     * @callback module:api/DebugApi~startCollectingTrieStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartCollectingTrieStats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-startCollectingTrieStats]
     * The startCollectingTrieStats iterates the latest state or storage trie to collect trie statistics. It collects storage trie statistics of the contract in the given address. If an empty address(=\"0x00...00\") is given, it collects statistics of the whole state trie. Statistics will be logged every minute before end, containing overall and depth-by-depth information. The method returns an error if it fails in starting a task, or null if it successfully has started it.  **JSONRPC:** `debug_startCollectingTrieStats` 
     * @param {String} address Contract address
     * @param {Object} opts Optional parameters
     * @param {module:model/StartCollectingTrieStatsRequest} opts.startCollectingTrieStatsRequest 
     * @param {module:api/DebugApi~startCollectingTrieStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartCollectingTrieStats200Response}
     */
  }, {
    key: "startCollectingTrieStats",
    value: function startCollectingTrieStats(address, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling startCollectingTrieStats");
      }
      var postBody = new _StartCollectingTrieStatsRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(address);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _StartCollectingTrieStats200Response["default"];
      return this.apiClient.callApi('/debug/blockchainInspection/startCollectingTrieStats', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the startContractWarmUp operation.
     * @callback module:api/DebugApi~startContractWarmUpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartContractWarmUp200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-startContractWarmUp]
     * The startContractWarmUp iterates the latest storage trie of the given contract address to warm-up the trie cache. The iteration will be automatically stopped if 90% of the trie cache is full. The method returns an error if it fails in starting a warm-up or the given address is not a contract address, or null if it successfully has started it.  **JSONRPC:** `debug_startContractWarmUp` 
     * @param {String} address Contract address
     * @param {Object} opts Optional parameters
     * @param {module:model/StartContractWarmUpRequest} opts.startContractWarmUpRequest 
     * @param {module:api/DebugApi~startContractWarmUpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartContractWarmUp200Response}
     */
  }, {
    key: "startContractWarmUp",
    value: function startContractWarmUp(address, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling startContractWarmUp");
      }
      var postBody = new _StartContractWarmUpRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(address);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _StartContractWarmUp200Response["default"];
      return this.apiClient.callApi('/debug/blockchainInspection/startContractWarmUp', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the startGoTrace operation.
     * @callback module:api/DebugApi~startGoTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartGoTrace200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [RuntimeTrace-startGoTrace]
     * Starts writing a Go runtime trace to the given file.  **JSONRPC:** `debug_startGoTrace` 
     * @param {String} file The filename for the tracing output.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartGoTraceRequest} opts.startGoTraceRequest 
     * @param {module:api/DebugApi~startGoTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartGoTrace200Response}
     */
  }, {
    key: "startGoTrace",
    value: function startGoTrace(file, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling startGoTrace");
      }
      var postBody = new _StartGoTraceRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(file);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _StartGoTrace200Response["default"];
      return this.apiClient.callApi('/debug/runtimeTracing/startGoTrace', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the startPProf operation.
     * @callback module:api/DebugApi~startPProfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartPProf200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Profiling-startPProf]
     * Starts the pprof HTTP server. The running pprof server can be accessed by (when the default configuration, i.e., localhost:6060, is used):  * http://localhost:6060/debug/pprof (for the pprof results)  * http://localhost:6060/memsize/ (for the memory size reports)  * http://localhost:6060/debug/vars (for the metrics)   **JSONRPC:** `debug_startPProf` 
     * @param {Object} opts Optional parameters
     * @param {String} opts.address pprof HTTP server listening interface (default \"127.0.0.1\").
     * @param {Number} opts.port pprof HTTP server listening port (default 6060).
     * @param {module:model/StartPProfRequest} opts.startPProfRequest 
     * @param {module:api/DebugApi~startPProfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartPProf200Response}
     */
  }, {
    key: "startPProf",
    value: function startPProf(opts, callback) {
      opts = opts || {};
      var postBody = new _StartPProfRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var defaultValue = null;
      var optParam = opts['address'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'address' when calling startPProf");
      }
      postBody.params.push(optParam);
      var defaultValue = null;
      var optParam = opts['port'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'port' when calling startPProf");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _StartPProf200Response["default"];
      return this.apiClient.callApi('/debug/profiling/startPProf', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the startWarmUp operation.
     * @callback module:api/DebugApi~startWarmUpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartWarmUp200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-startWarmUp]
     * The startWarmUp iterates the latest state trie to warm-up the trie cache. The iteration will be automatically stopped if 90% of the trie cache is full. The method returns an error if it fails in starting a warm-up, or null if it successfully has started it.  **JSONRPC:** `debug_startWarmUp` 
     * @param {Object} opts Optional parameters
     * @param {module:model/StartWarmUpRequest} opts.startWarmUpRequest 
     * @param {module:api/DebugApi~startWarmUpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartWarmUp200Response}
     */
  }, {
    key: "startWarmUp",
    value: function startWarmUp(opts, callback) {
      opts = opts || {};
      var postBody = new _StartWarmUpRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _StartWarmUp200Response["default"];
      return this.apiClient.callApi('/debug/blockchainInspection/startWarmUp', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the stopCPUProfile operation.
     * @callback module:api/DebugApi~stopCPUProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopCPUProfile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Profiling-stopCPUProfile]
     * Turns off CPU profiling.  **JSONRPC:** `debug_stopCPUProfile` 
     * @param {Object} opts Optional parameters
     * @param {module:model/StopCPUProfileRequest} opts.stopCPUProfileRequest 
     * @param {module:api/DebugApi~stopCPUProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopCPUProfile200Response}
     */
  }, {
    key: "stopCPUProfile",
    value: function stopCPUProfile(opts, callback) {
      opts = opts || {};
      var postBody = new _StopCPUProfileRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _StopCPUProfile200Response["default"];
      return this.apiClient.callApi('/debug/profiling/stopCPUProfile', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the stopGoTrace operation.
     * @callback module:api/DebugApi~stopGoTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopGoTrace200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [RuntimeTrace-stopGoTrace]
     * Stops writing the Go runtime trace.  **JSONRPC:** `debug_stopGoTrace` 
     * @param {Object} opts Optional parameters
     * @param {module:model/StopGoTraceRequest} opts.stopGoTraceRequest 
     * @param {module:api/DebugApi~stopGoTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopGoTrace200Response}
     */
  }, {
    key: "stopGoTrace",
    value: function stopGoTrace(opts, callback) {
      opts = opts || {};
      var postBody = new _StopGoTraceRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _StopGoTrace200Response["default"];
      return this.apiClient.callApi('/debug/runtimeTracing/stopGoTrace', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the stopPProf operation.
     * @callback module:api/DebugApi~stopPProfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopPProf200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Profiling-stopPProf]
     * Stops the pprof HTTP server.  **JSONRPC:** `debug_stopPProf` 
     * @param {Object} opts Optional parameters
     * @param {module:model/StopPProfRequest} opts.stopPProfRequest 
     * @param {module:api/DebugApi~stopPProfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopPProf200Response}
     */
  }, {
    key: "stopPProf",
    value: function stopPProf(opts, callback) {
      opts = opts || {};
      var postBody = new _StopPProfRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _StopPProf200Response["default"];
      return this.apiClient.callApi('/debug/profiling/stopPProf', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the stopWarmUp operation.
     * @callback module:api/DebugApi~stopWarmUpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopWarmUp200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-stopWarmUp]
     * The stopWarmUp stops the currently running warm-up. This method takes no parameters, and returns null or an error depending on a warm-up was stopped or not.  **JSONRPC:** `debug_stopWarmUp` 
     * @param {Object} opts Optional parameters
     * @param {module:model/StopWarmUpRequest} opts.stopWarmUpRequest 
     * @param {module:api/DebugApi~stopWarmUpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopWarmUp200Response}
     */
  }, {
    key: "stopWarmUp",
    value: function stopWarmUp(opts, callback) {
      opts = opts || {};
      var postBody = new _StopWarmUpRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _StopWarmUp200Response["default"];
      return this.apiClient.callApi('/debug/blockchainInspection/stopWarmUp', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the storageRangeAt operation.
     * @callback module:api/DebugApi~storageRangeAtCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageRangeAt200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Inspection-storageRangeAt]
     * StorageRangeAt returns the storage at the given block height and transaction index.  **JSONRPC:** `debug_storageRangeAt` 
     * @param {String} blockHash 
     * @param {Number} txIndex 
     * @param {String} address 
     * @param {String} keyStart 
     * @param {Number} maxResult 
     * @param {Object} opts Optional parameters
     * @param {module:model/StorageRangeAtRequest} opts.storageRangeAtRequest 
     * @param {module:api/DebugApi~storageRangeAtCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageRangeAt200Response}
     */
  }, {
    key: "storageRangeAt",
    value: function storageRangeAt(blockHash, txIndex, address, keyStart, maxResult, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockHash' is set
      if (blockHash === undefined || blockHash === null) {
        throw new Error("Missing the required parameter 'blockHash' when calling storageRangeAt");
      }
      // verify the required parameter 'txIndex' is set
      if (txIndex === undefined || txIndex === null) {
        throw new Error("Missing the required parameter 'txIndex' when calling storageRangeAt");
      }
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling storageRangeAt");
      }
      // verify the required parameter 'keyStart' is set
      if (keyStart === undefined || keyStart === null) {
        throw new Error("Missing the required parameter 'keyStart' when calling storageRangeAt");
      }
      // verify the required parameter 'maxResult' is set
      if (maxResult === undefined || maxResult === null) {
        throw new Error("Missing the required parameter 'maxResult' when calling storageRangeAt");
      }
      var postBody = new _StorageRangeAtRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockHash);
      postBody.params.push(txIndex);
      postBody.params.push(address);
      postBody.params.push(keyStart);
      postBody.params.push(maxResult);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _StorageRangeAt200Response["default"];
      return this.apiClient.callApi('/debug/storageRangeAt', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the traceBadBlock operation.
     * @callback module:api/DebugApi~traceBadBlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TraceBadBlock200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Trace-traceBadBlock]
     * The traceBadBlock method will return a full stack trace of all invoked opcodes of all transactions that were included in this block.  **NOTE:** the parent of this block must be present or it will fail.  **JSONRPC:** `debug_traceBadBlock` 
     * @param {String} hash Hash of a block.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, module:model/TracingOptions>} opts.options Tracing options.
     * @param {module:model/TraceBadBlockRequest} opts.traceBadBlockRequest 
     * @param {module:api/DebugApi~traceBadBlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TraceBadBlock200Response}
     */
  }, {
    key: "traceBadBlock",
    value: function traceBadBlock(hash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling traceBadBlock");
      }
      var postBody = new _TraceBadBlockRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(hash);
      var defaultValue = null;
      defaultValue = {};
      var optParam = opts['options'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'options' when calling traceBadBlock");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TraceBadBlock200Response["default"];
      return this.apiClient.callApi('/debug/vMTracing/traceBadBlock', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the traceBlock operation.
     * @callback module:api/DebugApi~traceBlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TraceBlock200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Trace-traceBlock]
     * The traceBlock method will return a full stack trace of all invoked opcodes of all transactions that were included in this block.  **NOTE:** the parent of this block must be present or it will fail.  **JSONRPC:** `debug_traceBlock` 
     * @param {String} blockRlp The RLP-encoded block.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, module:model/TracingOptions>} opts.options See tracing options.
     * @param {module:model/TraceBlockRequest} opts.traceBlockRequest 
     * @param {module:api/DebugApi~traceBlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TraceBlock200Response}
     */
  }, {
    key: "traceBlock",
    value: function traceBlock(blockRlp, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockRlp' is set
      if (blockRlp === undefined || blockRlp === null) {
        throw new Error("Missing the required parameter 'blockRlp' when calling traceBlock");
      }
      var postBody = new _TraceBlockRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockRlp);
      var defaultValue = null;
      defaultValue = {};
      var optParam = opts['options'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'options' when calling traceBlock");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TraceBlock200Response["default"];
      return this.apiClient.callApi('/debug/vMTracing/traceBlock', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the traceBlockByHash operation.
     * @callback module:api/DebugApi~traceBlockByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TraceBlockByHash200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Trace-traceBlockByHash]
     * Similar to debug_traceBlock, traceBlockByHash accepts a block hash and will replay the block that is already present in the database.  **JSONRPC:** `debug_traceBlockByHash` 
     * @param {String} hash Hash of a block.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, module:model/TracingOptions>} opts.options Tracing options.
     * @param {module:model/TraceBlockByHashRequest} opts.traceBlockByHashRequest 
     * @param {module:api/DebugApi~traceBlockByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TraceBlockByHash200Response}
     */
  }, {
    key: "traceBlockByHash",
    value: function traceBlockByHash(hash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling traceBlockByHash");
      }
      var postBody = new _TraceBlockByHashRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(hash);
      var defaultValue = null;
      defaultValue = {};
      var optParam = opts['options'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'options' when calling traceBlockByHash");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TraceBlockByHash200Response["default"];
      return this.apiClient.callApi('/debug/vMTracing/traceBlockByHash', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the traceBlockByNumber operation.
     * @callback module:api/DebugApi~traceBlockByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TraceBlockByNumber200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Trace-traceBlockByNumber]
     * Similar to debug_traceBlock, traceBlockByNumber accepts a block number and will replay the block that is already present in the database.  **JSONRPC:** `debug_traceBlockByNumber` 
     * @param {String} number The block number.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, module:model/TracingOptions>} opts.options Tracing options.
     * @param {module:model/TraceBlockByNumberRequest} opts.traceBlockByNumberRequest 
     * @param {module:api/DebugApi~traceBlockByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TraceBlockByNumber200Response}
     */
  }, {
    key: "traceBlockByNumber",
    value: function traceBlockByNumber(number, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling traceBlockByNumber");
      }
      var postBody = new _TraceBlockByNumberRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(number);
      var defaultValue = null;
      defaultValue = {};
      var optParam = opts['options'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'options' when calling traceBlockByNumber");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TraceBlockByNumber200Response["default"];
      return this.apiClient.callApi('/debug/vMTracing/traceBlockByNumber', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the traceBlockByNumberRange operation.
     * @callback module:api/DebugApi~traceBlockByNumberRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TraceBlockByNumberRange200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Trace-traceBlockByNumberRange]
     * Returns the structured logs created during the execution of EVM between two blocks (including start) as a JSON object. That is, the result of tracing for a total of end-start+1 blocks is returned.  **NOTE:** Don't trace too many blocks at the same time as it can overuse machine resources.  **JSONRPC:** `debug_traceBlockByNumberRange` 
     * @param {Number} startBlock Tracing start block number.
     * @param {Number} endBlock Tracing end block number.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, module:model/TracingOptions>} opts.options Tracing options.
     * @param {module:model/TraceBlockByNumberRangeRequest} opts.traceBlockByNumberRangeRequest 
     * @param {module:api/DebugApi~traceBlockByNumberRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TraceBlockByNumberRange200Response}
     */
  }, {
    key: "traceBlockByNumberRange",
    value: function traceBlockByNumberRange(startBlock, endBlock, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'startBlock' is set
      if (startBlock === undefined || startBlock === null) {
        throw new Error("Missing the required parameter 'startBlock' when calling traceBlockByNumberRange");
      }
      // verify the required parameter 'endBlock' is set
      if (endBlock === undefined || endBlock === null) {
        throw new Error("Missing the required parameter 'endBlock' when calling traceBlockByNumberRange");
      }
      var postBody = new _TraceBlockByNumberRangeRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(startBlock);
      postBody.params.push(endBlock);
      var defaultValue = null;
      defaultValue = {};
      var optParam = opts['options'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'options' when calling traceBlockByNumberRange");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TraceBlockByNumberRange200Response["default"];
      return this.apiClient.callApi('/debug/vMTracing/traceBlockByNumberRange', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the traceBlockFromFile operation.
     * @callback module:api/DebugApi~traceBlockFromFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TraceBlockFromFile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Trace-traceBlockFromFile]
     * Similar to debug_traceBlock, traceBlockFromFile accepts a file containing the RLP of the block.  **NOTE:** the file must include the associated hexadecimal string without 0x.  **JSONRPC:** `debug_traceBlockFromFile` 
     * @param {String} fileName The file name which contains the RLP of the block.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, module:model/TracingOptions>} opts.options Tracing options.
     * @param {module:model/TraceBlockFromFileRequest} opts.traceBlockFromFileRequest 
     * @param {module:api/DebugApi~traceBlockFromFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TraceBlockFromFile200Response}
     */
  }, {
    key: "traceBlockFromFile",
    value: function traceBlockFromFile(fileName, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling traceBlockFromFile");
      }
      var postBody = new _TraceBlockFromFileRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(fileName);
      var defaultValue = null;
      defaultValue = {};
      var optParam = opts['options'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'options' when calling traceBlockFromFile");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TraceBlockFromFile200Response["default"];
      return this.apiClient.callApi('/debug/vMTracing/traceBlockFromFile', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the traceChain operation.
     * @callback module:api/DebugApi~traceChainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TraceChain200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Trace-traceChain]
     * Returns the structured logs created during the execution of EVM between two blocks (excluding start) as a JSON object. This endpoint must be invoked via debug_subscribe as follows:  **NOTE:** Don't trace too many blocks at the same time as it can overuse machine resources.  **JSONRPC:** `debug_traceChain` 
     * @param {Number} startBlockNumber Tracing start block number.
     * @param {Number} number Tracing end block number.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, module:model/TracingOptions>} opts.options Tracing options.
     * @param {module:model/TraceChainRequest} opts.traceChainRequest 
     * @param {module:api/DebugApi~traceChainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TraceChain200Response}
     */
  }, {
    key: "traceChain",
    value: function traceChain(startBlockNumber, number, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'startBlockNumber' is set
      if (startBlockNumber === undefined || startBlockNumber === null) {
        throw new Error("Missing the required parameter 'startBlockNumber' when calling traceChain");
      }
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling traceChain");
      }
      var postBody = new _TraceChainRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(startBlockNumber);
      postBody.params.push(number);
      var defaultValue = null;
      defaultValue = {};
      var optParam = opts['options'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'options' when calling traceChain");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TraceChain200Response["default"];
      return this.apiClient.callApi('/debug/vMTracing/traceChain', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the traceTransaction operation.
     * @callback module:api/DebugApi~traceTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TraceTransaction200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Trace-traceTransaction]
     * The traceTransaction debugging method will attempt to run the transaction in the exact same manner as it was executed on the network. It will replay any transaction that may have been executed prior to this one before it will finally attempt to execute the transaction that corresponds to the given hash.  **JSONRPC:** `debug_traceTransaction` 
     * @param {String} txHash The hash of the transaction.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, module:model/TracingOptions>} opts.options Tracing options.
     * @param {module:model/TraceTransactionRequest} opts.traceTransactionRequest 
     * @param {module:api/DebugApi~traceTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TraceTransaction200Response}
     */
  }, {
    key: "traceTransaction",
    value: function traceTransaction(txHash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'txHash' is set
      if (txHash === undefined || txHash === null) {
        throw new Error("Missing the required parameter 'txHash' when calling traceTransaction");
      }
      var postBody = new _TraceTransactionRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(txHash);
      var defaultValue = null;
      defaultValue = {};
      var optParam = opts['options'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'options' when calling traceTransaction");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TraceTransaction200Response["default"];
      return this.apiClient.callApi('/debug/vMTracing/traceTransaction', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the verbosity operation.
     * @callback module:api/DebugApi~verbosityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Verbosity200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Logging-verbosity]
     * Sets the logging verbosity ceiling. Log messages with level up to and including the given level will be printed.  (Level : 0=crit, 1=error, 2=warn, 3=info, 4=debug, 5=trace)  The verbosity of individual packages and source files can be raised using debug_vmodule.  **JSONRPC:** `debug_verbosity` 
     * @param {Number} level The logging verbosity level.
     * @param {Object} opts Optional parameters
     * @param {module:model/VerbosityRequest} opts.verbosityRequest 
     * @param {module:api/DebugApi~verbosityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Verbosity200Response}
     */
  }, {
    key: "verbosity",
    value: function verbosity(level, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'level' is set
      if (level === undefined || level === null) {
        throw new Error("Missing the required parameter 'level' when calling verbosity");
      }
      var postBody = new _VerbosityRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(level);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Verbosity200Response["default"];
      return this.apiClient.callApi('/debug/logging/verbosity', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the verbosityByID operation.
     * @callback module:api/DebugApi~verbosityByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerbosityByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Logging-verbosityByID]
     * Sets the verbosity of log module with given ModuleID. Please note that VerbosityByID only works with zapLogger.  (ModuleID : Please refer to the code on the github. )  (Level : 0=crit, 1=error, 2=warn, 3=info, 4=debug, 5=trace)  The verbosity of individual packages and source files can be raised using debug_vmodule.  **JSONRPC:** `debug_verbosityByID` 
     * @param {Number} id The module id.
     * @param {Number} level The logging verbosity level.
     * @param {Object} opts Optional parameters
     * @param {module:model/VerbosityByIDRequest} opts.verbosityByIDRequest 
     * @param {module:api/DebugApi~verbosityByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerbosityByID200Response}
     */
  }, {
    key: "verbosityByID",
    value: function verbosityByID(id, level, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling verbosityByID");
      }
      // verify the required parameter 'level' is set
      if (level === undefined || level === null) {
        throw new Error("Missing the required parameter 'level' when calling verbosityByID");
      }
      var postBody = new _VerbosityByIDRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(id);
      postBody.params.push(level);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _VerbosityByID200Response["default"];
      return this.apiClient.callApi('/debug/logging/verbosityByID', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the verbosityByName operation.
     * @callback module:api/DebugApi~verbosityByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerbosityByName200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Logging-verbosityByName]
     * Sets the verbosity of log module with given name. Please note that VerbosityByName only works with zapLogger.  (Level : 0=crit, 1=error, 2=warn, 3=info, 4=debug, 5=trace)  The verbosity of individual packages and source files can be raised using debug_vmodule.  **JSONRPC:** `debug_verbosityByName` 
     * @param {String} name The module name.
     * @param {Number} level The logging verbosity level.
     * @param {Object} opts Optional parameters
     * @param {module:model/VerbosityByNameRequest} opts.verbosityByNameRequest 
     * @param {module:api/DebugApi~verbosityByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerbosityByName200Response}
     */
  }, {
    key: "verbosityByName",
    value: function verbosityByName(name, level, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling verbosityByName");
      }
      // verify the required parameter 'level' is set
      if (level === undefined || level === null) {
        throw new Error("Missing the required parameter 'level' when calling verbosityByName");
      }
      var postBody = new _VerbosityByNameRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(name);
      postBody.params.push(level);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _VerbosityByName200Response["default"];
      return this.apiClient.callApi('/debug/logging/verbosityByName', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the vmodule operation.
     * @callback module:api/DebugApi~vmoduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vmodule200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Logging-vmodule]
     * Sets the logging verbosity pattern.  **JSONRPC:** `debug_vmodule` 
     * @param {String} module The module name for logging.
     * @param {Object} opts Optional parameters
     * @param {module:model/VmoduleRequest} opts.vmoduleRequest 
     * @param {module:api/DebugApi~vmoduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vmodule200Response}
     */
  }, {
    key: "vmodule",
    value: function vmodule(module, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'module' is set
      if (module === undefined || module === null) {
        throw new Error("Missing the required parameter 'module' when calling vmodule");
      }
      var postBody = new _VmoduleRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(module);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Vmodule200Response["default"];
      return this.apiClient.callApi('/debug/logging/vmodule', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the writeBlockProfile operation.
     * @callback module:api/DebugApi~writeBlockProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WriteBlockProfile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Profiling-writeBlockProfile]
     * Writes a goroutine blocking profile to the given file.  **JSONRPC:** `debug_writeBlockProfile` 
     * @param {String} file The filename for the profiling output.
     * @param {Object} opts Optional parameters
     * @param {module:model/WriteBlockProfileRequest} opts.writeBlockProfileRequest 
     * @param {module:api/DebugApi~writeBlockProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WriteBlockProfile200Response}
     */
  }, {
    key: "writeBlockProfile",
    value: function writeBlockProfile(file, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling writeBlockProfile");
      }
      var postBody = new _WriteBlockProfileRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(file);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _WriteBlockProfile200Response["default"];
      return this.apiClient.callApi('/debug/profiling/writeBlockProfile', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the writeMemProfile operation.
     * @callback module:api/DebugApi~writeMemProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WriteMemProfile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Profiling-writeMemProfile]
     * Writes an allocation profile to the given file. Note that the profiling rate cannot be set through the API, it must be set on the command line using the --memprofilerate flag.  **JSONRPC:** `debug_writeMemProfile` 
     * @param {String} file The filename for the profiling output.
     * @param {Object} opts Optional parameters
     * @param {module:model/WriteMemProfileRequest} opts.writeMemProfileRequest 
     * @param {module:api/DebugApi~writeMemProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WriteMemProfile200Response}
     */
  }, {
    key: "writeMemProfile",
    value: function writeMemProfile(file, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling writeMemProfile");
      }
      var postBody = new _WriteMemProfileRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(file);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _WriteMemProfile200Response["default"];
      return this.apiClient.callApi('/debug/profiling/writeMemProfile', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the writeMutexProfile operation.
     * @callback module:api/DebugApi~writeMutexProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WriteMutexProfile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Profiling-writeMutexProfile]
     * Writes a goroutine blocking profile to the given file.  **JSONRPC:** `debug_writeMutexProfile` 
     * @param {String} file The filename for the profiling output.
     * @param {Object} opts Optional parameters
     * @param {module:model/WriteMutexProfileRequest} opts.writeMutexProfileRequest 
     * @param {module:api/DebugApi~writeMutexProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WriteMutexProfile200Response}
     */
  }, {
    key: "writeMutexProfile",
    value: function writeMutexProfile(file, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling writeMutexProfile");
      }
      var postBody = new _WriteMutexProfileRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(file);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _WriteMutexProfile200Response["default"];
      return this.apiClient.callApi('/debug/profiling/writeMutexProfile', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
  return DebugApi;
}();