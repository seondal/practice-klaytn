"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeFormatEVM = exports.isEmbeddableAccountKeyType = exports.isKlaytnAccountKeyType = exports.AccountKeyType = exports.isFeePayerSigTxType = exports.isPartialFeeDelegationTxType = exports.isFeeDelegationTxType = exports.isBasicTxType = exports.isKlaytnTxType = exports.TxType = void 0;
// Klaytn Type Enumeration
var TxType;
(function (TxType) {
    // Basic
    TxType[TxType["ValueTransfer"] = 8] = "ValueTransfer";
    TxType[TxType["ValueTransferMemo"] = 16] = "ValueTransferMemo";
    TxType[TxType["AccountUpdate"] = 32] = "AccountUpdate";
    TxType[TxType["SmartContractDeploy"] = 40] = "SmartContractDeploy";
    TxType[TxType["SmartContractExecution"] = 48] = "SmartContractExecution";
    TxType[TxType["Cancel"] = 56] = "Cancel";
    // Fee Delegation
    TxType[TxType["FeeDelegatedValueTransfer"] = 9] = "FeeDelegatedValueTransfer";
    TxType[TxType["FeeDelegatedValueTransferMemo"] = 17] = "FeeDelegatedValueTransferMemo";
    TxType[TxType["FeeDelegatedAccountUpdate"] = 33] = "FeeDelegatedAccountUpdate";
    TxType[TxType["FeeDelegatedSmartContractDeploy"] = 41] = "FeeDelegatedSmartContractDeploy";
    TxType[TxType["FeeDelegatedSmartContractExecution"] = 49] = "FeeDelegatedSmartContractExecution";
    TxType[TxType["FeeDelegatedCancel"] = 57] = "FeeDelegatedCancel";
    // Partial Fee Delegation
    TxType[TxType["FeeDelegatedValueTransferWithRatio"] = 10] = "FeeDelegatedValueTransferWithRatio";
    TxType[TxType["FeeDelegatedValueTransferMemoWithRatio"] = 18] = "FeeDelegatedValueTransferMemoWithRatio";
    TxType[TxType["FeeDelegatedAccountUpdateWithRatio"] = 34] = "FeeDelegatedAccountUpdateWithRatio";
    TxType[TxType["FeeDelegatedSmartContractDeployWithRatio"] = 42] = "FeeDelegatedSmartContractDeployWithRatio";
    TxType[TxType["FeeDelegatedSmartContractExecutionWithRatio"] = 50] = "FeeDelegatedSmartContractExecutionWithRatio";
    TxType[TxType["FeeDelegatedCancelWithRatio"] = 58] = "FeeDelegatedCancelWithRatio";
})(TxType || (exports.TxType = TxType = {}));
function isKlaytnTxType(type) {
    return (type in TxType);
}
exports.isKlaytnTxType = isKlaytnTxType;
function isBasicTxType(type) {
    return (type in TxType) && ((type & 0x3) == 0x0);
}
exports.isBasicTxType = isBasicTxType;
function isFeeDelegationTxType(type) {
    return (type in TxType) && ((type & 0x3) == 0x1);
}
exports.isFeeDelegationTxType = isFeeDelegationTxType;
function isPartialFeeDelegationTxType(type) {
    return (type in TxType) && ((type & 0x3) == 0x2);
}
exports.isPartialFeeDelegationTxType = isPartialFeeDelegationTxType;
function isFeePayerSigTxType(type) {
    return isFeeDelegationTxType(type) || isPartialFeeDelegationTxType(type);
}
exports.isFeePayerSigTxType = isFeePayerSigTxType;
var AccountKeyType;
(function (AccountKeyType) {
    // Account Key Type
    AccountKeyType[AccountKeyType["Nil"] = 0] = "Nil";
    AccountKeyType[AccountKeyType["Legacy"] = 1] = "Legacy";
    AccountKeyType[AccountKeyType["Public"] = 2] = "Public";
    AccountKeyType[AccountKeyType["Fail"] = 3] = "Fail";
    AccountKeyType[AccountKeyType["WeightedMultiSig"] = 4] = "WeightedMultiSig";
    AccountKeyType[AccountKeyType["RoleBased"] = 5] = "RoleBased";
})(AccountKeyType || (exports.AccountKeyType = AccountKeyType = {}));
function isKlaytnAccountKeyType(type) {
    return (type in AccountKeyType);
}
exports.isKlaytnAccountKeyType = isKlaytnAccountKeyType;
// Returns true if it can be embedded in an AccountKeyRoleBased
function isEmbeddableAccountKeyType(type) {
    // any of AccountKeyNil, AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, and AccountKeyWeightedMultiSig.
    return (type in AccountKeyType) && (type != AccountKeyType.RoleBased);
}
exports.isEmbeddableAccountKeyType = isEmbeddableAccountKeyType;
exports.CodeFormatEVM = 0x00;
//# sourceMappingURL=const.js.map