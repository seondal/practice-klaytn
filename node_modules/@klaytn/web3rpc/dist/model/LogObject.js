"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
 * web3rpc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The LogObject model module.
 * @module model/LogObject
 * @version 0.9.8
 */
var LogObject = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>LogObject</code>.
   * For filters created with klay_newFilter logs are objects with following properties
   * @alias module:model/LogObject
   * @param removed {Boolean} true when the log was removed, due to a chain reorganization. false if its a valid log.
   * @param logIndex {String} Integer of the log index position in the block. null when it is a pending log.
   * @param transactionIndex {String} Integer of the transactions index position log was created from. null when pending.
   * @param transactionHash {String} Hash of the transactions this log was created from. null when pending.
   * @param blockHash {String} Hash of the block where this log was in. null when pending.
   * @param blockNumber {String} The block number where this log was in. null when pending.
   * @param address {String} Address from which this log originated.
   * @param data {String} Contains the non-indexed arguments of the log.
   * @param topics {Array.<String>} Array of 0 to 4 32-byte DATA of indexed log arguments. (In Solidity The first topic is the hash of the signature of the event (e.g., Deposit(address,bytes32,uint256)), except you declared the event with the anonymous specifier.).
   */
  function LogObject(removed, logIndex, transactionIndex, transactionHash, blockHash, blockNumber, address, data, topics) {
    _classCallCheck(this, LogObject);
    LogObject.initialize(this, removed, logIndex, transactionIndex, transactionHash, blockHash, blockNumber, address, data, topics);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(LogObject, null, [{
    key: "initialize",
    value: function initialize(obj, removed, logIndex, transactionIndex, transactionHash, blockHash, blockNumber, address, data, topics) {
      obj['removed'] = removed;
      obj['logIndex'] = logIndex;
      obj['transactionIndex'] = transactionIndex;
      obj['transactionHash'] = transactionHash;
      obj['blockHash'] = blockHash;
      obj['blockNumber'] = blockNumber;
      obj['address'] = address;
      obj['data'] = data;
      obj['topics'] = topics;
    }

    /**
     * Constructs a <code>LogObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogObject} obj Optional instance to populate.
     * @return {module:model/LogObject} The populated <code>LogObject</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new LogObject();
        if (data.hasOwnProperty('removed')) {
          obj['removed'] = _ApiClient["default"].convertToType(data['removed'], 'Boolean');
        }
        if (data.hasOwnProperty('logIndex')) {
          obj['logIndex'] = _ApiClient["default"].convertToType(data['logIndex'], 'String');
        }
        if (data.hasOwnProperty('transactionIndex')) {
          obj['transactionIndex'] = _ApiClient["default"].convertToType(data['transactionIndex'], 'String');
        }
        if (data.hasOwnProperty('transactionHash')) {
          obj['transactionHash'] = _ApiClient["default"].convertToType(data['transactionHash'], 'String');
        }
        if (data.hasOwnProperty('blockHash')) {
          obj['blockHash'] = _ApiClient["default"].convertToType(data['blockHash'], 'String');
        }
        if (data.hasOwnProperty('blockNumber')) {
          obj['blockNumber'] = _ApiClient["default"].convertToType(data['blockNumber'], 'String');
        }
        if (data.hasOwnProperty('address')) {
          obj['address'] = _ApiClient["default"].convertToType(data['address'], 'String');
        }
        if (data.hasOwnProperty('data')) {
          obj['data'] = _ApiClient["default"].convertToType(data['data'], 'String');
        }
        if (data.hasOwnProperty('topics')) {
          obj['topics'] = _ApiClient["default"].convertToType(data['topics'], ['String']);
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogObject</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(LogObject.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data[property]) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['logIndex'] && !(typeof data['logIndex'] === 'string' || data['logIndex'] instanceof String)) {
        throw new Error("Expected the field `logIndex` to be a primitive type in the JSON string but got " + data['logIndex']);
      }
      // ensure the json data is a string
      if (data['transactionIndex'] && !(typeof data['transactionIndex'] === 'string' || data['transactionIndex'] instanceof String)) {
        throw new Error("Expected the field `transactionIndex` to be a primitive type in the JSON string but got " + data['transactionIndex']);
      }
      // ensure the json data is a string
      if (data['transactionHash'] && !(typeof data['transactionHash'] === 'string' || data['transactionHash'] instanceof String)) {
        throw new Error("Expected the field `transactionHash` to be a primitive type in the JSON string but got " + data['transactionHash']);
      }
      // ensure the json data is a string
      if (data['blockHash'] && !(typeof data['blockHash'] === 'string' || data['blockHash'] instanceof String)) {
        throw new Error("Expected the field `blockHash` to be a primitive type in the JSON string but got " + data['blockHash']);
      }
      // ensure the json data is a string
      if (data['blockNumber'] && !(typeof data['blockNumber'] === 'string' || data['blockNumber'] instanceof String)) {
        throw new Error("Expected the field `blockNumber` to be a primitive type in the JSON string but got " + data['blockNumber']);
      }
      // ensure the json data is a string
      if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
        throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
      }
      // ensure the json data is a string
      if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
        throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
      }
      // ensure the json data is an array
      if (!Array.isArray(data['topics'])) {
        throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
      }
      return true;
    }
  }]);
  return LogObject;
}();
LogObject.RequiredProperties = ["removed", "logIndex", "transactionIndex", "transactionHash", "blockHash", "blockNumber", "address", "data", "topics"];

/**
 * true when the log was removed, due to a chain reorganization. false if its a valid log.
 * @member {Boolean} removed
 */
LogObject.prototype['removed'] = undefined;

/**
 * Integer of the log index position in the block. null when it is a pending log.
 * @member {String} logIndex
 */
LogObject.prototype['logIndex'] = undefined;

/**
 * Integer of the transactions index position log was created from. null when pending.
 * @member {String} transactionIndex
 */
LogObject.prototype['transactionIndex'] = undefined;

/**
 * Hash of the transactions this log was created from. null when pending.
 * @member {String} transactionHash
 */
LogObject.prototype['transactionHash'] = undefined;

/**
 * Hash of the block where this log was in. null when pending.
 * @member {String} blockHash
 */
LogObject.prototype['blockHash'] = undefined;

/**
 * The block number where this log was in. null when pending.
 * @member {String} blockNumber
 */
LogObject.prototype['blockNumber'] = undefined;

/**
 * Address from which this log originated.
 * @member {String} address
 */
LogObject.prototype['address'] = undefined;

/**
 * Contains the non-indexed arguments of the log.
 * @member {String} data
 */
LogObject.prototype['data'] = undefined;

/**
 * Array of 0 to 4 32-byte DATA of indexed log arguments. (In Solidity The first topic is the hash of the signature of the event (e.g., Deposit(address,bytes32,uint256)), except you declared the event with the anonymous specifier.).
 * @member {Array.<String>} topics
 */
LogObject.prototype['topics'] = undefined;
var _default = exports["default"] = LogObject;