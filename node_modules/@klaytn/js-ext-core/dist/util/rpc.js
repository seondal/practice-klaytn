"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRpcTxObject = void 0;
const bignumber_1 = require("@ethersproject/bignumber");
const bytes_1 = require("@ethersproject/bytes");
const transactions_1 = require("@ethersproject/transactions");
const lodash_1 = __importDefault(require("lodash"));
const numericFields = ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"];
const bytestrFields = ["from", "to", "data", "input"];
// Normalize Tx object to suitable for JSON-RPCs such as eth_call and eth_estimateGas.
function getRpcTxObject(tx) {
    const formatted = {};
    lodash_1.default.each(numericFields, (key) => {
        if (!lodash_1.default.has(tx, key)) {
            return;
        }
        const value = (0, bytes_1.hexValue)(bignumber_1.BigNumber.from(tx[key]));
        if (key == "gasLimit") {
            formatted["gas"] = value;
        }
        else {
            formatted[key] = value;
        }
    });
    lodash_1.default.each(bytestrFields, (key) => {
        if (!lodash_1.default.has(tx, key)) {
            return;
        }
        const value = (0, bytes_1.hexlify)(tx[key]);
        formatted[key] = value;
    });
    if (tx.accessList) {
        formatted["accessList"] = (0, transactions_1.accessListify)(tx.accessList);
    }
    return formatted;
}
exports.getRpcTxObject = getRpcTxObject;
//# sourceMappingURL=rpc.js.map