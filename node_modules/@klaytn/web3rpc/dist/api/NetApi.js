"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Listening200Response = _interopRequireDefault(require("../model/Listening200Response"));
var _ListeningRequest = _interopRequireDefault(require("../model/ListeningRequest"));
var _NetworkID200Response = _interopRequireDefault(require("../model/NetworkID200Response"));
var _NetworkIDRequest = _interopRequireDefault(require("../model/NetworkIDRequest"));
var _PeerCount200Response = _interopRequireDefault(require("../model/PeerCount200Response"));
var _PeerCountByType200Response = _interopRequireDefault(require("../model/PeerCountByType200Response"));
var _PeerCountByTypeRequest = _interopRequireDefault(require("../model/PeerCountByTypeRequest"));
var _PeerCountRequest = _interopRequireDefault(require("../model/PeerCountRequest"));
var _Version200Response = _interopRequireDefault(require("../model/Version200Response"));
var _VersionRequest = _interopRequireDefault(require("../model/VersionRequest"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
 * web3rpc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Net service.
* @module api/NetApi
* @version 0.9.8
*/
var NetApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new NetApi. 
  * @alias module:api/NetApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function NetApi(apiClient) {
    _classCallCheck(this, NetApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the listening operation.
   * @callback module:api/NetApi~listeningCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Listening200Response} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * [listening]
   * Returns true if the client is actively listening for network connections.  **JSONRPC:** `net_listening` 
   * @param {Object} opts Optional parameters
   * @param {module:model/ListeningRequest} opts.listeningRequest 
   * @param {module:api/NetApi~listeningCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Listening200Response}
   */
  _createClass(NetApi, [{
    key: "listening",
    value: function listening(opts, callback) {
      opts = opts || {};
      var postBody = new _ListeningRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Listening200Response["default"];
      return this.apiClient.callApi('/net/listening', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the networkID operation.
     * @callback module:api/NetApi~networkIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [networkID]
     * Returns the network identifier (network ID).  **JSONRPC:** `net_networkID` 
     * @param {Object} opts Optional parameters
     * @param {module:model/NetworkIDRequest} opts.networkIDRequest 
     * @param {module:api/NetApi~networkIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkID200Response}
     */
  }, {
    key: "networkID",
    value: function networkID(opts, callback) {
      opts = opts || {};
      var postBody = new _NetworkIDRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _NetworkID200Response["default"];
      return this.apiClient.callApi('/net/networkID', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the peerCount operation.
     * @callback module:api/NetApi~peerCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeerCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [peerCount]
     * Returns the number of peers currently connected to the client.  **JSONRPC:** `net_peerCount` 
     * @param {Object} opts Optional parameters
     * @param {module:model/PeerCountRequest} opts.peerCountRequest 
     * @param {module:api/NetApi~peerCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeerCount200Response}
     */
  }, {
    key: "peerCount",
    value: function peerCount(opts, callback) {
      opts = opts || {};
      var postBody = new _PeerCountRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _PeerCount200Response["default"];
      return this.apiClient.callApi('/net/peerCount', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the peerCountByType operation.
     * @callback module:api/NetApi~peerCountByTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeerCountByType200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [peerCountByType]
     * Returns the number of connected nodes by type and the total number of connected nodes with key/value pairs.  **JSONRPC:** `net_peerCountByType` 
     * @param {Object} opts Optional parameters
     * @param {module:model/PeerCountByTypeRequest} opts.peerCountByTypeRequest 
     * @param {module:api/NetApi~peerCountByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeerCountByType200Response}
     */
  }, {
    key: "peerCountByType",
    value: function peerCountByType(opts, callback) {
      opts = opts || {};
      var postBody = new _PeerCountByTypeRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _PeerCountByType200Response["default"];
      return this.apiClient.callApi('/net/peerCountByType', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the version operation.
     * @callback module:api/NetApi~versionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Version200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [version]
     * Return the current klaytn protocol version.  **JSONRPC:** `net_version` 
     * @param {Object} opts Optional parameters
     * @param {module:model/VersionRequest} opts.versionRequest 
     * @param {module:api/NetApi~versionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Version200Response}
     */
  }, {
    key: "version",
    value: function version(opts, callback) {
      opts = opts || {};
      var postBody = new _VersionRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Version200Response["default"];
      return this.apiClient.callApi('/net/version', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
  return NetApi;
}();