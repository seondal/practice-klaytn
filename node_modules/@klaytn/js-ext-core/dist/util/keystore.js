"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isKIP3Json = exports.splitKeystoreKIP3 = void 0;
// js-ext-core does not provide keystore decryption function
// to make the library slim. Decrypting the splitted keystore JSON
// shall be done outside this library.
const lodash_1 = __importDefault(require("lodash"));
// Split a KIP-3 JSON into multiple V3 JSONs, each V3 is derived from one keyring element.
//
// The address may not coincide with the decrypted private key. There are two ways
// to deal with the issue.
//
// If deleteAddress is true, every resulting V3 JSON does not contain 'address' field.
// It is recommended to deleteAddress when feeding into ethers.js decryptKeystore function.
// When the address field exists, decryptKeystore tries to match the address and private key,
// resulting in "address mismatch" error. Without the address field, decryptKeystore skips the check.
//
// If deleteAddress is false, every resulting V3 JSON has the same 'address' field
// with the original KIP-3 JSON. It is recommended to not deleteAddress when feeding into
// web3.js decrypt function. The web3.js decrypt function requires, but not inspects the
// address field.
function splitKeystoreKIP3(json, deleteAddress = true) {
    const data = JSON.parse(json);
    const keyring = data.keyring;
    if (!lodash_1.default.isArray(keyring)) {
        throw new Error("Invalid KIP-3 JSON wallet");
    }
    let cryptos = [];
    if (!lodash_1.default.isArray(keyring[0])) {
        cryptos = lodash_1.default.flattenDepth(keyring, 1);
    }
    else {
        cryptos = lodash_1.default.flattenDepth(keyring, 2);
    }
    return lodash_1.default.map(cryptos, (crypto) => {
        const v3 = {
            version: 3,
            crypto: crypto,
            address: data.address,
            id: data.id,
        };
        if (deleteAddress) {
            delete v3.address;
        }
        return JSON.stringify(v3);
    });
}
exports.splitKeystoreKIP3 = splitKeystoreKIP3;
// Analogous to isKeystoreWallet in @ethersproject/json-wallets,
// isKIP3Wallet determines if it's a KIP-3 wallet.
function isKIP3Json(json) {
    let data = null;
    try {
        data = JSON.parse(json);
    }
    catch (_a) {
        return false;
    }
    return lodash_1.default.isNumber(data.version) && (data.version == 4) && lodash_1.default.isArray(data.keyring);
}
exports.isKIP3Json = isKIP3Json;
//# sourceMappingURL=keystore.js.map