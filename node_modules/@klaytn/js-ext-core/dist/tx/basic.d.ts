import { TxType } from "../util";
import { KlaytnTx } from "./factory";
export declare class TxTypeValueTransfer extends KlaytnTx {
    static type: TxType;
    static typeName: string;
    static fieldTypes: {
        type: import("../field").FieldTypeNumberBits;
        nonce: import("../field").FieldTypeNumberBits;
        gasPrice: import("../field").FieldTypeNumberBits;
        gasLimit: import("../field").FieldTypeNumberBits;
        to: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        value: import("../field").FieldTypeNumberBits;
        from: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        chainId: import("../field").FieldTypeNumberBits;
        txSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
    };
    sigRLP(): string;
    txHashRLP(): string;
    setFieldsFromRLP(rlp: string): void;
}
export declare class TxTypeValueTransferMemo extends KlaytnTx {
    static type: TxType;
    static typeName: string;
    static fieldTypes: {
        type: import("../field").FieldTypeNumberBits;
        nonce: import("../field").FieldTypeNumberBits;
        gasPrice: import("../field").FieldTypeNumberBits;
        gasLimit: import("../field").FieldTypeNumberBits;
        to: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        value: import("../field").FieldTypeNumberBits;
        from: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        data: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        chainId: import("../field").FieldTypeNumberBits;
        txSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
    };
    sigRLP(): string;
    txHashRLP(): string;
    setFieldsFromRLP(rlp: string): void;
}
export declare class TxTypeSmartContractDeploy extends KlaytnTx {
    static type: TxType;
    static typeName: string;
    static fieldTypes: {
        type: import("../field").FieldTypeNumberBits;
        nonce: import("../field").FieldTypeNumberBits;
        gasPrice: import("../field").FieldTypeNumberBits;
        gasLimit: import("../field").FieldTypeNumberBits;
        to: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        value: import("../field").FieldTypeNumberBits;
        from: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        data: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        humanReadable: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        codeFormat: import("../field").FieldTypeNumberBits;
        chainId: import("../field").FieldTypeNumberBits;
        txSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
    };
    sigRLP(): string;
    txHashRLP(): string;
    setFieldsFromRLP(rlp: string): void;
}
export declare class TxTypeSmartContractExecution extends KlaytnTx {
    static type: TxType;
    static typeName: string;
    static fieldTypes: {
        type: import("../field").FieldTypeNumberBits;
        nonce: import("../field").FieldTypeNumberBits;
        gasPrice: import("../field").FieldTypeNumberBits;
        gasLimit: import("../field").FieldTypeNumberBits;
        to: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        value: import("../field").FieldTypeNumberBits;
        from: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        data: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        chainId: import("../field").FieldTypeNumberBits;
        txSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
    };
    sigRLP(): string;
    txHashRLP(): string;
    setFieldsFromRLP(rlp: string): void;
}
export declare class TxTypeAccountUpdate extends KlaytnTx {
    static type: TxType;
    static typeName: string;
    static fieldTypes: {
        type: import("../field").FieldTypeNumberBits;
        nonce: import("../field").FieldTypeNumberBits;
        gasPrice: import("../field").FieldTypeNumberBits;
        gasLimit: import("../field").FieldTypeNumberBits;
        from: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        key: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        chainId: import("../field").FieldTypeNumberBits;
        txSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
    };
    sigRLP(): string;
    txHashRLP(): string;
    setFieldsFromRLP(rlp: string): void;
}
export declare class TxTypeCancel extends KlaytnTx {
    static type: TxType;
    static typeName: string;
    static fieldTypes: {
        type: import("../field").FieldTypeNumberBits;
        nonce: import("../field").FieldTypeNumberBits;
        gasPrice: import("../field").FieldTypeNumberBits;
        gasLimit: import("../field").FieldTypeNumberBits;
        from: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        chainId: import("../field").FieldTypeNumberBits;
        txSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
    };
    sigRLP(): string;
    txHashRLP(): string;
    setFieldsFromRLP(rlp: string): void;
}
//# sourceMappingURL=basic.d.ts.map