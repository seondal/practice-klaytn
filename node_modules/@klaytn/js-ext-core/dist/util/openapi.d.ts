export type rpcSendFunction = (method: string, params: any[]) => Promise<any>;
export declare class JsonRpcClient {
    send: rpcSendFunction;
    constructor(send: rpcSendFunction);
    callApi(_path: any, _httpMethod: any, _pathParams: any, _queryParams: any, _headerParams: any, _formParams: any, bodyParam: {
        method: string;
        params: any[];
    }, _authNames: any, _contentTypes: any, _accepts: any, _returnType: any, _apiBasePath: any, callback: (err: any, data: any) => void): any;
}
export type openApiMethod = (...args: any[]) => any;
export declare class NamespaceApi {
    constructor(client: any);
    [methodName: string | symbol]: openApiMethod;
}
export type asyncApiMethod = (...args: any[]) => Promise<any>;
export declare class AsyncNamespaceApi {
    [methodName: string | symbol]: asyncApiMethod | any;
}
export declare function promisifyMethod(openApi: NamespaceApi, methodName: string | symbol, numRequiredArgs: number): asyncApiMethod;
export declare function promisifyApi(openApi: NamespaceApi): AsyncNamespaceApi;
export declare function asyncOpenApi(send: rpcSendFunction, Clazz: typeof NamespaceApi): AsyncNamespaceApi;
//# sourceMappingURL=openapi.d.ts.map