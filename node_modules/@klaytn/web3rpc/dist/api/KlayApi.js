"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _AccountCreated200Response = _interopRequireDefault(require("../model/AccountCreated200Response"));
var _AccountCreatedRequest = _interopRequireDefault(require("../model/AccountCreatedRequest"));
var _Accounts200Response = _interopRequireDefault(require("../model/Accounts200Response"));
var _AccountsRequest = _interopRequireDefault(require("../model/AccountsRequest"));
var _BlockNumber200Response = _interopRequireDefault(require("../model/BlockNumber200Response"));
var _BlockNumberRequest = _interopRequireDefault(require("../model/BlockNumberRequest"));
var _Call200Response = _interopRequireDefault(require("../model/Call200Response"));
var _CallRequest = _interopRequireDefault(require("../model/CallRequest"));
var _ChainID200Response = _interopRequireDefault(require("../model/ChainID200Response"));
var _ChainIDRequest = _interopRequireDefault(require("../model/ChainIDRequest"));
var _ClientVersion200Response = _interopRequireDefault(require("../model/ClientVersion200Response"));
var _ClientVersionRequest = _interopRequireDefault(require("../model/ClientVersionRequest"));
var _CreateAccessList200Response = _interopRequireDefault(require("../model/CreateAccessList200Response"));
var _CreateAccessListRequest = _interopRequireDefault(require("../model/CreateAccessListRequest"));
var _DecodeAccountKey200Response = _interopRequireDefault(require("../model/DecodeAccountKey200Response"));
var _DecodeAccountKeyRequest = _interopRequireDefault(require("../model/DecodeAccountKeyRequest"));
var _EncodeAccountKey200Response = _interopRequireDefault(require("../model/EncodeAccountKey200Response"));
var _EncodeAccountKeyObjectParameter = _interopRequireDefault(require("../model/EncodeAccountKeyObjectParameter"));
var _EncodeAccountKeyRequest = _interopRequireDefault(require("../model/EncodeAccountKeyRequest"));
var _EstimateComputationCost200Response = _interopRequireDefault(require("../model/EstimateComputationCost200Response"));
var _EstimateComputationCostRequest = _interopRequireDefault(require("../model/EstimateComputationCostRequest"));
var _EstimateGas200Response = _interopRequireDefault(require("../model/EstimateGas200Response"));
var _EstimateGasRequest = _interopRequireDefault(require("../model/EstimateGasRequest"));
var _FeeHistory200Response = _interopRequireDefault(require("../model/FeeHistory200Response"));
var _FeeHistoryRequest = _interopRequireDefault(require("../model/FeeHistoryRequest"));
var _FilterOptions = _interopRequireDefault(require("../model/FilterOptions"));
var _ForkStatus200Response = _interopRequireDefault(require("../model/ForkStatus200Response"));
var _ForkStatusRequest = _interopRequireDefault(require("../model/ForkStatusRequest"));
var _GasPrice200Response = _interopRequireDefault(require("../model/GasPrice200Response"));
var _GasPriceRequest = _interopRequireDefault(require("../model/GasPriceRequest"));
var _GetAccount200Response = _interopRequireDefault(require("../model/GetAccount200Response"));
var _GetAccountKey200Response = _interopRequireDefault(require("../model/GetAccountKey200Response"));
var _GetAccountKeyRequest = _interopRequireDefault(require("../model/GetAccountKeyRequest"));
var _GetAccountRequest = _interopRequireDefault(require("../model/GetAccountRequest"));
var _GetBalance200Response = _interopRequireDefault(require("../model/GetBalance200Response"));
var _GetBalanceRequest = _interopRequireDefault(require("../model/GetBalanceRequest"));
var _GetBlockByHash200Response = _interopRequireDefault(require("../model/GetBlockByHash200Response"));
var _GetBlockByHashRequest = _interopRequireDefault(require("../model/GetBlockByHashRequest"));
var _GetBlockByNumber200Response = _interopRequireDefault(require("../model/GetBlockByNumber200Response"));
var _GetBlockByNumberRequest = _interopRequireDefault(require("../model/GetBlockByNumberRequest"));
var _GetBlockReceipts200Response = _interopRequireDefault(require("../model/GetBlockReceipts200Response"));
var _GetBlockReceiptsRequest = _interopRequireDefault(require("../model/GetBlockReceiptsRequest"));
var _GetBlockTransactionCountByHash200Response = _interopRequireDefault(require("../model/GetBlockTransactionCountByHash200Response"));
var _GetBlockTransactionCountByHashRequest = _interopRequireDefault(require("../model/GetBlockTransactionCountByHashRequest"));
var _GetBlockTransactionCountByNumber200Response = _interopRequireDefault(require("../model/GetBlockTransactionCountByNumber200Response"));
var _GetBlockTransactionCountByNumberRequest = _interopRequireDefault(require("../model/GetBlockTransactionCountByNumberRequest"));
var _GetBlockWithConsensusInfoByHash200Response = _interopRequireDefault(require("../model/GetBlockWithConsensusInfoByHash200Response"));
var _GetBlockWithConsensusInfoByHashRequest = _interopRequireDefault(require("../model/GetBlockWithConsensusInfoByHashRequest"));
var _GetBlockWithConsensusInfoByNumber200Response = _interopRequireDefault(require("../model/GetBlockWithConsensusInfoByNumber200Response"));
var _GetBlockWithConsensusInfoByNumberRange200Response = _interopRequireDefault(require("../model/GetBlockWithConsensusInfoByNumberRange200Response"));
var _GetBlockWithConsensusInfoByNumberRangeRequest = _interopRequireDefault(require("../model/GetBlockWithConsensusInfoByNumberRangeRequest"));
var _GetBlockWithConsensusInfoByNumberRequest = _interopRequireDefault(require("../model/GetBlockWithConsensusInfoByNumberRequest"));
var _GetChainConfig200Response = _interopRequireDefault(require("../model/GetChainConfig200Response"));
var _GetChainConfigRequest = _interopRequireDefault(require("../model/GetChainConfigRequest"));
var _GetCode200Response = _interopRequireDefault(require("../model/GetCode200Response"));
var _GetCodeRequest = _interopRequireDefault(require("../model/GetCodeRequest"));
var _GetCommittee200Response = _interopRequireDefault(require("../model/GetCommittee200Response"));
var _GetCommitteeRequest = _interopRequireDefault(require("../model/GetCommitteeRequest"));
var _GetCommitteeSize200Response = _interopRequireDefault(require("../model/GetCommitteeSize200Response"));
var _GetCommitteeSizeRequest = _interopRequireDefault(require("../model/GetCommitteeSizeRequest"));
var _GetCouncil200Response = _interopRequireDefault(require("../model/GetCouncil200Response"));
var _GetCouncilRequest = _interopRequireDefault(require("../model/GetCouncilRequest"));
var _GetCouncilSize200Response = _interopRequireDefault(require("../model/GetCouncilSize200Response"));
var _GetCouncilSizeRequest = _interopRequireDefault(require("../model/GetCouncilSizeRequest"));
var _GetDecodedAnchoringTransactionByHash200Response = _interopRequireDefault(require("../model/GetDecodedAnchoringTransactionByHash200Response"));
var _GetDecodedAnchoringTransactionByHashRequest = _interopRequireDefault(require("../model/GetDecodedAnchoringTransactionByHashRequest"));
var _GetFilterChanges200Response = _interopRequireDefault(require("../model/GetFilterChanges200Response"));
var _GetFilterChangesRequest = _interopRequireDefault(require("../model/GetFilterChangesRequest"));
var _GetFilterLogs200Response = _interopRequireDefault(require("../model/GetFilterLogs200Response"));
var _GetFilterLogsRequest = _interopRequireDefault(require("../model/GetFilterLogsRequest"));
var _GetHeaderByHash200Response = _interopRequireDefault(require("../model/GetHeaderByHash200Response"));
var _GetHeaderByHashRequest = _interopRequireDefault(require("../model/GetHeaderByHashRequest"));
var _GetHeaderByNumber200Response = _interopRequireDefault(require("../model/GetHeaderByNumber200Response"));
var _GetHeaderByNumberRequest = _interopRequireDefault(require("../model/GetHeaderByNumberRequest"));
var _GetLogs200Response = _interopRequireDefault(require("../model/GetLogs200Response"));
var _GetLogsRequest = _interopRequireDefault(require("../model/GetLogsRequest"));
var _GetRawTransactionByBlockHashAndIndex200Response = _interopRequireDefault(require("../model/GetRawTransactionByBlockHashAndIndex200Response"));
var _GetRawTransactionByBlockHashAndIndexRequest = _interopRequireDefault(require("../model/GetRawTransactionByBlockHashAndIndexRequest"));
var _GetRawTransactionByBlockNumberAndIndex200Response = _interopRequireDefault(require("../model/GetRawTransactionByBlockNumberAndIndex200Response"));
var _GetRawTransactionByBlockNumberAndIndexRequest = _interopRequireDefault(require("../model/GetRawTransactionByBlockNumberAndIndexRequest"));
var _GetRawTransactionByHash200Response = _interopRequireDefault(require("../model/GetRawTransactionByHash200Response"));
var _GetRawTransactionByHashRequest = _interopRequireDefault(require("../model/GetRawTransactionByHashRequest"));
var _GetRewards200Response = _interopRequireDefault(require("../model/GetRewards200Response"));
var _GetRewardsRequest = _interopRequireDefault(require("../model/GetRewardsRequest"));
var _GetStakingInfo200Response = _interopRequireDefault(require("../model/GetStakingInfo200Response"));
var _GetStakingInfoRequest = _interopRequireDefault(require("../model/GetStakingInfoRequest"));
var _GetStorageAt200Response = _interopRequireDefault(require("../model/GetStorageAt200Response"));
var _GetStorageAtRequest = _interopRequireDefault(require("../model/GetStorageAtRequest"));
var _GetTransactionByBlockHashAndIndex200Response = _interopRequireDefault(require("../model/GetTransactionByBlockHashAndIndex200Response"));
var _GetTransactionByBlockHashAndIndexRequest = _interopRequireDefault(require("../model/GetTransactionByBlockHashAndIndexRequest"));
var _GetTransactionByBlockNumberAndIndex200Response = _interopRequireDefault(require("../model/GetTransactionByBlockNumberAndIndex200Response"));
var _GetTransactionByBlockNumberAndIndexRequest = _interopRequireDefault(require("../model/GetTransactionByBlockNumberAndIndexRequest"));
var _GetTransactionByHash200Response = _interopRequireDefault(require("../model/GetTransactionByHash200Response"));
var _GetTransactionByHashRequest = _interopRequireDefault(require("../model/GetTransactionByHashRequest"));
var _GetTransactionBySenderTxHash200Response = _interopRequireDefault(require("../model/GetTransactionBySenderTxHash200Response"));
var _GetTransactionBySenderTxHashRequest = _interopRequireDefault(require("../model/GetTransactionBySenderTxHashRequest"));
var _GetTransactionCount200Response = _interopRequireDefault(require("../model/GetTransactionCount200Response"));
var _GetTransactionCountRequest = _interopRequireDefault(require("../model/GetTransactionCountRequest"));
var _GetTransactionReceipt200Response = _interopRequireDefault(require("../model/GetTransactionReceipt200Response"));
var _GetTransactionReceiptBySenderTxHash200Response = _interopRequireDefault(require("../model/GetTransactionReceiptBySenderTxHash200Response"));
var _GetTransactionReceiptBySenderTxHashRequest = _interopRequireDefault(require("../model/GetTransactionReceiptBySenderTxHashRequest"));
var _GetTransactionReceiptRequest = _interopRequireDefault(require("../model/GetTransactionReceiptRequest"));
var _IsContractAccount200Response = _interopRequireDefault(require("../model/IsContractAccount200Response"));
var _IsContractAccountRequest = _interopRequireDefault(require("../model/IsContractAccountRequest"));
var _IsParallelDBWrite200Response = _interopRequireDefault(require("../model/IsParallelDBWrite200Response"));
var _IsParallelDBWriteRequest = _interopRequireDefault(require("../model/IsParallelDBWriteRequest"));
var _IsSenderTxHashIndexingEnabled200Response = _interopRequireDefault(require("../model/IsSenderTxHashIndexingEnabled200Response"));
var _IsSenderTxHashIndexingEnabledRequest = _interopRequireDefault(require("../model/IsSenderTxHashIndexingEnabledRequest"));
var _KlayCallObject = _interopRequireDefault(require("../model/KlayCallObject"));
var _KlaytnTransactionTypes = _interopRequireDefault(require("../model/KlaytnTransactionTypes"));
var _LowerBoundGasPrice200Response = _interopRequireDefault(require("../model/LowerBoundGasPrice200Response"));
var _LowerBoundGasPriceRequest = _interopRequireDefault(require("../model/LowerBoundGasPriceRequest"));
var _MaxPriorityFeePerGas200Response = _interopRequireDefault(require("../model/MaxPriorityFeePerGas200Response"));
var _MaxPriorityFeePerGasRequest = _interopRequireDefault(require("../model/MaxPriorityFeePerGasRequest"));
var _NewBlockFilter200Response = _interopRequireDefault(require("../model/NewBlockFilter200Response"));
var _NewBlockFilterRequest = _interopRequireDefault(require("../model/NewBlockFilterRequest"));
var _NewFilter200Response = _interopRequireDefault(require("../model/NewFilter200Response"));
var _NewFilterRequest = _interopRequireDefault(require("../model/NewFilterRequest"));
var _NewPendingTransactionFilter200Response = _interopRequireDefault(require("../model/NewPendingTransactionFilter200Response"));
var _NewPendingTransactionFilterRequest = _interopRequireDefault(require("../model/NewPendingTransactionFilterRequest"));
var _NodeAddress200Response = _interopRequireDefault(require("../model/NodeAddress200Response"));
var _NodeAddressRequest = _interopRequireDefault(require("../model/NodeAddressRequest"));
var _PendingTransactions200Response = _interopRequireDefault(require("../model/PendingTransactions200Response"));
var _PendingTransactionsRequest = _interopRequireDefault(require("../model/PendingTransactionsRequest"));
var _ProtocolVersion200Response = _interopRequireDefault(require("../model/ProtocolVersion200Response"));
var _ProtocolVersionRequest = _interopRequireDefault(require("../model/ProtocolVersionRequest"));
var _RecoverFromMessage200Response = _interopRequireDefault(require("../model/RecoverFromMessage200Response"));
var _RecoverFromMessageRequest = _interopRequireDefault(require("../model/RecoverFromMessageRequest"));
var _RecoverFromTransaction200Response = _interopRequireDefault(require("../model/RecoverFromTransaction200Response"));
var _RecoverFromTransactionRequest = _interopRequireDefault(require("../model/RecoverFromTransactionRequest"));
var _Resend200Response = _interopRequireDefault(require("../model/Resend200Response"));
var _ResendRequest = _interopRequireDefault(require("../model/ResendRequest"));
var _Rewardbase200Response = _interopRequireDefault(require("../model/Rewardbase200Response"));
var _RewardbaseRequest = _interopRequireDefault(require("../model/RewardbaseRequest"));
var _SchemasFilterOptions = _interopRequireDefault(require("../model/SchemasFilterOptions"));
var _SendArgs = _interopRequireDefault(require("../model/SendArgs"));
var _SendRawTransaction200Response = _interopRequireDefault(require("../model/SendRawTransaction200Response"));
var _SendRawTransactionRequest = _interopRequireDefault(require("../model/SendRawTransactionRequest"));
var _SendTransaction200Response = _interopRequireDefault(require("../model/SendTransaction200Response"));
var _SendTransactionAsFeePayer200Response = _interopRequireDefault(require("../model/SendTransactionAsFeePayer200Response"));
var _SendTransactionAsFeePayerRequest = _interopRequireDefault(require("../model/SendTransactionAsFeePayerRequest"));
var _SendTransactionRequest = _interopRequireDefault(require("../model/SendTransactionRequest"));
var _Sha3200Response = _interopRequireDefault(require("../model/Sha3200Response"));
var _Sha3Request = _interopRequireDefault(require("../model/Sha3Request"));
var _Sign200Response = _interopRequireDefault(require("../model/Sign200Response"));
var _SignRequest = _interopRequireDefault(require("../model/SignRequest"));
var _SignTransaction200Response = _interopRequireDefault(require("../model/SignTransaction200Response"));
var _SignTransactionAsFeePayer200Response = _interopRequireDefault(require("../model/SignTransactionAsFeePayer200Response"));
var _SignTransactionAsFeePayerRequest = _interopRequireDefault(require("../model/SignTransactionAsFeePayerRequest"));
var _SignTransactionRequest = _interopRequireDefault(require("../model/SignTransactionRequest"));
var _Subscribe200Response = _interopRequireDefault(require("../model/Subscribe200Response"));
var _SubscribeRequest = _interopRequireDefault(require("../model/SubscribeRequest"));
var _Syncing200Response = _interopRequireDefault(require("../model/Syncing200Response"));
var _SyncingRequest = _interopRequireDefault(require("../model/SyncingRequest"));
var _UninstallFilter200Response = _interopRequireDefault(require("../model/UninstallFilter200Response"));
var _UninstallFilterRequest = _interopRequireDefault(require("../model/UninstallFilterRequest"));
var _Unsubscribe200Response = _interopRequireDefault(require("../model/Unsubscribe200Response"));
var _UnsubscribeRequest = _interopRequireDefault(require("../model/UnsubscribeRequest"));
var _UpperBoundGasPrice200Response = _interopRequireDefault(require("../model/UpperBoundGasPrice200Response"));
var _UpperBoundGasPriceRequest = _interopRequireDefault(require("../model/UpperBoundGasPriceRequest"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
 * web3rpc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Klay service.
* @module api/KlayApi
* @version 0.9.8
*/
var KlayApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new KlayApi. 
  * @alias module:api/KlayApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function KlayApi(apiClient) {
    _classCallCheck(this, KlayApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the accountCreated operation.
   * @callback module:api/KlayApi~accountCreatedCallback
   * @param {String} error Error message, if any.
   * @param {module:model/AccountCreated200Response} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * [Account-accountCreated]
   * Returns `true` if the account associated with the address is created. It returns `false` otherwise.  **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.*  **JSONRPC:** `klay_accountCreated` 
   * @param {String} account Address
   * @param {module:model/BlockNumberOrHashOrTag} blockNumberOrHash Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in default block parameter.
   * @param {Object} opts Optional parameters
   * @param {module:model/AccountCreatedRequest} opts.accountCreatedRequest 
   * @param {module:api/KlayApi~accountCreatedCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/AccountCreated200Response}
   */
  _createClass(KlayApi, [{
    key: "accountCreated",
    value: function accountCreated(account, blockNumberOrHash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling accountCreated");
      }
      // verify the required parameter 'blockNumberOrHash' is set
      if (blockNumberOrHash === undefined || blockNumberOrHash === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHash' when calling accountCreated");
      }
      var postBody = new _AccountCreatedRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(account);
      postBody.params.push(blockNumberOrHash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _AccountCreated200Response["default"];
      return this.apiClient.callApi('/klay/account/accountCreated', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the accounts operation.
     * @callback module:api/KlayApi~accountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Account-accounts]
     * Returns a list of addresses owned by client.  **JSONRPC:** `klay_accounts` 
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountsRequest} opts.accountsRequest 
     * @param {module:api/KlayApi~accountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts200Response}
     */
  }, {
    key: "accounts",
    value: function accounts(opts, callback) {
      opts = opts || {};
      var postBody = new _AccountsRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Accounts200Response["default"];
      return this.apiClient.callApi('/klay/account/accounts', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the blockNumber operation.
     * @callback module:api/KlayApi~blockNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlockNumber200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-blockNumber]
     * Returns the number of most recent block.  **JSONRPC:** `klay_blockNumber` 
     * @param {Object} opts Optional parameters
     * @param {module:model/BlockNumberRequest} opts.blockNumberRequest 
     * @param {module:api/KlayApi~blockNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlockNumber200Response}
     */
  }, {
    key: "blockNumber",
    value: function blockNumber(opts, callback) {
      opts = opts || {};
      var postBody = new _BlockNumberRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _BlockNumber200Response["default"];
      return this.apiClient.callApi('/klay/block/blockNumber', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the call operation.
     * @callback module:api/KlayApi~callCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Call200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-call]
     * Executes a new message call immediately without creating a transaction on the block chain. It returns data or an error object of JSON RPC if error occurs.  If you deployed a contract, use klay_getTransactionReceipt to get the contract address.  **NOTE** In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.  **JSONRPC:** `klay_call` 
     * @param {Object.<String, module:model/KlayCallObject>} callObject The transaction call object. See the next table for the object's properties.
     * @param {module:model/BlockNumberOrHashOrTag} blockNumberOrHash Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in default block parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/CallRequest} opts.callRequest 
     * @param {module:api/KlayApi~callCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Call200Response}
     */
  }, {
    key: "call",
    value: function call(callObject, blockNumberOrHash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'callObject' is set
      if (callObject === undefined || callObject === null) {
        throw new Error("Missing the required parameter 'callObject' when calling call");
      }
      // verify the required parameter 'blockNumberOrHash' is set
      if (blockNumberOrHash === undefined || blockNumberOrHash === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHash' when calling call");
      }
      var postBody = new _CallRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(callObject);
      postBody.params.push(blockNumberOrHash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Call200Response["default"];
      return this.apiClient.callApi('/klay/transaction/call', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the chainID operation.
     * @callback module:api/KlayApi~chainIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChainID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Configuration-chainID]
     * Returns the chain ID of the chain.  **JSONRPC:** `klay_chainID` 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChainIDRequest} opts.chainIDRequest 
     * @param {module:api/KlayApi~chainIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChainID200Response}
     */
  }, {
    key: "chainID",
    value: function chainID(opts, callback) {
      opts = opts || {};
      var postBody = new _ChainIDRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ChainID200Response["default"];
      return this.apiClient.callApi('/klay/configuration/chainID', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the clientVersion operation.
     * @callback module:api/KlayApi~clientVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientVersion200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Configuration-clientVersion]
     * Returns the current client version of a Klaytn node.  **JSONRPC:** `klay_clientVersion` 
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientVersionRequest} opts.clientVersionRequest 
     * @param {module:api/KlayApi~clientVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientVersion200Response}
     */
  }, {
    key: "clientVersion",
    value: function clientVersion(opts, callback) {
      opts = opts || {};
      var postBody = new _ClientVersionRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ClientVersion200Response["default"];
      return this.apiClient.callApi('/klay/configuration/clientVersion', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the createAccessList operation.
     * @callback module:api/KlayApi~createAccessListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAccessList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-createAccessList]
     * This method creates an accessList based on a given Transaction. The accessList contains all storage slots and addresses read and written by the transaction, except for the sender account and the precompiles. This method uses the same transaction call object and blockNumberOrTag object as caver.rpc.klay.call. An accessList can be used to release stuck contracts that became inaccessible due to gas cost increases. Adding an accessList to your transaction does not necessary result in lower gas usage compared to a transaction without an access list.  **JSONRPC:** `klay_createAccessList` 
     * @param {Object.<String, module:model/KlayCallObject>} callObject A transaction call object. Please see caver.rpc.klay.call parameters.
     * @param {Object} opts Optional parameters
     * @param {module:model/BlockNumberOrHashOrTag} opts.blockParameter (optional) A block number, blockhash or the block tag string (latest or earliest). If omitted, latest will be used.
     * @param {module:model/CreateAccessListRequest} opts.createAccessListRequest 
     * @param {module:api/KlayApi~createAccessListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAccessList200Response}
     */
  }, {
    key: "createAccessList",
    value: function createAccessList(callObject, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'callObject' is set
      if (callObject === undefined || callObject === null) {
        throw new Error("Missing the required parameter 'callObject' when calling createAccessList");
      }
      var postBody = new _CreateAccessListRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(callObject);
      var defaultValue = null;
      defaultValue = "latest";
      var optParam = opts['blockParameter'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'blockParameter' when calling createAccessList");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateAccessList200Response["default"];
      return this.apiClient.callApi('/klay/createAccessList', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the decodeAccountKey operation.
     * @callback module:api/KlayApi~decodeAccountKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecodeAccountKey200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Account-decodeAccountKey]
     * Decodes an RLP encoded account key.  **JSONRPC:** `klay_decodeAccountKey` 
     * @param {String} encodedAccountKey RLP encoded account key
     * @param {Object} opts Optional parameters
     * @param {module:model/DecodeAccountKeyRequest} opts.decodeAccountKeyRequest 
     * @param {module:api/KlayApi~decodeAccountKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecodeAccountKey200Response}
     */
  }, {
    key: "decodeAccountKey",
    value: function decodeAccountKey(encodedAccountKey, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'encodedAccountKey' is set
      if (encodedAccountKey === undefined || encodedAccountKey === null) {
        throw new Error("Missing the required parameter 'encodedAccountKey' when calling decodeAccountKey");
      }
      var postBody = new _DecodeAccountKeyRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(encodedAccountKey);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DecodeAccountKey200Response["default"];
      return this.apiClient.callApi('/klay/account/decodeAccountKey', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the encodeAccountKey operation.
     * @callback module:api/KlayApi~encodeAccountKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EncodeAccountKey200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Account-encodeAccountKey]
     * Encodes an account key using the Recursive Length Prefix (RLP) encoding scheme.  **JSONRPC:** `klay_encodeAccountKey` 
     * @param {Object.<String, module:model/EncodeAccountKeyObjectParameter>} object object
     * @param {Object} opts Optional parameters
     * @param {module:model/EncodeAccountKeyRequest} opts.encodeAccountKeyRequest 
     * @param {module:api/KlayApi~encodeAccountKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncodeAccountKey200Response}
     */
  }, {
    key: "encodeAccountKey",
    value: function encodeAccountKey(object, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'object' is set
      if (object === undefined || object === null) {
        throw new Error("Missing the required parameter 'object' when calling encodeAccountKey");
      }
      var postBody = new _EncodeAccountKeyRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(object);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _EncodeAccountKey200Response["default"];
      return this.apiClient.callApi('/klay/account/encodeAccountKey', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the estimateComputationCost operation.
     * @callback module:api/KlayApi~estimateComputationCostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EstimateComputationCost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-estimateComputationCost]
     * Generates and returns an estimate of how much computation cost will be spent to execute the transaction. Klaytn limits the computation cost of a transaction to 100000000 currently not to take too much time by a single transaction. The transaction will not be added to the blockchain like klay_estimateGas  **JSONRPC:** `klay_estimateComputationCost` 
     * @param {Object.<String, module:model/KlayCallObject>} callObject The transaction call object. See the next table for the object's properties.
     * @param {module:model/BlockNumberOrHashOrTag} blockNumberOrHash Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in default block parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/EstimateComputationCostRequest} opts.estimateComputationCostRequest 
     * @param {module:api/KlayApi~estimateComputationCostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EstimateComputationCost200Response}
     */
  }, {
    key: "estimateComputationCost",
    value: function estimateComputationCost(callObject, blockNumberOrHash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'callObject' is set
      if (callObject === undefined || callObject === null) {
        throw new Error("Missing the required parameter 'callObject' when calling estimateComputationCost");
      }
      // verify the required parameter 'blockNumberOrHash' is set
      if (blockNumberOrHash === undefined || blockNumberOrHash === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHash' when calling estimateComputationCost");
      }
      var postBody = new _EstimateComputationCostRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(callObject);
      postBody.params.push(blockNumberOrHash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _EstimateComputationCost200Response["default"];
      return this.apiClient.callApi('/klay/transaction/estimateComputationCost', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the estimateGas operation.
     * @callback module:api/KlayApi~estimateGasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EstimateGas200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-estimateGas]
     * Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including Klaytn Virtual Machine mechanics and node performance.  **JSONRPC:** `klay_estimateGas` 
     * @param {Object.<String, module:model/KlayCallObject>} callObject The transaction call object. See the next table for the object's properties.
     * @param {Object} opts Optional parameters
     * @param {module:model/EstimateGasRequest} opts.estimateGasRequest 
     * @param {module:api/KlayApi~estimateGasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EstimateGas200Response}
     */
  }, {
    key: "estimateGas",
    value: function estimateGas(callObject, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'callObject' is set
      if (callObject === undefined || callObject === null) {
        throw new Error("Missing the required parameter 'callObject' when calling estimateGas");
      }
      var postBody = new _EstimateGasRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(callObject);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _EstimateGas200Response["default"];
      return this.apiClient.callApi('/klay/transaction/estimateGas', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the feeHistory operation.
     * @callback module:api/KlayApi~feeHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeeHistory200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Gas-feeHistory]
     * Returns base fee per gas and transaction effective priority fee per gas history for the requested block range if available.  **NOTE:** This API is effective after Klaytn v1.8.0  **JSONRPC:** `klay_feeHistory` 
     * @param {String} blockCount Number of blocks in the requested range in hexadecimal. Between 1 (0x1) and 1024 (0x400) blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.
     * @param {module:model/BlockNumberOrTag} lastBlock Highest numbered block of the requested range as block number or block tag.
     * @param {Array.<Number>} rewardPercentiles An array of floating point values between 0 and 100.
     * @param {Object} opts Optional parameters
     * @param {module:model/FeeHistoryRequest} opts.feeHistoryRequest 
     * @param {module:api/KlayApi~feeHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeeHistory200Response}
     */
  }, {
    key: "feeHistory",
    value: function feeHistory(blockCount, lastBlock, rewardPercentiles, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockCount' is set
      if (blockCount === undefined || blockCount === null) {
        throw new Error("Missing the required parameter 'blockCount' when calling feeHistory");
      }
      // verify the required parameter 'lastBlock' is set
      if (lastBlock === undefined || lastBlock === null) {
        throw new Error("Missing the required parameter 'lastBlock' when calling feeHistory");
      }
      // verify the required parameter 'rewardPercentiles' is set
      if (rewardPercentiles === undefined || rewardPercentiles === null) {
        throw new Error("Missing the required parameter 'rewardPercentiles' when calling feeHistory");
      }
      var postBody = new _FeeHistoryRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockCount);
      postBody.params.push(lastBlock);
      postBody.params.push(rewardPercentiles);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _FeeHistory200Response["default"];
      return this.apiClient.callApi('/klay/gas/feeHistory', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the forkStatus operation.
     * @callback module:api/KlayApi~forkStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForkStatus200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Configuration-forkStatus]
     * Using this API, users can easily query the fork status with negligible management costs.  **JSONRPC:** `klay_forkStatus` 
     * @param {Number} number Number
     * @param {Object} opts Optional parameters
     * @param {module:model/ForkStatusRequest} opts.forkStatusRequest 
     * @param {module:api/KlayApi~forkStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForkStatus200Response}
     */
  }, {
    key: "forkStatus",
    value: function forkStatus(number, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling forkStatus");
      }
      var postBody = new _ForkStatusRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(number);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ForkStatus200Response["default"];
      return this.apiClient.callApi('/klay/configuration/forkStatus', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the gasPrice operation.
     * @callback module:api/KlayApi~gasPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GasPrice200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Configuration-gasPrice]
     * Returns a suggestion for a gas price in peb.  **JSONRPC:** `klay_gasPrice` 
     * @param {Object} opts Optional parameters
     * @param {module:model/GasPriceRequest} opts.gasPriceRequest 
     * @param {module:api/KlayApi~gasPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GasPrice200Response}
     */
  }, {
    key: "gasPrice",
    value: function gasPrice(opts, callback) {
      opts = opts || {};
      var postBody = new _GasPriceRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GasPrice200Response["default"];
      return this.apiClient.callApi('/klay/configuration/gasPrice', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getAccount operation.
     * @callback module:api/KlayApi~getAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Account-getAccount]
     * Returns the account information of a given address. There are two different account types in Klaytn: Externally Owned Account (EOA) and Smart Contract Account. See Klaytn Accounts.  **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.*`  **JSONRPC:** `klay_getAccount` 
     * @param {String} address Address
     * @param {module:model/BlockNumberOrHashOrTag} blockNumberOrHashOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter, or block hash.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetAccountRequest} opts.getAccountRequest 
     * @param {module:api/KlayApi~getAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccount200Response}
     */
  }, {
    key: "getAccount",
    value: function getAccount(address, blockNumberOrHashOrTag, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAccount");
      }
      // verify the required parameter 'blockNumberOrHashOrTag' is set
      if (blockNumberOrHashOrTag === undefined || blockNumberOrHashOrTag === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHashOrTag' when calling getAccount");
      }
      var postBody = new _GetAccountRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(address);
      postBody.params.push(blockNumberOrHashOrTag);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetAccount200Response["default"];
      return this.apiClient.callApi('/klay/account/getAccount', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getAccountKey operation.
     * @callback module:api/KlayApi~getAccountKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountKey200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Account-getAccountKey]
     * Returns the account key of the Externally Owned Account (EOA) of a given address. If the account has AccountKeyLegacy or the account of the given address is a Smart Contract Account, it will return an empty key value.  **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available*  **JSONRPC:** `klay_getAccountKey` 
     * @param {String} address Address
     * @param {module:model/BlockNumberOrHashOrTag} blockNumberOrHashOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter, or block hash.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetAccountKeyRequest} opts.getAccountKeyRequest 
     * @param {module:api/KlayApi~getAccountKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountKey200Response}
     */
  }, {
    key: "getAccountKey",
    value: function getAccountKey(address, blockNumberOrHashOrTag, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAccountKey");
      }
      // verify the required parameter 'blockNumberOrHashOrTag' is set
      if (blockNumberOrHashOrTag === undefined || blockNumberOrHashOrTag === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHashOrTag' when calling getAccountKey");
      }
      var postBody = new _GetAccountKeyRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(address);
      postBody.params.push(blockNumberOrHashOrTag);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetAccountKey200Response["default"];
      return this.apiClient.callApi('/klay/account/getAccountKey', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getBalance operation.
     * @callback module:api/KlayApi~getBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBalance200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Account-getBalance]
     * Returns the balance of the account of given address.  **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.*`  **JSONRPC:** `klay_getBalance` 
     * @param {String} address Address
     * @param {module:model/BlockNumberOrHashOrTag} blockNumberOrHash Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter, or block hash.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetBalanceRequest} opts.getBalanceRequest 
     * @param {module:api/KlayApi~getBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBalance200Response}
     */
  }, {
    key: "getBalance",
    value: function getBalance(address, blockNumberOrHash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getBalance");
      }
      // verify the required parameter 'blockNumberOrHash' is set
      if (blockNumberOrHash === undefined || blockNumberOrHash === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHash' when calling getBalance");
      }
      var postBody = new _GetBalanceRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(address);
      postBody.params.push(blockNumberOrHash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetBalance200Response["default"];
      return this.apiClient.callApi('/klay/account/getBalance', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getBlockByHash operation.
     * @callback module:api/KlayApi~getBlockByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockByHash200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getBlockByHash]
     * Returns information about a block by hash. This API works only on RPC call, not on JavaScript console.  **JSONRPC:** `klay_getBlockByHash` 
     * @param {String} hashOfBlock Hash of a block
     * @param {Boolean} returnTransactionObject If true it returns the full transaction objects, if false only the hashes of the transactions.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetBlockByHashRequest} opts.getBlockByHashRequest 
     * @param {module:api/KlayApi~getBlockByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockByHash200Response}
     */
  }, {
    key: "getBlockByHash",
    value: function getBlockByHash(hashOfBlock, returnTransactionObject, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'hashOfBlock' is set
      if (hashOfBlock === undefined || hashOfBlock === null) {
        throw new Error("Missing the required parameter 'hashOfBlock' when calling getBlockByHash");
      }
      // verify the required parameter 'returnTransactionObject' is set
      if (returnTransactionObject === undefined || returnTransactionObject === null) {
        throw new Error("Missing the required parameter 'returnTransactionObject' when calling getBlockByHash");
      }
      var postBody = new _GetBlockByHashRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(hashOfBlock);
      postBody.params.push(returnTransactionObject);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetBlockByHash200Response["default"];
      return this.apiClient.callApi('/klay/block/getBlockByHash', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getBlockByNumber operation.
     * @callback module:api/KlayApi~getBlockByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockByNumber200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getBlockByNumber]
     * Returns information about a block by block number. This API works only on RPC call, not on JavaScript console.  **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.*  **JSONRPC:** `klay_getBlockByNumber` 
     * @param {module:model/BlockNumberOrTag} blockNumberOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter.
     * @param {Boolean} _boolean If true it returns the full transaction objects, if false only the hashes of the transactions.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetBlockByNumberRequest} opts.getBlockByNumberRequest 
     * @param {module:api/KlayApi~getBlockByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockByNumber200Response}
     */
  }, {
    key: "getBlockByNumber",
    value: function getBlockByNumber(blockNumberOrTag, _boolean, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockNumberOrTag' is set
      if (blockNumberOrTag === undefined || blockNumberOrTag === null) {
        throw new Error("Missing the required parameter 'blockNumberOrTag' when calling getBlockByNumber");
      }
      // verify the required parameter '_boolean' is set
      if (_boolean === undefined || _boolean === null) {
        throw new Error("Missing the required parameter '_boolean' when calling getBlockByNumber");
      }
      var postBody = new _GetBlockByNumberRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockNumberOrTag);
      postBody.params.push(_boolean);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetBlockByNumber200Response["default"];
      return this.apiClient.callApi('/klay/block/getBlockByNumber', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getBlockReceipts operation.
     * @callback module:api/KlayApi~getBlockReceiptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockReceipts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getBlockReceipts]
     * Returns receipts included in a block identified by block hash.  **JSONRPC:** `klay_getBlockReceipts` 
     * @param {String} hashOfBlock Hash of a block
     * @param {Object} opts Optional parameters
     * @param {module:model/GetBlockReceiptsRequest} opts.getBlockReceiptsRequest 
     * @param {module:api/KlayApi~getBlockReceiptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockReceipts200Response}
     */
  }, {
    key: "getBlockReceipts",
    value: function getBlockReceipts(hashOfBlock, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'hashOfBlock' is set
      if (hashOfBlock === undefined || hashOfBlock === null) {
        throw new Error("Missing the required parameter 'hashOfBlock' when calling getBlockReceipts");
      }
      var postBody = new _GetBlockReceiptsRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(hashOfBlock);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetBlockReceipts200Response["default"];
      return this.apiClient.callApi('/klay/block/getBlockReceipts', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getBlockTransactionCountByHash operation.
     * @callback module:api/KlayApi~getBlockTransactionCountByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockTransactionCountByHash200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getBlockTransactionCountByHash]
     * Returns the number of transactions in a block from a block that matches the given hash.  **JSONRPC:** `klay_getBlockTransactionCountByHash` 
     * @param {String} hashOfBlock Hash of a block
     * @param {Object} opts Optional parameters
     * @param {module:model/GetBlockTransactionCountByHashRequest} opts.getBlockTransactionCountByHashRequest 
     * @param {module:api/KlayApi~getBlockTransactionCountByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockTransactionCountByHash200Response}
     */
  }, {
    key: "getBlockTransactionCountByHash",
    value: function getBlockTransactionCountByHash(hashOfBlock, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'hashOfBlock' is set
      if (hashOfBlock === undefined || hashOfBlock === null) {
        throw new Error("Missing the required parameter 'hashOfBlock' when calling getBlockTransactionCountByHash");
      }
      var postBody = new _GetBlockTransactionCountByHashRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(hashOfBlock);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetBlockTransactionCountByHash200Response["default"];
      return this.apiClient.callApi('/klay/block/getBlockTransactionCountByHash', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getBlockTransactionCountByNumber operation.
     * @callback module:api/KlayApi~getBlockTransactionCountByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockTransactionCountByNumber200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getBlockTransactionCountByNumber]
     * Returns the number of transactions in a block matching the given block number.  **NOTE:**  In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.  **JSONRPC:** `klay_getBlockTransactionCountByNumber` 
     * @param {module:model/BlockNumberOrTag} blockNumberOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetBlockTransactionCountByNumberRequest} opts.getBlockTransactionCountByNumberRequest 
     * @param {module:api/KlayApi~getBlockTransactionCountByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockTransactionCountByNumber200Response}
     */
  }, {
    key: "getBlockTransactionCountByNumber",
    value: function getBlockTransactionCountByNumber(blockNumberOrTag, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockNumberOrTag' is set
      if (blockNumberOrTag === undefined || blockNumberOrTag === null) {
        throw new Error("Missing the required parameter 'blockNumberOrTag' when calling getBlockTransactionCountByNumber");
      }
      var postBody = new _GetBlockTransactionCountByNumberRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockNumberOrTag);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetBlockTransactionCountByNumber200Response["default"];
      return this.apiClient.callApi('/klay/block/getBlockTransactionCountByNumber', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getBlockWithConsensusInfoByHash operation.
     * @callback module:api/KlayApi~getBlockWithConsensusInfoByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockWithConsensusInfoByHash200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getBlockWithConsensusInfoByHash]
     * Returns a block with consensus information that matches the given hash.  **JSONRPC:** `klay_getBlockWithConsensusInfoByHash` 
     * @param {String} blockHash Hash of a block.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetBlockWithConsensusInfoByHashRequest} opts.getBlockWithConsensusInfoByHashRequest 
     * @param {module:api/KlayApi~getBlockWithConsensusInfoByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockWithConsensusInfoByHash200Response}
     */
  }, {
    key: "getBlockWithConsensusInfoByHash",
    value: function getBlockWithConsensusInfoByHash(blockHash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockHash' is set
      if (blockHash === undefined || blockHash === null) {
        throw new Error("Missing the required parameter 'blockHash' when calling getBlockWithConsensusInfoByHash");
      }
      var postBody = new _GetBlockWithConsensusInfoByHashRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockHash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetBlockWithConsensusInfoByHash200Response["default"];
      return this.apiClient.callApi('/klay/block/getBlockWithConsensusInfoByHash', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getBlockWithConsensusInfoByNumber operation.
     * @callback module:api/KlayApi~getBlockWithConsensusInfoByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockWithConsensusInfoByNumber200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getBlockWithConsensusInfoByNumber]
     * Returns a block with consensus information that matches the given block number.  **NOTE:**  In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.   **JSONRPC:** `klay_getBlockWithConsensusInfoByNumber` 
     * @param {module:model/BlockNumberOrTag} blockNumberOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetBlockWithConsensusInfoByNumberRequest} opts.getBlockWithConsensusInfoByNumberRequest 
     * @param {module:api/KlayApi~getBlockWithConsensusInfoByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockWithConsensusInfoByNumber200Response}
     */
  }, {
    key: "getBlockWithConsensusInfoByNumber",
    value: function getBlockWithConsensusInfoByNumber(blockNumberOrTag, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockNumberOrTag' is set
      if (blockNumberOrTag === undefined || blockNumberOrTag === null) {
        throw new Error("Missing the required parameter 'blockNumberOrTag' when calling getBlockWithConsensusInfoByNumber");
      }
      var postBody = new _GetBlockWithConsensusInfoByNumberRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockNumberOrTag);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetBlockWithConsensusInfoByNumber200Response["default"];
      return this.apiClient.callApi('/klay/block/getBlockWithConsensusInfoByNumber', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getBlockWithConsensusInfoByNumberRange operation.
     * @callback module:api/KlayApi~getBlockWithConsensusInfoByNumberRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockWithConsensusInfoByNumberRange200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getBlockWithConsensusInfoByNumberRange]
     * Returns a block with consensus information matched by the given block hash or block number.  **JSONRPC:** `klay_getBlockWithConsensusInfoByNumberRange` 
     * @param {module:model/BlockNumberOrHashOrTag} blockHashOrBlockNumber The block hash or block number. Or the string \"genesis\" or \"latest\".
     * @param {Number} range The range
     * @param {Object} opts Optional parameters
     * @param {module:model/GetBlockWithConsensusInfoByNumberRangeRequest} opts.getBlockWithConsensusInfoByNumberRangeRequest 
     * @param {module:api/KlayApi~getBlockWithConsensusInfoByNumberRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockWithConsensusInfoByNumberRange200Response}
     */
  }, {
    key: "getBlockWithConsensusInfoByNumberRange",
    value: function getBlockWithConsensusInfoByNumberRange(blockHashOrBlockNumber, range, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockHashOrBlockNumber' is set
      if (blockHashOrBlockNumber === undefined || blockHashOrBlockNumber === null) {
        throw new Error("Missing the required parameter 'blockHashOrBlockNumber' when calling getBlockWithConsensusInfoByNumberRange");
      }
      // verify the required parameter 'range' is set
      if (range === undefined || range === null) {
        throw new Error("Missing the required parameter 'range' when calling getBlockWithConsensusInfoByNumberRange");
      }
      var postBody = new _GetBlockWithConsensusInfoByNumberRangeRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockHashOrBlockNumber);
      postBody.params.push(range);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetBlockWithConsensusInfoByNumberRange200Response["default"];
      return this.apiClient.callApi('/klay/block/getBlockWithConsensusInfoByNumberRange', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getChainConfig operation.
     * @callback module:api/KlayApi~getChainConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChainConfig200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Configuration-getChainConfig]
     * Returns the configuration of the chain.  **JSONRPC:** `klay_getChainConfig` 
     * @param {Object} opts Optional parameters
     * @param {module:model/BlockNumberOrTag} opts.blockNumberOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in default block parameter.
     * @param {module:model/GetChainConfigRequest} opts.getChainConfigRequest 
     * @param {module:api/KlayApi~getChainConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChainConfig200Response}
     */
  }, {
    key: "getChainConfig",
    value: function getChainConfig(opts, callback) {
      opts = opts || {};
      var postBody = new _GetChainConfigRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var defaultValue = null;
      defaultValue = "latest";
      var optParam = opts['blockNumberOrTag'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'blockNumberOrTag' when calling getChainConfig");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetChainConfig200Response["default"];
      return this.apiClient.callApi('/klay/configuration/getChainConfig', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getCode operation.
     * @callback module:api/KlayApi~getCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCode200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Account-getCode]
     * Returns code at a given address.  **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.*  **JSONRPC:** `klay_getCode` 
     * @param {String} account Address
     * @param {module:model/BlockNumberOrHashOrTag} blockNumberOrHashOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter, or block hash.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetCodeRequest} opts.getCodeRequest 
     * @param {module:api/KlayApi~getCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCode200Response}
     */
  }, {
    key: "getCode",
    value: function getCode(account, blockNumberOrHashOrTag, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling getCode");
      }
      // verify the required parameter 'blockNumberOrHashOrTag' is set
      if (blockNumberOrHashOrTag === undefined || blockNumberOrHashOrTag === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHashOrTag' when calling getCode");
      }
      var postBody = new _GetCodeRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(account);
      postBody.params.push(blockNumberOrHashOrTag);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetCode200Response["default"];
      return this.apiClient.callApi('/klay/account/getCode', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getCommittee operation.
     * @callback module:api/KlayApi~getCommitteeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCommittee200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getCommittee]
     * Returns a list of all validators in the committee at the specified block. If the parameter is not set, returns a list of all validators in the committee at the latest block.  **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.*  **JSONRPC:** `klay_getCommittee` 
     * @param {Object} opts Optional parameters
     * @param {module:model/BlockNumberOrTag} opts.blockNumberOrTag (optional) Integer or hexadecimal block number, or the string \"earliest\" or \"latest\" as in the default block parameter.
     * @param {module:model/GetCommitteeRequest} opts.getCommitteeRequest 
     * @param {module:api/KlayApi~getCommitteeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCommittee200Response}
     */
  }, {
    key: "getCommittee",
    value: function getCommittee(opts, callback) {
      opts = opts || {};
      var postBody = new _GetCommitteeRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var defaultValue = null;
      defaultValue = "latest";
      var optParam = opts['blockNumberOrTag'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'blockNumberOrTag' when calling getCommittee");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetCommittee200Response["default"];
      return this.apiClient.callApi('/klay/block/getCommittee', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getCommitteeSize operation.
     * @callback module:api/KlayApi~getCommitteeSizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCommitteeSize200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getCommitteeSize]
     * Returns the size of the committee at the specified block. If the parameter is not set, returns the size of the committee at the latest block.  **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.*  **JSONRPC:** `klay_getCommitteeSize` 
     * @param {Object} opts Optional parameters
     * @param {module:model/BlockNumberOrTag} opts.blockNumberOrTag (optional) Integer or hexadecimal block number, or the string \"earliest\" or \"latest\" as in the default block parameter.
     * @param {module:model/GetCommitteeSizeRequest} opts.getCommitteeSizeRequest 
     * @param {module:api/KlayApi~getCommitteeSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCommitteeSize200Response}
     */
  }, {
    key: "getCommitteeSize",
    value: function getCommitteeSize(opts, callback) {
      opts = opts || {};
      var postBody = new _GetCommitteeSizeRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var defaultValue = null;
      defaultValue = "latest";
      var optParam = opts['blockNumberOrTag'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'blockNumberOrTag' when calling getCommitteeSize");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetCommitteeSize200Response["default"];
      return this.apiClient.callApi('/klay/block/getCommitteeSize', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getCouncil operation.
     * @callback module:api/KlayApi~getCouncilCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCouncil200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getCouncil]
     * Returns a list of all validators of the council at the specified block. If the parameter is not set, returns a list of all validators of the council at the latest block.  **NOTE:**   *klay_getValidators is replaced with this method and is not supported anymore.*  *In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.*  **JSONRPC:** `klay_getCouncil` 
     * @param {Object} opts Optional parameters
     * @param {module:model/BlockNumberOrTag} opts.blockNumberOrTag (optional) Integer or hexadecimal block number, or the string \"earliest\" or \"latest\" as in the default block parameter.
     * @param {module:model/GetCouncilRequest} opts.getCouncilRequest 
     * @param {module:api/KlayApi~getCouncilCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCouncil200Response}
     */
  }, {
    key: "getCouncil",
    value: function getCouncil(opts, callback) {
      opts = opts || {};
      var postBody = new _GetCouncilRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var defaultValue = null;
      defaultValue = "latest";
      var optParam = opts['blockNumberOrTag'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'blockNumberOrTag' when calling getCouncil");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetCouncil200Response["default"];
      return this.apiClient.callApi('/klay/block/getCouncil', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getCouncilSize operation.
     * @callback module:api/KlayApi~getCouncilSizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCouncilSize200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getCouncilSize]
     * Returns the size of the council at the specified block. If the parameter is not set, returns the size of the council at the latest block.  **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.*  **JSONRPC:** `klay_getCouncilSize` 
     * @param {Object} opts Optional parameters
     * @param {module:model/BlockNumberOrTag} opts.blockNumberOrTag (optional) Integer or hexadecimal block number, or the string \"earliest\" or \"latest\" as in the default block parameter.
     * @param {module:model/GetCouncilSizeRequest} opts.getCouncilSizeRequest 
     * @param {module:api/KlayApi~getCouncilSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCouncilSize200Response}
     */
  }, {
    key: "getCouncilSize",
    value: function getCouncilSize(opts, callback) {
      opts = opts || {};
      var postBody = new _GetCouncilSizeRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var defaultValue = null;
      defaultValue = "latest";
      var optParam = opts['blockNumberOrTag'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'blockNumberOrTag' when calling getCouncilSize");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetCouncilSize200Response["default"];
      return this.apiClient.callApi('/klay/block/getCouncilSize', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getDecodedAnchoringTransactionByHash operation.
     * @callback module:api/KlayApi~getDecodedAnchoringTransactionByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDecodedAnchoringTransactionByHash200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-getDecodedAnchoringTransactionByHash]
     * Returns the decoded anchored data in the transaction for the given transaction hash.  **JSONRPC:** `klay_getDecodedAnchoringTransactionByHash` 
     * @param {String} hashOfTransaction Hash of a transaction.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDecodedAnchoringTransactionByHashRequest} opts.getDecodedAnchoringTransactionByHashRequest 
     * @param {module:api/KlayApi~getDecodedAnchoringTransactionByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDecodedAnchoringTransactionByHash200Response}
     */
  }, {
    key: "getDecodedAnchoringTransactionByHash",
    value: function getDecodedAnchoringTransactionByHash(hashOfTransaction, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'hashOfTransaction' is set
      if (hashOfTransaction === undefined || hashOfTransaction === null) {
        throw new Error("Missing the required parameter 'hashOfTransaction' when calling getDecodedAnchoringTransactionByHash");
      }
      var postBody = new _GetDecodedAnchoringTransactionByHashRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(hashOfTransaction);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetDecodedAnchoringTransactionByHash200Response["default"];
      return this.apiClient.callApi('/klay/transaction/getDecodedAnchoringTransactionByHash', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getFilterChanges operation.
     * @callback module:api/KlayApi~getFilterChangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFilterChanges200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Filter-getFilterChanges]
     * Polling method for a filter, which returns an array of logs which occurred since last poll.  **JSONRPC:** `klay_getFilterChanges` 
     * @param {String} QUANTITY The filter id (e.g., \"0x16\" // 22).
     * @param {Object} opts Optional parameters
     * @param {module:model/GetFilterChangesRequest} opts.getFilterChangesRequest 
     * @param {module:api/KlayApi~getFilterChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFilterChanges200Response}
     */
  }, {
    key: "getFilterChanges",
    value: function getFilterChanges(QUANTITY, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'QUANTITY' is set
      if (QUANTITY === undefined || QUANTITY === null) {
        throw new Error("Missing the required parameter 'QUANTITY' when calling getFilterChanges");
      }
      var postBody = new _GetFilterChangesRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(QUANTITY);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetFilterChanges200Response["default"];
      return this.apiClient.callApi('/klay/filter/getFilterChanges', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getFilterLogs operation.
     * @callback module:api/KlayApi~getFilterLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFilterLogs200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Filter-getFilterLogs]
     * Returns an array of all logs matching filter with given id, which has been obtained using klay_newFilter.Note that filter ids returned by other filter creation functions, such as klay_newBlockFilter or klay_newPendingTransactionFilter, cannot be used with this function.  The execution of this API can be limited by two node configurations to manage resources of Klaytn node safely.  - The number of maximum returned results in a single query (Default: 10,000).  - The execution duration limit of a single query (Default: 10 seconds).  **JSONRPC:** `klay_getFilterLogs` 
     * @param {String} QUANTITY The filter id
     * @param {Object} opts Optional parameters
     * @param {module:model/GetFilterLogsRequest} opts.getFilterLogsRequest 
     * @param {module:api/KlayApi~getFilterLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFilterLogs200Response}
     */
  }, {
    key: "getFilterLogs",
    value: function getFilterLogs(QUANTITY, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'QUANTITY' is set
      if (QUANTITY === undefined || QUANTITY === null) {
        throw new Error("Missing the required parameter 'QUANTITY' when calling getFilterLogs");
      }
      var postBody = new _GetFilterLogsRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(QUANTITY);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetFilterLogs200Response["default"];
      return this.apiClient.callApi('/klay/filter/getFilterLogs', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getHeaderByHash operation.
     * @callback module:api/KlayApi~getHeaderByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetHeaderByHash200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getHeaderByHash]
     * Returns information about a header by hash. This API works only on RPC call, not on JavaScript console.  **NOTE:** *This API is supported from Klaytn v1.7.0.*  **JSONRPC:** `klay_getHeaderByHash` 
     * @param {String} hashOfBlock Hash of a block.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetHeaderByHashRequest} opts.getHeaderByHashRequest 
     * @param {module:api/KlayApi~getHeaderByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetHeaderByHash200Response}
     */
  }, {
    key: "getHeaderByHash",
    value: function getHeaderByHash(hashOfBlock, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'hashOfBlock' is set
      if (hashOfBlock === undefined || hashOfBlock === null) {
        throw new Error("Missing the required parameter 'hashOfBlock' when calling getHeaderByHash");
      }
      var postBody = new _GetHeaderByHashRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(hashOfBlock);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetHeaderByHash200Response["default"];
      return this.apiClient.callApi('/klay/block/getHeaderByHash', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getHeaderByNumber operation.
     * @callback module:api/KlayApi~getHeaderByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetHeaderByNumber200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getHeaderByNumber]
     * Returns information about a header by number. This API works only on RPC call, not on JavaScript console.  **NOTE:** *This API is supported from Klaytn v1.7.0.*  **JSONRPC:** `klay_getHeaderByNumber` 
     * @param {module:model/BlockNumberOrTag} blockNumberOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetHeaderByNumberRequest} opts.getHeaderByNumberRequest 
     * @param {module:api/KlayApi~getHeaderByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetHeaderByNumber200Response}
     */
  }, {
    key: "getHeaderByNumber",
    value: function getHeaderByNumber(blockNumberOrTag, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockNumberOrTag' is set
      if (blockNumberOrTag === undefined || blockNumberOrTag === null) {
        throw new Error("Missing the required parameter 'blockNumberOrTag' when calling getHeaderByNumber");
      }
      var postBody = new _GetHeaderByNumberRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockNumberOrTag);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetHeaderByNumber200Response["default"];
      return this.apiClient.callApi('/klay/block/getHeaderByNumber', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getLogs operation.
     * @callback module:api/KlayApi~getLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLogs200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Filter-getLogs]
     * Returns an array of all logs matching a given filter object.  The execution of this API can be limited by two node configurations to manage resources of Klaytn node safely.  -The number of maximum returned results in a single query (Default: 10,000).  -The execution duration limit of a single query (Default: 10 seconds).  **NOTE**: In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.  **JSONRPC:** `klay_getLogs` 
     * @param {Object.<String, module:model/FilterOptions>} filterOptions The filter options.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetLogsRequest} opts.getLogsRequest 
     * @param {module:api/KlayApi~getLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLogs200Response}
     */
  }, {
    key: "getLogs",
    value: function getLogs(filterOptions, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'filterOptions' is set
      if (filterOptions === undefined || filterOptions === null) {
        throw new Error("Missing the required parameter 'filterOptions' when calling getLogs");
      }
      var postBody = new _GetLogsRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(filterOptions);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetLogs200Response["default"];
      return this.apiClient.callApi('/klay/filter/getLogs', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRawTransactionByBlockHashAndIndex operation.
     * @callback module:api/KlayApi~getRawTransactionByBlockHashAndIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRawTransactionByBlockHashAndIndex200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-getRawTransactionByBlockHashAndIndex]
     * GetRawTransactionByBlockHashAndIndex returns the bytes of the transaction for the given block hash and index.  **JSONRPC:** `klay_getRawTransactionByBlockHashAndIndex` 
     * @param {String} blockHash Hex representation of a Keccak 256 hash
     * @param {String} index Hex representation of a uint
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRawTransactionByBlockHashAndIndexRequest} opts.getRawTransactionByBlockHashAndIndexRequest 
     * @param {module:api/KlayApi~getRawTransactionByBlockHashAndIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRawTransactionByBlockHashAndIndex200Response}
     */
  }, {
    key: "getRawTransactionByBlockHashAndIndex",
    value: function getRawTransactionByBlockHashAndIndex(blockHash, index, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockHash' is set
      if (blockHash === undefined || blockHash === null) {
        throw new Error("Missing the required parameter 'blockHash' when calling getRawTransactionByBlockHashAndIndex");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling getRawTransactionByBlockHashAndIndex");
      }
      var postBody = new _GetRawTransactionByBlockHashAndIndexRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockHash);
      postBody.params.push(index);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetRawTransactionByBlockHashAndIndex200Response["default"];
      return this.apiClient.callApi('/klay/getRawTransactionByBlockHashAndIndex', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRawTransactionByBlockNumberAndIndex operation.
     * @callback module:api/KlayApi~getRawTransactionByBlockNumberAndIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRawTransactionByBlockNumberAndIndex200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-getRawTransactionByBlockNumberAndIndex]
     * GetRawTransactionByBlockNumberAndIndex returns the bytes of the transaction for the given block number and index.  **JSONRPC:** `klay_getRawTransactionByBlockNumberAndIndex` 
     * @param {module:model/BlockNumberOrHashOrTag} blockNumberOrHashOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in default block parameter.
     * @param {String} transactionIndex The transaction index position.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRawTransactionByBlockNumberAndIndexRequest} opts.getRawTransactionByBlockNumberAndIndexRequest 
     * @param {module:api/KlayApi~getRawTransactionByBlockNumberAndIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRawTransactionByBlockNumberAndIndex200Response}
     */
  }, {
    key: "getRawTransactionByBlockNumberAndIndex",
    value: function getRawTransactionByBlockNumberAndIndex(blockNumberOrHashOrTag, transactionIndex, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockNumberOrHashOrTag' is set
      if (blockNumberOrHashOrTag === undefined || blockNumberOrHashOrTag === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHashOrTag' when calling getRawTransactionByBlockNumberAndIndex");
      }
      // verify the required parameter 'transactionIndex' is set
      if (transactionIndex === undefined || transactionIndex === null) {
        throw new Error("Missing the required parameter 'transactionIndex' when calling getRawTransactionByBlockNumberAndIndex");
      }
      var postBody = new _GetRawTransactionByBlockNumberAndIndexRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockNumberOrHashOrTag);
      postBody.params.push(transactionIndex);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetRawTransactionByBlockNumberAndIndex200Response["default"];
      return this.apiClient.callApi('/klay/getRawTransactionByBlockNumberAndIndex', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRawTransactionByHash operation.
     * @callback module:api/KlayApi~getRawTransactionByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRawTransactionByHash200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-getRawTransactionByHash]
     * GetRawTransactionByHash returns the bytes of the transaction for the given hash.  **JSONRPC:** `klay_getRawTransactionByHash` 
     * @param {String} hash Hex representation of a Keccak 256 hash
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRawTransactionByHashRequest} opts.getRawTransactionByHashRequest 
     * @param {module:api/KlayApi~getRawTransactionByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRawTransactionByHash200Response}
     */
  }, {
    key: "getRawTransactionByHash",
    value: function getRawTransactionByHash(hash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling getRawTransactionByHash");
      }
      var postBody = new _GetRawTransactionByHashRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(hash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetRawTransactionByHash200Response["default"];
      return this.apiClient.callApi('/klay/getRawTransactionByHash', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRewards operation.
     * @callback module:api/KlayApi~getRewardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRewards200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getRewards]
     * Returns the reward distribution result about a block by block number, including the rewardees and their shares. If the parameter is not set, it returns the reward distribution at the latest block.  **JSONRPC:** `klay_getRewards` 
     * @param {module:model/BlockNumberOrTag} blockNumberOrTag block number
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRewardsRequest} opts.getRewardsRequest 
     * @param {module:api/KlayApi~getRewardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRewards200Response}
     */
  }, {
    key: "getRewards",
    value: function getRewards(blockNumberOrTag, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockNumberOrTag' is set
      if (blockNumberOrTag === undefined || blockNumberOrTag === null) {
        throw new Error("Missing the required parameter 'blockNumberOrTag' when calling getRewards");
      }
      var postBody = new _GetRewardsRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockNumberOrTag);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetRewards200Response["default"];
      return this.apiClient.callApi('/klay/block/getRewards', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getStakingInfo operation.
     * @callback module:api/KlayApi~getStakingInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStakingInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Miscellaneous-getStakingInfo]
     * The getStakingInfo returns staking information at a specific block. The result includes the following information. - BlockNum: The block number at which the staking information is given. - CouncilNodeAddrs: The addresses of the consensus node. - CouncilRewardAddrs: The addresses to which the block reward of the associated nodes is sent. - CouncilStakingAddrs: The contract addresses in which the associated nodes deploy for staking. - CouncilStakingAmounts: The amount of KLAY which the associated nodes stake. - Gini: Gini coefficient. - KIRAddr: The contract address of KIR. - PoCAddr: The contract address of KGF. PoC is the previous name of KGF. - UseGini: The boolean value whether or not the Gini coefficient is used.  Note that the order of all addresses and the staking amounts are matched.  **JSONRPC:** `klay_getStakingInfo` 
     * @param {module:model/BlockNumberOrTag} blockNumberOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in default block parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetStakingInfoRequest} opts.getStakingInfoRequest 
     * @param {module:api/KlayApi~getStakingInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStakingInfo200Response}
     */
  }, {
    key: "getStakingInfo",
    value: function getStakingInfo(blockNumberOrTag, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockNumberOrTag' is set
      if (blockNumberOrTag === undefined || blockNumberOrTag === null) {
        throw new Error("Missing the required parameter 'blockNumberOrTag' when calling getStakingInfo");
      }
      var postBody = new _GetStakingInfoRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockNumberOrTag);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetStakingInfo200Response["default"];
      return this.apiClient.callApi('/klay/getStakingInfo', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getStorageAt operation.
     * @callback module:api/KlayApi~getStorageAtCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStorageAt200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-getStorageAt]
     * Returns the value from a storage position at a given address.  **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.*  **JSONRPC:** `klay_getStorageAt` 
     * @param {String} storageAddress Address of the storage.
     * @param {String} position Integer of the position in the storage.
     * @param {module:model/BlockNumberOrHashOrTag} blockNumberOrHash Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter, or block hash.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetStorageAtRequest} opts.getStorageAtRequest 
     * @param {module:api/KlayApi~getStorageAtCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStorageAt200Response}
     */
  }, {
    key: "getStorageAt",
    value: function getStorageAt(storageAddress, position, blockNumberOrHash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'storageAddress' is set
      if (storageAddress === undefined || storageAddress === null) {
        throw new Error("Missing the required parameter 'storageAddress' when calling getStorageAt");
      }
      // verify the required parameter 'position' is set
      if (position === undefined || position === null) {
        throw new Error("Missing the required parameter 'position' when calling getStorageAt");
      }
      // verify the required parameter 'blockNumberOrHash' is set
      if (blockNumberOrHash === undefined || blockNumberOrHash === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHash' when calling getStorageAt");
      }
      var postBody = new _GetStorageAtRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(storageAddress);
      postBody.params.push(position);
      postBody.params.push(blockNumberOrHash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetStorageAt200Response["default"];
      return this.apiClient.callApi('/klay/block/getStorageAt', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getTransactionByBlockHashAndIndex operation.
     * @callback module:api/KlayApi~getTransactionByBlockHashAndIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTransactionByBlockHashAndIndex200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-getTransactionByBlockHashAndIndex]
     * Returns information about a transaction by block hash and transaction index position. This API works only on RPC call, not on JavaScript console.  **JSONRPC:** `klay_getTransactionByBlockHashAndIndex` 
     * @param {String} blockHash Hash of a block.
     * @param {String} transactionIndexPosition Integer of the transaction index position.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetTransactionByBlockHashAndIndexRequest} opts.getTransactionByBlockHashAndIndexRequest 
     * @param {module:api/KlayApi~getTransactionByBlockHashAndIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTransactionByBlockHashAndIndex200Response}
     */
  }, {
    key: "getTransactionByBlockHashAndIndex",
    value: function getTransactionByBlockHashAndIndex(blockHash, transactionIndexPosition, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockHash' is set
      if (blockHash === undefined || blockHash === null) {
        throw new Error("Missing the required parameter 'blockHash' when calling getTransactionByBlockHashAndIndex");
      }
      // verify the required parameter 'transactionIndexPosition' is set
      if (transactionIndexPosition === undefined || transactionIndexPosition === null) {
        throw new Error("Missing the required parameter 'transactionIndexPosition' when calling getTransactionByBlockHashAndIndex");
      }
      var postBody = new _GetTransactionByBlockHashAndIndexRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockHash);
      postBody.params.push(transactionIndexPosition);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetTransactionByBlockHashAndIndex200Response["default"];
      return this.apiClient.callApi('/klay/transaction/getTransactionByBlockHashAndIndex', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getTransactionByBlockNumberAndIndex operation.
     * @callback module:api/KlayApi~getTransactionByBlockNumberAndIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTransactionByBlockNumberAndIndex200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-getTransactionByBlockNumberAndIndex]
     * Returns information about a transaction by block number and transaction index position. This API works only on RPC call, not on JavaScript console.  **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.*  **JSONRPC:** `klay_getTransactionByBlockNumberAndIndex` 
     * @param {module:model/BlockNumberOrTag} blockNumberOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in default block parameter.
     * @param {String} transactionIndex The transaction index position.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetTransactionByBlockNumberAndIndexRequest} opts.getTransactionByBlockNumberAndIndexRequest 
     * @param {module:api/KlayApi~getTransactionByBlockNumberAndIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTransactionByBlockNumberAndIndex200Response}
     */
  }, {
    key: "getTransactionByBlockNumberAndIndex",
    value: function getTransactionByBlockNumberAndIndex(blockNumberOrTag, transactionIndex, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'blockNumberOrTag' is set
      if (blockNumberOrTag === undefined || blockNumberOrTag === null) {
        throw new Error("Missing the required parameter 'blockNumberOrTag' when calling getTransactionByBlockNumberAndIndex");
      }
      // verify the required parameter 'transactionIndex' is set
      if (transactionIndex === undefined || transactionIndex === null) {
        throw new Error("Missing the required parameter 'transactionIndex' when calling getTransactionByBlockNumberAndIndex");
      }
      var postBody = new _GetTransactionByBlockNumberAndIndexRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(blockNumberOrTag);
      postBody.params.push(transactionIndex);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetTransactionByBlockNumberAndIndex200Response["default"];
      return this.apiClient.callApi('/klay/transaction/getTransactionByBlockNumberAndIndex', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getTransactionByHash operation.
     * @callback module:api/KlayApi~getTransactionByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTransactionByHash200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-getTransactionByHash]
     * Returns the information about a transaction requested by transaction hash. This API works only on RPC call, not on JavaScript console.  **JSONRPC:** `klay_getTransactionByHash` 
     * @param {String} transactionHash Hash of a transaction.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetTransactionByHashRequest} opts.getTransactionByHashRequest 
     * @param {module:api/KlayApi~getTransactionByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTransactionByHash200Response}
     */
  }, {
    key: "getTransactionByHash",
    value: function getTransactionByHash(transactionHash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'transactionHash' is set
      if (transactionHash === undefined || transactionHash === null) {
        throw new Error("Missing the required parameter 'transactionHash' when calling getTransactionByHash");
      }
      var postBody = new _GetTransactionByHashRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(transactionHash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetTransactionByHash200Response["default"];
      return this.apiClient.callApi('/klay/transaction/getTransactionByHash', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getTransactionBySenderTxHash operation.
     * @callback module:api/KlayApi~getTransactionBySenderTxHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTransactionBySenderTxHash200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-getTransactionBySenderTxHash]
     * Returns the information about a transaction requested by sender transaction hash. This API works only on RPC call, not on JavaScript console. Please note that this API returns correct result only if indexing feature is enabled by --sendertxhashindexing. This can be checked by call klay_isSenderTxHashIndexingEnabled.  **JSONRPC:** `klay_getTransactionBySenderTxHash` 
     * @param {String} transactionHash Hash of a transaction that is signed only by the sender.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetTransactionBySenderTxHashRequest} opts.getTransactionBySenderTxHashRequest 
     * @param {module:api/KlayApi~getTransactionBySenderTxHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTransactionBySenderTxHash200Response}
     */
  }, {
    key: "getTransactionBySenderTxHash",
    value: function getTransactionBySenderTxHash(transactionHash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'transactionHash' is set
      if (transactionHash === undefined || transactionHash === null) {
        throw new Error("Missing the required parameter 'transactionHash' when calling getTransactionBySenderTxHash");
      }
      var postBody = new _GetTransactionBySenderTxHashRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(transactionHash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetTransactionBySenderTxHash200Response["default"];
      return this.apiClient.callApi('/klay/transaction/getTransactionBySenderTxHash', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getTransactionCount operation.
     * @callback module:api/KlayApi~getTransactionCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTransactionCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Account-getTransactionCount]
     * Returns the number of transactions sent from an address.  **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available*  **JSONRPC:** `klay_getTransactionCount` 
     * @param {String} address Address
     * @param {module:model/BlockNumberOrHashOrTag} blockNumberOrHashOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter, or block hash.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetTransactionCountRequest} opts.getTransactionCountRequest 
     * @param {module:api/KlayApi~getTransactionCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTransactionCount200Response}
     */
  }, {
    key: "getTransactionCount",
    value: function getTransactionCount(address, blockNumberOrHashOrTag, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getTransactionCount");
      }
      // verify the required parameter 'blockNumberOrHashOrTag' is set
      if (blockNumberOrHashOrTag === undefined || blockNumberOrHashOrTag === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHashOrTag' when calling getTransactionCount");
      }
      var postBody = new _GetTransactionCountRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(address);
      postBody.params.push(blockNumberOrHashOrTag);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetTransactionCount200Response["default"];
      return this.apiClient.callApi('/klay/account/getTransactionCount', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getTransactionReceipt operation.
     * @callback module:api/KlayApi~getTransactionReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTransactionReceipt200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-getTransactionReceipt]
     * Returns the receipt of a transaction by transaction hash.  **NOTE:** The receipt is not available for pending transactions.  **JSONRPC:** `klay_getTransactionReceipt` 
     * @param {String} transactionHash Hash of a transaction.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetTransactionReceiptRequest} opts.getTransactionReceiptRequest 
     * @param {module:api/KlayApi~getTransactionReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTransactionReceipt200Response}
     */
  }, {
    key: "getTransactionReceipt",
    value: function getTransactionReceipt(transactionHash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'transactionHash' is set
      if (transactionHash === undefined || transactionHash === null) {
        throw new Error("Missing the required parameter 'transactionHash' when calling getTransactionReceipt");
      }
      var postBody = new _GetTransactionReceiptRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(transactionHash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetTransactionReceipt200Response["default"];
      return this.apiClient.callApi('/klay/transaction/getTransactionReceipt', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getTransactionReceiptBySenderTxHash operation.
     * @callback module:api/KlayApi~getTransactionReceiptBySenderTxHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTransactionReceiptBySenderTxHash200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-getTransactionReceiptBySenderTxHash]
     * Returns the receipt of a transaction by sender transaction hash.  **NOTE:** The receipt is not available for pending transactions. Please note that this API returns correct result only if indexing feature is enabled by --sendertxhashindexing. This can be checked by call klay_isSenderTxHashIndexingEnabled.  **JSONRPC:** `klay_getTransactionReceiptBySenderTxHash` 
     * @param {String} hash Hash of a transaction before signing of feePayer(senderTransactionHash).
     * @param {Object} opts Optional parameters
     * @param {module:model/GetTransactionReceiptBySenderTxHashRequest} opts.getTransactionReceiptBySenderTxHashRequest 
     * @param {module:api/KlayApi~getTransactionReceiptBySenderTxHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTransactionReceiptBySenderTxHash200Response}
     */
  }, {
    key: "getTransactionReceiptBySenderTxHash",
    value: function getTransactionReceiptBySenderTxHash(hash, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling getTransactionReceiptBySenderTxHash");
      }
      var postBody = new _GetTransactionReceiptBySenderTxHashRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(hash);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetTransactionReceiptBySenderTxHash200Response["default"];
      return this.apiClient.callApi('/klay/transaction/getTransactionReceiptBySenderTxHash', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the isContractAccount operation.
     * @callback module:api/KlayApi~isContractAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsContractAccount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Account-isContractAccount]
     * Returns true if an input account has a non-empty codeHash at the time of a specific block number. It returns false if the account is an EOA or a smart contract account which doesn't have codeHash.  **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available*  **JSONRPC:** `klay_isContractAccount` 
     * @param {String} address Address
     * @param {module:model/BlockNumberOrHashOrTag} blockNumberOrHashOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in the default block parameter, or block hash.
     * @param {Object} opts Optional parameters
     * @param {module:model/IsContractAccountRequest} opts.isContractAccountRequest 
     * @param {module:api/KlayApi~isContractAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsContractAccount200Response}
     */
  }, {
    key: "isContractAccount",
    value: function isContractAccount(address, blockNumberOrHashOrTag, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling isContractAccount");
      }
      // verify the required parameter 'blockNumberOrHashOrTag' is set
      if (blockNumberOrHashOrTag === undefined || blockNumberOrHashOrTag === null) {
        throw new Error("Missing the required parameter 'blockNumberOrHashOrTag' when calling isContractAccount");
      }
      var postBody = new _IsContractAccountRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(address);
      postBody.params.push(blockNumberOrHashOrTag);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _IsContractAccount200Response["default"];
      return this.apiClient.callApi('/klay/account/isContractAccount', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the isParallelDBWrite operation.
     * @callback module:api/KlayApi~isParallelDBWriteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsParallelDBWrite200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Configuration-isParallelDBWrite]
     * Returns true if the node is writing blockchain data in parallel manner. It is enabled by default.  **JSONRPC:** `klay_isParallelDBWrite` 
     * @param {Object} opts Optional parameters
     * @param {module:model/IsParallelDBWriteRequest} opts.isParallelDBWriteRequest 
     * @param {module:api/KlayApi~isParallelDBWriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsParallelDBWrite200Response}
     */
  }, {
    key: "isParallelDBWrite",
    value: function isParallelDBWrite(opts, callback) {
      opts = opts || {};
      var postBody = new _IsParallelDBWriteRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _IsParallelDBWrite200Response["default"];
      return this.apiClient.callApi('/klay/configuration/isParallelDBWrite', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the isSenderTxHashIndexingEnabled operation.
     * @callback module:api/KlayApi~isSenderTxHashIndexingEnabledCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsSenderTxHashIndexingEnabled200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Configuration-isSenderTxHashIndexingEnabled]
     * Returns true if the node is indexing sender transaction hash to transaction hash mapping information. It is disabled by default and can be enabled by --sendertxhashindexing.  **JSONRPC:** `klay_isSenderTxHashIndexingEnabled` 
     * @param {Object} opts Optional parameters
     * @param {module:model/IsSenderTxHashIndexingEnabledRequest} opts.isSenderTxHashIndexingEnabledRequest 
     * @param {module:api/KlayApi~isSenderTxHashIndexingEnabledCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsSenderTxHashIndexingEnabled200Response}
     */
  }, {
    key: "isSenderTxHashIndexingEnabled",
    value: function isSenderTxHashIndexingEnabled(opts, callback) {
      opts = opts || {};
      var postBody = new _IsSenderTxHashIndexingEnabledRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _IsSenderTxHashIndexingEnabled200Response["default"];
      return this.apiClient.callApi('/klay/configuration/isSenderTxHashIndexingEnabled', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the lowerBoundGasPrice operation.
     * @callback module:api/KlayApi~lowerBoundGasPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LowerBoundGasPrice200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Gas-lowerBoundGasPrice]
     * Returns lower bound gas price.  **JSONRPC:** `klay_lowerBoundGasPrice` 
     * @param {Object} opts Optional parameters
     * @param {module:model/LowerBoundGasPriceRequest} opts.lowerBoundGasPriceRequest 
     * @param {module:api/KlayApi~lowerBoundGasPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LowerBoundGasPrice200Response}
     */
  }, {
    key: "lowerBoundGasPrice",
    value: function lowerBoundGasPrice(opts, callback) {
      opts = opts || {};
      var postBody = new _LowerBoundGasPriceRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _LowerBoundGasPrice200Response["default"];
      return this.apiClient.callApi('/klay/gas/lowerBoundGasPrice', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the maxPriorityFeePerGas operation.
     * @callback module:api/KlayApi~maxPriorityFeePerGasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MaxPriorityFeePerGas200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Gas-maxPriorityFeePerGas]
     * Returns a suggestion for a gas tip cap for dynamic fee transactions in peb.  **NOTE:** This API is effective after Klaytn v1.8.0  **JSONRPC:** `klay_maxPriorityFeePerGas` 
     * @param {Object} opts Optional parameters
     * @param {module:model/MaxPriorityFeePerGasRequest} opts.maxPriorityFeePerGasRequest 
     * @param {module:api/KlayApi~maxPriorityFeePerGasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MaxPriorityFeePerGas200Response}
     */
  }, {
    key: "maxPriorityFeePerGas",
    value: function maxPriorityFeePerGas(opts, callback) {
      opts = opts || {};
      var postBody = new _MaxPriorityFeePerGasRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MaxPriorityFeePerGas200Response["default"];
      return this.apiClient.callApi('/klay/gas/maxPriorityFeePerGas', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the newBlockFilter operation.
     * @callback module:api/KlayApi~newBlockFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewBlockFilter200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Filter-newBlockFilter]
     * Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call klay_getFilterChanges.  **JSONRPC:** `klay_newBlockFilter` 
     * @param {Object} opts Optional parameters
     * @param {module:model/NewBlockFilterRequest} opts.newBlockFilterRequest 
     * @param {module:api/KlayApi~newBlockFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewBlockFilter200Response}
     */
  }, {
    key: "newBlockFilter",
    value: function newBlockFilter(opts, callback) {
      opts = opts || {};
      var postBody = new _NewBlockFilterRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _NewBlockFilter200Response["default"];
      return this.apiClient.callApi('/klay/filter/newBlockFilter', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the newFilter operation.
     * @callback module:api/KlayApi~newFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewFilter200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Filter-newFilter]
     * Creates a filter object, based on filter options, to notify when the state changes (logs). - To check if the state has changed, call klay_getFilterChanges. - To obtain all logs matching the filter created by klay_newFilter, call klay_getFilterLogs.  **A note on specifying topic filters:** Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters: - [] \"anything\" - [A] \"A in first position (and anything after)\" - [null, B] \"anything in first position AND B in second position (and anything after)\" - [A, B] \"A in first position AND B in second position (and anything after)\" - [[A, B], [A, B]] \"(A OR B) in first position AND (A OR B) in second position (and anything after)\"  **NOTE:** In versions earlier than Klaytn v1.7.0, only integer block number, the string \"earliest\" and \"latest\" are available.  **JSONRPC:** `klay_newFilter` 
     * @param {Object.<String, module:model/SchemasFilterOptions>} filterOptions The filter options
     * @param {Object} opts Optional parameters
     * @param {module:model/NewFilterRequest} opts.newFilterRequest 
     * @param {module:api/KlayApi~newFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewFilter200Response}
     */
  }, {
    key: "newFilter",
    value: function newFilter(filterOptions, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'filterOptions' is set
      if (filterOptions === undefined || filterOptions === null) {
        throw new Error("Missing the required parameter 'filterOptions' when calling newFilter");
      }
      var postBody = new _NewFilterRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(filterOptions);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _NewFilter200Response["default"];
      return this.apiClient.callApi('/klay/filter/newFilter', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the newPendingTransactionFilter operation.
     * @callback module:api/KlayApi~newPendingTransactionFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewPendingTransactionFilter200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Filter-newPendingTransactionFilter]
     * Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed, call klay_getFilterChanges.  **JSONRPC:** `klay_newPendingTransactionFilter` 
     * @param {Object} opts Optional parameters
     * @param {module:model/NewPendingTransactionFilterRequest} opts.newPendingTransactionFilterRequest 
     * @param {module:api/KlayApi~newPendingTransactionFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewPendingTransactionFilter200Response}
     */
  }, {
    key: "newPendingTransactionFilter",
    value: function newPendingTransactionFilter(opts, callback) {
      opts = opts || {};
      var postBody = new _NewPendingTransactionFilterRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _NewPendingTransactionFilter200Response["default"];
      return this.apiClient.callApi('/klay/filter/newPendingTransactionFilter', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the nodeAddress operation.
     * @callback module:api/KlayApi~nodeAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeAddress200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Miscellaneous-nodeAddress]
     * The nodeAddress property provides the address of the node that a user is using. It is derived from the nodekey and used to sign consensus messages.  **JSONRPC:** `klay_nodeAddress` 
     * @param {Object} opts Optional parameters
     * @param {module:model/NodeAddressRequest} opts.nodeAddressRequest 
     * @param {module:api/KlayApi~nodeAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeAddress200Response}
     */
  }, {
    key: "nodeAddress",
    value: function nodeAddress(opts, callback) {
      opts = opts || {};
      var postBody = new _NodeAddressRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _NodeAddress200Response["default"];
      return this.apiClient.callApi('/klay/nodeAddress', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the pendingTransactions operation.
     * @callback module:api/KlayApi~pendingTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PendingTransactions200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-pendingTransactions]
     * Returns the transactions that are in the transaction pool and have a from address that is one of the accounts this node manages.  **JSONRPC:** `klay_pendingTransactions` 
     * @param {Object} opts Optional parameters
     * @param {module:model/PendingTransactionsRequest} opts.pendingTransactionsRequest 
     * @param {module:api/KlayApi~pendingTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PendingTransactions200Response}
     */
  }, {
    key: "pendingTransactions",
    value: function pendingTransactions(opts, callback) {
      opts = opts || {};
      var postBody = new _PendingTransactionsRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _PendingTransactions200Response["default"];
      return this.apiClient.callApi('/klay/transaction/pendingTransactions', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the protocolVersion operation.
     * @callback module:api/KlayApi~protocolVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtocolVersion200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Configuration-protocolVersion]
     * Returns the Klaytn protocol version of the node. The current version (as of v1.9.0) of Cypress/Baobab is istanbul/65.  **JSONRPC:** `klay_protocolVersion` 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProtocolVersionRequest} opts.protocolVersionRequest 
     * @param {module:api/KlayApi~protocolVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtocolVersion200Response}
     */
  }, {
    key: "protocolVersion",
    value: function protocolVersion(opts, callback) {
      opts = opts || {};
      var postBody = new _ProtocolVersionRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ProtocolVersion200Response["default"];
      return this.apiClient.callApi('/klay/configuration/protocolVersion', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the recoverFromMessage operation.
     * @callback module:api/KlayApi~recoverFromMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoverFromMessage200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Miscellaneous-recoverFromMessage]
     * Using this API, users can recover from message data.  **JSONRPC:** `klay_recoverFromMessage` 
     * @param {String} address Address
     * @param {String} message A Message.
     * @param {String} signature The signature.
     * @param {Object} opts Optional parameters
     * @param {module:model/BlockNumberOrTag} opts.blockNumberOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in default block parameter.
     * @param {module:model/RecoverFromMessageRequest} opts.recoverFromMessageRequest 
     * @param {module:api/KlayApi~recoverFromMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoverFromMessage200Response}
     */
  }, {
    key: "recoverFromMessage",
    value: function recoverFromMessage(address, message, signature, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling recoverFromMessage");
      }
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling recoverFromMessage");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling recoverFromMessage");
      }
      var postBody = new _RecoverFromMessageRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(address);
      postBody.params.push(message);
      postBody.params.push(signature);
      var defaultValue = null;
      defaultValue = "latest";
      var optParam = opts['blockNumberOrTag'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'blockNumberOrTag' when calling recoverFromMessage");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RecoverFromMessage200Response["default"];
      return this.apiClient.callApi('/klay/recoverFromMessage', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the recoverFromTransaction operation.
     * @callback module:api/KlayApi~recoverFromTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoverFromTransaction200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Miscellaneous-recoverFromTransaction]
     * Using this API, users can recover from transaction data.   **JSONRPC:** `klay_recoverFromTransaction` 
     * @param {String} rlpEncodedTransaction RLP encoded transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/BlockNumberOrTag} opts.blockNumberOrTag Integer or hexadecimal block number, or the string \"earliest\", \"latest\" or \"pending\" as in default block parameter.
     * @param {module:model/RecoverFromTransactionRequest} opts.recoverFromTransactionRequest 
     * @param {module:api/KlayApi~recoverFromTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoverFromTransaction200Response}
     */
  }, {
    key: "recoverFromTransaction",
    value: function recoverFromTransaction(rlpEncodedTransaction, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'rlpEncodedTransaction' is set
      if (rlpEncodedTransaction === undefined || rlpEncodedTransaction === null) {
        throw new Error("Missing the required parameter 'rlpEncodedTransaction' when calling recoverFromTransaction");
      }
      var postBody = new _RecoverFromTransactionRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(rlpEncodedTransaction);
      var defaultValue = null;
      defaultValue = "latest";
      var optParam = opts['blockNumberOrTag'] || opts[optsIndex++] || defaultValue;
      if (optParam === undefined || optParam === null) {
        throw new Error("Missing the required parameter 'blockNumberOrTag' when calling recoverFromTransaction");
      }
      postBody.params.push(optParam);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RecoverFromTransaction200Response["default"];
      return this.apiClient.callApi('/klay/recoverFromTransaction', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the resend operation.
     * @callback module:api/KlayApi~resendCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Resend200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-resend]
     * Resend accepts an existing transaction and a new gas price and limit. It will remove the given transaction from the pool and reinsert it with the new gas price and limit.  **JSONRPC:** `klay_resend` 
     * @param {Object.<String, module:model/SendArgs>} sendArgs 
     * @param {String} gasPrice Hex representation of the integer
     * @param {String} gasLimit Hex representation of a uint64
     * @param {Object} opts Optional parameters
     * @param {module:model/ResendRequest} opts.resendRequest 
     * @param {module:api/KlayApi~resendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Resend200Response}
     */
  }, {
    key: "resend",
    value: function resend(sendArgs, gasPrice, gasLimit, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'sendArgs' is set
      if (sendArgs === undefined || sendArgs === null) {
        throw new Error("Missing the required parameter 'sendArgs' when calling resend");
      }
      // verify the required parameter 'gasPrice' is set
      if (gasPrice === undefined || gasPrice === null) {
        throw new Error("Missing the required parameter 'gasPrice' when calling resend");
      }
      // verify the required parameter 'gasLimit' is set
      if (gasLimit === undefined || gasLimit === null) {
        throw new Error("Missing the required parameter 'gasLimit' when calling resend");
      }
      var postBody = new _ResendRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(sendArgs);
      postBody.params.push(gasPrice);
      postBody.params.push(gasLimit);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Resend200Response["default"];
      return this.apiClient.callApi('/klay/resend', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the rewardbase operation.
     * @callback module:api/KlayApi~rewardbaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rewardbase200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Configuration-rewardbase]
     * Returns the rewardbase of the current node. Rewardbase is the address of the account where the block rewards goes to. It is only required for CNs.  **JSONRPC:** `klay_rewardbase` 
     * @param {Object} opts Optional parameters
     * @param {module:model/RewardbaseRequest} opts.rewardbaseRequest 
     * @param {module:api/KlayApi~rewardbaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rewardbase200Response}
     */
  }, {
    key: "rewardbase",
    value: function rewardbase(opts, callback) {
      opts = opts || {};
      var postBody = new _RewardbaseRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Rewardbase200Response["default"];
      return this.apiClient.callApi('/klay/configuration/rewardbase', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the sendRawTransaction operation.
     * @callback module:api/KlayApi~sendRawTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendRawTransaction200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-sendRawTransaction]
     * Creates a new message call transaction or a contract creation for signed transactions.  **NOTE:** If you deployed a contract, use klay_getTransactionReceipt to get the contract address.  **JSONRPC:** `klay_sendRawTransaction` 
     * @param {String} singedTransactionData The signed transaction data.
     * @param {Object} opts Optional parameters
     * @param {module:model/SendRawTransactionRequest} opts.sendRawTransactionRequest 
     * @param {module:api/KlayApi~sendRawTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendRawTransaction200Response}
     */
  }, {
    key: "sendRawTransaction",
    value: function sendRawTransaction(singedTransactionData, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'singedTransactionData' is set
      if (singedTransactionData === undefined || singedTransactionData === null) {
        throw new Error("Missing the required parameter 'singedTransactionData' when calling sendRawTransaction");
      }
      var postBody = new _SendRawTransactionRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(singedTransactionData);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SendRawTransaction200Response["default"];
      return this.apiClient.callApi('/klay/transaction/sendRawTransaction', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the sendTransaction operation.
     * @callback module:api/KlayApi~sendTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendTransaction200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-sendTransaction]
     * Constructs a transaction with given parameters, signs the transaction with a sender's private key and propagates the transaction to Klaytn network.  `klay_sendTransaction` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with. Steps to test `klay_sendTransaction`.   - Step 1: Setup a local EN node   - Step 2: <a href=\"#tag/personal/operation/newAccount\" target=\"_blank\">Create an account</a> into the EN node   - Step 3: <a href=\"#tag/personal/operation/unlockAccount\" target=\"_blank\">Unlock the account</a> for using in signing  **JSONRPC:** `klay_sendTransaction` 
     * @param {Object.<String, module:model/KlaytnTransactionTypes>} klaytnTransactionTypes The required parameters depend on the transaction type.
     * @param {Object} opts Optional parameters
     * @param {module:model/SendTransactionRequest} opts.sendTransactionRequest 
     * @param {module:api/KlayApi~sendTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendTransaction200Response}
     */
  }, {
    key: "sendTransaction",
    value: function sendTransaction(klaytnTransactionTypes, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'klaytnTransactionTypes' is set
      if (klaytnTransactionTypes === undefined || klaytnTransactionTypes === null) {
        throw new Error("Missing the required parameter 'klaytnTransactionTypes' when calling sendTransaction");
      }
      var postBody = new _SendTransactionRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(klaytnTransactionTypes);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SendTransaction200Response["default"];
      return this.apiClient.callApi('/klay/transaction/sendTransaction', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the sendTransactionAsFeePayer operation.
     * @callback module:api/KlayApi~sendTransactionAsFeePayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendTransactionAsFeePayer200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-sendTransactionAsFeePayer]
     * Constructs a transaction with given parameters, signs the transaction with a fee payer's private key and propagates the transaction to Klaytn network. This API supports only fee delegated type (including partial fee delegated type) transactions.  `klay_sendTransactionAsFeePayer` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with. Steps to test `klay_sendTransactionAsFeePayer`.   - Step 1: Setup a local EN node   - Step 2: <a href=\"#tag/personal/operation/newAccount\" target=\"_blank\">Create an account</a> into the EN node   - Step 3: <a href=\"#tag/personal/operation/unlockAccount\" target=\"_blank\">Unlock the account</a> for using in signing  **JSONRPC:** `klay_sendTransactionAsFeePayer` 
     * @param {Object.<String, module:model/KlaytnTransactionTypes>} klaytnTransactionTypes The required parameters depend on the transaction type.
     * @param {Object} opts Optional parameters
     * @param {module:model/SendTransactionAsFeePayerRequest} opts.sendTransactionAsFeePayerRequest 
     * @param {module:api/KlayApi~sendTransactionAsFeePayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendTransactionAsFeePayer200Response}
     */
  }, {
    key: "sendTransactionAsFeePayer",
    value: function sendTransactionAsFeePayer(klaytnTransactionTypes, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'klaytnTransactionTypes' is set
      if (klaytnTransactionTypes === undefined || klaytnTransactionTypes === null) {
        throw new Error("Missing the required parameter 'klaytnTransactionTypes' when calling sendTransactionAsFeePayer");
      }
      var postBody = new _SendTransactionAsFeePayerRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(klaytnTransactionTypes);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SendTransactionAsFeePayer200Response["default"];
      return this.apiClient.callApi('/klay/transaction/sendTransactionAsFeePayer', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the sha3 operation.
     * @callback module:api/KlayApi~sha3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Sha3200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Miscellaneous-sha3]
     * Returns Keccak-256 (not the standardized SHA3-256) of the given data.  **JSONRPC:** `klay_sha3` 
     * @param {String} data The data to convert into a SHA3 hash.
     * @param {Object} opts Optional parameters
     * @param {module:model/Sha3Request} opts.sha3Request 
     * @param {module:api/KlayApi~sha3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sha3200Response}
     */
  }, {
    key: "sha3",
    value: function sha3(data, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling sha3");
      }
      var postBody = new _Sha3Request["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(data);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Sha3200Response["default"];
      return this.apiClient.callApi('/klay/miscellaneous/sha3', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the sign operation.
     * @callback module:api/KlayApi~signCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sign200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Account-sign]
     * The sign method calculates a Klaytn-specific signature with:  sign(keccak256(\"\\x19Klaytn Signed Message:\\n\" + len(message) + message)))  Adding a prefix to the message makes the calculated signature recognizable as a Klaytn-specific signature. This prevents misuse where a malicious dApp can sign arbitrary data, e.g., transaction, and use the signature to impersonate the victim.  `klay_sign` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with. Steps to test `klay_sign`.   - Step 1: Setup a local EN node   - Step 2: <a href=\"#tag/personal/operation/newAccount\" target=\"_blank\">Create an account</a> into the EN node   - Step 3: <a href=\"#tag/personal/operation/unlockAccount\" target=\"_blank\">Unlock the account</a> for using in signing  **JSONRPC:** `klay_sign` 
     * @param {String} account Address
     * @param {String} message Message to sign
     * @param {Object} opts Optional parameters
     * @param {module:model/SignRequest} opts.signRequest 
     * @param {module:api/KlayApi~signCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sign200Response}
     */
  }, {
    key: "sign",
    value: function sign(account, message, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling sign");
      }
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling sign");
      }
      var postBody = new _SignRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(account);
      postBody.params.push(message);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Sign200Response["default"];
      return this.apiClient.callApi('/klay/account/sign', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the signTransaction operation.
     * @callback module:api/KlayApi~signTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignTransaction200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-signTransaction]
     * Constructs a transaction with given parameters and signs the transaction with a sender's private key. This method can be used either to generate a sender signature or to make a final raw transaction that is ready to submit to Klaytn network.  `klay_signTransaction` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with. Steps to test `klay_signTransaction`.   - Step 1: Setup a local EN node   - Step 2: <a href=\"#tag/personal/operation/newAccount\" target=\"_blank\">Create an account</a> into the EN node   - Step 3: <a href=\"#tag/personal/operation/unlockAccount\" target=\"_blank\">Unlock the account</a> for using in signing  **JSONRPC:** `klay_signTransaction` 
     * @param {Object.<String, module:model/KlaytnTransactionTypes>} transactionData Transaction data.
     * @param {Object} opts Optional parameters
     * @param {module:model/SignTransactionRequest} opts.signTransactionRequest 
     * @param {module:api/KlayApi~signTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignTransaction200Response}
     */
  }, {
    key: "signTransaction",
    value: function signTransaction(transactionData, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'transactionData' is set
      if (transactionData === undefined || transactionData === null) {
        throw new Error("Missing the required parameter 'transactionData' when calling signTransaction");
      }
      var postBody = new _SignTransactionRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(transactionData);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SignTransaction200Response["default"];
      return this.apiClient.callApi('/klay/transaction/signTransaction', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the signTransactionAsFeePayer operation.
     * @callback module:api/KlayApi~signTransactionAsFeePayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignTransactionAsFeePayer200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Transaction-signTransactionAsFeePayer]
     * Constructs a transaction with given parameters and signs the transaction with a fee payer's private key. This method can be used either to generate a fee payer signature or to make a final raw transaction that is ready to submit to Klaytn network. In case you just want to extract the fee-payer signature, simply take the feePayerSignatures from the result. Note that the raw transaction is not final if the sender's signature is not attached (that is, signatures in tx is empty).  `klay_signTransactionAsFeePayer` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with. Steps to test `klay_signTransactionAsFeePayer`.   - Step 1: Setup a local EN node   - Step 2: <a href=\"#tag/personal/operation/newAccount\" target=\"_blank\">Create an account</a> into the EN node   - Step 3: <a href=\"#tag/personal/operation/unlockAccount\" target=\"_blank\">Unlock the account</a> for using in signing  **JSONRPC:** `klay_signTransactionAsFeePayer` 
     * @param {Object.<String, module:model/KlaytnTransactionTypes>} transactionData Transaction data.
     * @param {Object} opts Optional parameters
     * @param {module:model/SignTransactionAsFeePayerRequest} opts.signTransactionAsFeePayerRequest 
     * @param {module:api/KlayApi~signTransactionAsFeePayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignTransactionAsFeePayer200Response}
     */
  }, {
    key: "signTransactionAsFeePayer",
    value: function signTransactionAsFeePayer(transactionData, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'transactionData' is set
      if (transactionData === undefined || transactionData === null) {
        throw new Error("Missing the required parameter 'transactionData' when calling signTransactionAsFeePayer");
      }
      var postBody = new _SignTransactionAsFeePayerRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(transactionData);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SignTransactionAsFeePayer200Response["default"];
      return this.apiClient.callApi('/klay/transaction/signTransactionAsFeePayer', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the subscribe operation.
     * @callback module:api/KlayApi~subscribeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscribe200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Filter-subscribe]
     * Creates a new subscription to specific events by using either RPC Pub/Sub over WebSockets or filters over HTTP. It allows clients to wait for events instead of polling for them.  The node will return a subscription id for each subscription created. For each event that matches the subscription, a notification with relevant data is sent together with the subscription id. If a connection is closed, all subscriptions created over the connection are removed.  **JSONRPC:** `klay_subscribe` 
     * @param {module:model/String} notificationType A notification type: \"newHeads\" or \"logs\"
     * @param {Object} opts Optional parameters
     * @param {module:model/SubscribeRequest} opts.subscribeRequest 
     * @param {module:api/KlayApi~subscribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscribe200Response}
     */
  }, {
    key: "subscribe",
    value: function subscribe(notificationType, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'notificationType' is set
      if (notificationType === undefined || notificationType === null) {
        throw new Error("Missing the required parameter 'notificationType' when calling subscribe");
      }
      var postBody = new _SubscribeRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(notificationType);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Subscribe200Response["default"];
      return this.apiClient.callApi('/klay/filter/subscribe', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the syncing operation.
     * @callback module:api/KlayApi~syncingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Syncing200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Block-syncing]
     * Returns an object with data about the sync status or false.  **JSONRPC:** `klay_syncing` 
     * @param {Object} opts Optional parameters
     * @param {module:model/SyncingRequest} opts.syncingRequest 
     * @param {module:api/KlayApi~syncingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Syncing200Response}
     */
  }, {
    key: "syncing",
    value: function syncing(opts, callback) {
      opts = opts || {};
      var postBody = new _SyncingRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Syncing200Response["default"];
      return this.apiClient.callApi('/klay/block/syncing', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the uninstallFilter operation.
     * @callback module:api/KlayApi~uninstallFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UninstallFilter200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Filter-uninstallFilter]
     * Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additionally, filters timeout when they are not requested with klay_getFilterChanges for a period of time.  **JSONRPC:** `klay_uninstallFilter` 
     * @param {String} filter The filter id
     * @param {Object} opts Optional parameters
     * @param {module:model/UninstallFilterRequest} opts.uninstallFilterRequest 
     * @param {module:api/KlayApi~uninstallFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UninstallFilter200Response}
     */
  }, {
    key: "uninstallFilter",
    value: function uninstallFilter(filter, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling uninstallFilter");
      }
      var postBody = new _UninstallFilterRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(filter);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UninstallFilter200Response["default"];
      return this.apiClient.callApi('/klay/filter/uninstallFilter', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the unsubscribe operation.
     * @callback module:api/KlayApi~unsubscribeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unsubscribe200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Filter-unsubscribe]
     * Cancels the subscription with a specific subscription id by using either RPC Pub/Sub over WebSockets or filters over HTTP. Only the connection that created a subscription can unsubscribe from it.  **JSONRPC:** `klay_unsubscribe` 
     * @param {String} subscriptionId A subscription id.
     * @param {Object} opts Optional parameters
     * @param {module:model/UnsubscribeRequest} opts.unsubscribeRequest 
     * @param {module:api/KlayApi~unsubscribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unsubscribe200Response}
     */
  }, {
    key: "unsubscribe",
    value: function unsubscribe(subscriptionId, opts, callback) {
      opts = opts || {};
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling unsubscribe");
      }
      var postBody = new _UnsubscribeRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      postBody.params.push(subscriptionId);
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Unsubscribe200Response["default"];
      return this.apiClient.callApi('/klay/filter/unsubscribe', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the upperBoundGasPrice operation.
     * @callback module:api/KlayApi~upperBoundGasPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpperBoundGasPrice200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Gas-upperBoundGasPrice]
     * Returns upper bound gas price.  **JSONRPC:** `klay_upperBoundGasPrice` 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpperBoundGasPriceRequest} opts.upperBoundGasPriceRequest 
     * @param {module:api/KlayApi~upperBoundGasPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpperBoundGasPrice200Response}
     */
  }, {
    key: "upperBoundGasPrice",
    value: function upperBoundGasPrice(opts, callback) {
      opts = opts || {};
      var postBody = new _UpperBoundGasPriceRequest["default"](undefined, undefined, undefined);
      var optsIndex = 0;
      postBody.params = [];
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _UpperBoundGasPrice200Response["default"];
      return this.apiClient.callApi('/klay/gas/upperBoundGasPrice', 'POST', null, null, null, null, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
  return KlayApi;
}();