"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Signature = _interopRequireDefault(require("./Signature"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
 * web3rpc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The TransactionObject model module.
 * @module model/TransactionObject
 * @version 0.9.8
 */
var TransactionObject = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>TransactionObject</code>.
   * Transaction object
   * @alias module:model/TransactionObject
   * @param blockHash {String} Hash of the block where this transaction was in. null when it is pending.
   * @param blockNumber {String} Block number where this transaction was in. null when it is pending.
   * @param from {String} Address of the sender.
   * @param gas {String} Gas provided by the sender.
   * @param gasPrice {String} Gas price provided by the sender in peb.
   * @param hash {String} Hash of the transaction.
   * @param nonce {String} The number of transactions made by the sender prior to this one.
   * @param senderTxHash {String} Hash of a transaction that is signed only by the sender. See SenderTxHash. This value is always the same as hash for non fee-delegated transactions.
   * @param signatures {Array.<module:model/Signature>} An array of signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s
   * @param to {String} Address of the receiver. null when it is a contract creation transaction.
   * @param transactionIndex {String} Integer of the transactions index position in the block. null when it is pending.
   * @param type {String} A string representing the type of the transaction.
   * @param typeInt {Number} An integer representing the type of the transaction.
   * @param value {String} Value transferred in peb.
   */
  function TransactionObject(blockHash, blockNumber, from, gas, gasPrice, hash, nonce, senderTxHash, signatures, to, transactionIndex, type, typeInt, value) {
    _classCallCheck(this, TransactionObject);
    TransactionObject.initialize(this, blockHash, blockNumber, from, gas, gasPrice, hash, nonce, senderTxHash, signatures, to, transactionIndex, type, typeInt, value);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(TransactionObject, null, [{
    key: "initialize",
    value: function initialize(obj, blockHash, blockNumber, from, gas, gasPrice, hash, nonce, senderTxHash, signatures, to, transactionIndex, type, typeInt, value) {
      obj['blockHash'] = blockHash;
      obj['blockNumber'] = blockNumber;
      obj['from'] = from;
      obj['gas'] = gas;
      obj['gasPrice'] = gasPrice;
      obj['hash'] = hash;
      obj['nonce'] = nonce;
      obj['senderTxHash'] = senderTxHash;
      obj['signatures'] = signatures;
      obj['to'] = to;
      obj['transactionIndex'] = transactionIndex;
      obj['type'] = type;
      obj['typeInt'] = typeInt;
      obj['value'] = value;
    }

    /**
     * Constructs a <code>TransactionObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionObject} obj Optional instance to populate.
     * @return {module:model/TransactionObject} The populated <code>TransactionObject</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new TransactionObject();
        if (data.hasOwnProperty('blockHash')) {
          obj['blockHash'] = _ApiClient["default"].convertToType(data['blockHash'], 'String');
        }
        if (data.hasOwnProperty('blockNumber')) {
          obj['blockNumber'] = _ApiClient["default"].convertToType(data['blockNumber'], 'String');
        }
        if (data.hasOwnProperty('codeFormat')) {
          obj['codeFormat'] = _ApiClient["default"].convertToType(data['codeFormat'], 'String');
        }
        if (data.hasOwnProperty('feePayer')) {
          obj['feePayer'] = _ApiClient["default"].convertToType(data['feePayer'], 'String');
        }
        if (data.hasOwnProperty('feePayerSignatures')) {
          obj['feePayerSignatures'] = _ApiClient["default"].convertToType(data['feePayerSignatures'], [_Signature["default"]]);
        }
        if (data.hasOwnProperty('feeRatio')) {
          obj['feeRatio'] = _ApiClient["default"].convertToType(data['feeRatio'], 'String');
        }
        if (data.hasOwnProperty('from')) {
          obj['from'] = _ApiClient["default"].convertToType(data['from'], 'String');
        }
        if (data.hasOwnProperty('gas')) {
          obj['gas'] = _ApiClient["default"].convertToType(data['gas'], 'String');
        }
        if (data.hasOwnProperty('gasPrice')) {
          obj['gasPrice'] = _ApiClient["default"].convertToType(data['gasPrice'], 'String');
        }
        if (data.hasOwnProperty('hash')) {
          obj['hash'] = _ApiClient["default"].convertToType(data['hash'], 'String');
        }
        if (data.hasOwnProperty('humanReadable')) {
          obj['humanReadable'] = _ApiClient["default"].convertToType(data['humanReadable'], 'Boolean');
        }
        if (data.hasOwnProperty('key')) {
          obj['key'] = _ApiClient["default"].convertToType(data['key'], 'String');
        }
        if (data.hasOwnProperty('input')) {
          obj['input'] = _ApiClient["default"].convertToType(data['input'], 'String');
        }
        if (data.hasOwnProperty('nonce')) {
          obj['nonce'] = _ApiClient["default"].convertToType(data['nonce'], 'String');
        }
        if (data.hasOwnProperty('senderTxHash')) {
          obj['senderTxHash'] = _ApiClient["default"].convertToType(data['senderTxHash'], 'String');
        }
        if (data.hasOwnProperty('signatures')) {
          obj['signatures'] = _ApiClient["default"].convertToType(data['signatures'], [_Signature["default"]]);
        }
        if (data.hasOwnProperty('to')) {
          obj['to'] = _ApiClient["default"].convertToType(data['to'], 'String');
        }
        if (data.hasOwnProperty('transactionIndex')) {
          obj['transactionIndex'] = _ApiClient["default"].convertToType(data['transactionIndex'], 'String');
        }
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('typeInt')) {
          obj['typeInt'] = _ApiClient["default"].convertToType(data['typeInt'], 'Number');
        }
        if (data.hasOwnProperty('value')) {
          obj['value'] = _ApiClient["default"].convertToType(data['value'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionObject</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(TransactionObject.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data[property]) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['blockHash'] && !(typeof data['blockHash'] === 'string' || data['blockHash'] instanceof String)) {
        throw new Error("Expected the field `blockHash` to be a primitive type in the JSON string but got " + data['blockHash']);
      }
      // ensure the json data is a string
      if (data['blockNumber'] && !(typeof data['blockNumber'] === 'string' || data['blockNumber'] instanceof String)) {
        throw new Error("Expected the field `blockNumber` to be a primitive type in the JSON string but got " + data['blockNumber']);
      }
      // ensure the json data is a string
      if (data['codeFormat'] && !(typeof data['codeFormat'] === 'string' || data['codeFormat'] instanceof String)) {
        throw new Error("Expected the field `codeFormat` to be a primitive type in the JSON string but got " + data['codeFormat']);
      }
      // ensure the json data is a string
      if (data['feePayer'] && !(typeof data['feePayer'] === 'string' || data['feePayer'] instanceof String)) {
        throw new Error("Expected the field `feePayer` to be a primitive type in the JSON string but got " + data['feePayer']);
      }
      if (data['feePayerSignatures']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['feePayerSignatures'])) {
          throw new Error("Expected the field `feePayerSignatures` to be an array in the JSON data but got " + data['feePayerSignatures']);
        }
        // validate the optional field `feePayerSignatures` (array)
        var _iterator2 = _createForOfIteratorHelper(data['feePayerSignatures']),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var item = _step2.value;
            _Signature["default"].validateJsonObject(item);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        ;
      }
      // ensure the json data is a string
      if (data['feeRatio'] && !(typeof data['feeRatio'] === 'string' || data['feeRatio'] instanceof String)) {
        throw new Error("Expected the field `feeRatio` to be a primitive type in the JSON string but got " + data['feeRatio']);
      }
      // ensure the json data is a string
      if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
        throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
      }
      // ensure the json data is a string
      if (data['gas'] && !(typeof data['gas'] === 'string' || data['gas'] instanceof String)) {
        throw new Error("Expected the field `gas` to be a primitive type in the JSON string but got " + data['gas']);
      }
      // ensure the json data is a string
      if (data['gasPrice'] && !(typeof data['gasPrice'] === 'string' || data['gasPrice'] instanceof String)) {
        throw new Error("Expected the field `gasPrice` to be a primitive type in the JSON string but got " + data['gasPrice']);
      }
      // ensure the json data is a string
      if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
        throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
      }
      // ensure the json data is a string
      if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
        throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
      }
      // ensure the json data is a string
      if (data['input'] && !(typeof data['input'] === 'string' || data['input'] instanceof String)) {
        throw new Error("Expected the field `input` to be a primitive type in the JSON string but got " + data['input']);
      }
      // ensure the json data is a string
      if (data['nonce'] && !(typeof data['nonce'] === 'string' || data['nonce'] instanceof String)) {
        throw new Error("Expected the field `nonce` to be a primitive type in the JSON string but got " + data['nonce']);
      }
      // ensure the json data is a string
      if (data['senderTxHash'] && !(typeof data['senderTxHash'] === 'string' || data['senderTxHash'] instanceof String)) {
        throw new Error("Expected the field `senderTxHash` to be a primitive type in the JSON string but got " + data['senderTxHash']);
      }
      if (data['signatures']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['signatures'])) {
          throw new Error("Expected the field `signatures` to be an array in the JSON data but got " + data['signatures']);
        }
        // validate the optional field `signatures` (array)
        var _iterator3 = _createForOfIteratorHelper(data['signatures']),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _item = _step3.value;
            _Signature["default"].validateJsonObject(_item);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        ;
      }
      // ensure the json data is a string
      if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
        throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
      }
      // ensure the json data is a string
      if (data['transactionIndex'] && !(typeof data['transactionIndex'] === 'string' || data['transactionIndex'] instanceof String)) {
        throw new Error("Expected the field `transactionIndex` to be a primitive type in the JSON string but got " + data['transactionIndex']);
      }
      // ensure the json data is a string
      if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
        throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
      }
      // ensure the json data is a string
      if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
        throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
      }
      return true;
    }
  }]);
  return TransactionObject;
}();
TransactionObject.RequiredProperties = ["blockHash", "blockNumber", "from", "gas", "gasPrice", "hash", "nonce", "senderTxHash", "signatures", "to", "transactionIndex", "type", "typeInt", "value"];

/**
 * Hash of the block where this transaction was in. null when it is pending.
 * @member {String} blockHash
 */
TransactionObject.prototype['blockHash'] = undefined;

/**
 * Block number where this transaction was in. null when it is pending.
 * @member {String} blockNumber
 */
TransactionObject.prototype['blockNumber'] = undefined;

/**
 * (optional) The code format of smart contract code.
 * @member {String} codeFormat
 */
TransactionObject.prototype['codeFormat'] = undefined;

/**
 * (optional) Address of the fee payer.
 * @member {String} feePayer
 */
TransactionObject.prototype['feePayer'] = undefined;

/**
 * (optional) An array of fee payer's signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s.
 * @member {Array.<module:model/Signature>} feePayerSignatures
 */
TransactionObject.prototype['feePayerSignatures'] = undefined;

/**
 * (optional) Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender.
 * @member {String} feeRatio
 */
TransactionObject.prototype['feeRatio'] = undefined;

/**
 * Address of the sender.
 * @member {String} from
 */
TransactionObject.prototype['from'] = undefined;

/**
 * Gas provided by the sender.
 * @member {String} gas
 */
TransactionObject.prototype['gas'] = undefined;

/**
 * Gas price provided by the sender in peb.
 * @member {String} gasPrice
 */
TransactionObject.prototype['gasPrice'] = undefined;

/**
 * Hash of the transaction.
 * @member {String} hash
 */
TransactionObject.prototype['hash'] = undefined;

/**
 * (optional) true if the address is humanReadable, false if the address is not humanReadable.
 * @member {Boolean} humanReadable
 */
TransactionObject.prototype['humanReadable'] = undefined;

/**
 * (optional) Key of the newly created account.
 * @member {String} key
 */
TransactionObject.prototype['key'] = undefined;

/**
 * (optional) The data sent along with the transaction.
 * @member {String} input
 */
TransactionObject.prototype['input'] = undefined;

/**
 * The number of transactions made by the sender prior to this one.
 * @member {String} nonce
 */
TransactionObject.prototype['nonce'] = undefined;

/**
 * Hash of a transaction that is signed only by the sender. See SenderTxHash. This value is always the same as hash for non fee-delegated transactions.
 * @member {String} senderTxHash
 */
TransactionObject.prototype['senderTxHash'] = undefined;

/**
 * An array of signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s
 * @member {Array.<module:model/Signature>} signatures
 */
TransactionObject.prototype['signatures'] = undefined;

/**
 * Address of the receiver. null when it is a contract creation transaction.
 * @member {String} to
 */
TransactionObject.prototype['to'] = undefined;

/**
 * Integer of the transactions index position in the block. null when it is pending.
 * @member {String} transactionIndex
 */
TransactionObject.prototype['transactionIndex'] = undefined;

/**
 * A string representing the type of the transaction.
 * @member {String} type
 */
TransactionObject.prototype['type'] = undefined;

/**
 * An integer representing the type of the transaction.
 * @member {Number} typeInt
 */
TransactionObject.prototype['typeInt'] = undefined;

/**
 * Value transferred in peb.
 * @member {String} value
 */
TransactionObject.prototype['value'] = undefined;
var _default = exports["default"] = TransactionObject;