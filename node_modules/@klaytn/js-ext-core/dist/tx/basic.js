"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxTypeCancel = exports.TxTypeAccountUpdate = exports.TxTypeSmartContractExecution = exports.TxTypeSmartContractDeploy = exports.TxTypeValueTransferMemo = exports.TxTypeValueTransfer = void 0;
const field_1 = require("../field");
const util_1 = require("../util");
const factory_1 = require("./factory");
// https://docs.klaytn.foundation/content/klaytn/design/transactions/basic#txtypevaluetransfer
class TxTypeValueTransfer extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from"], ["chainId"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, txSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, txSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedRLP(rlp, ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "txSignatures"]);
    }
}
exports.TxTypeValueTransfer = TxTypeValueTransfer;
TxTypeValueTransfer.type = util_1.TxType.ValueTransfer;
TxTypeValueTransfer.typeName = "TxTypeValueTransfer";
TxTypeValueTransfer.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "to": field_1.FieldTypeAddress,
    "value": field_1.FieldTypeUint256,
    "from": field_1.FieldTypeAddress,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/basic#txtypevaluetransfermemo
class TxTypeValueTransferMemo extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data"], ["chainId"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedRLP(rlp, ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "txSignatures"]);
    }
}
exports.TxTypeValueTransferMemo = TxTypeValueTransferMemo;
TxTypeValueTransferMemo.type = util_1.TxType.ValueTransferMemo;
TxTypeValueTransferMemo.typeName = "TxTypeValueTransferMemo";
TxTypeValueTransferMemo.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "to": field_1.FieldTypeAddress,
    "value": field_1.FieldTypeUint256,
    "from": field_1.FieldTypeAddress,
    "data": field_1.FieldTypeBytes,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/basic#txtypesmartcontractdeploy
class TxTypeSmartContractDeploy extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "codeFormat"], ["chainId"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, txSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "codeFormat", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, txSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedRLP(rlp, ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "codeFormat", "txSignatures"]);
    }
}
exports.TxTypeSmartContractDeploy = TxTypeSmartContractDeploy;
TxTypeSmartContractDeploy.type = util_1.TxType.SmartContractDeploy;
TxTypeSmartContractDeploy.typeName = "TxTypeSmartContractDeploy";
TxTypeSmartContractDeploy.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "to": field_1.FieldTypeAddress,
    "value": field_1.FieldTypeUint256,
    "from": field_1.FieldTypeAddress,
    "data": field_1.FieldTypeBytes,
    "humanReadable": field_1.FieldTypeBool,
    "codeFormat": field_1.FieldTypeUint8,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/basic#txtypesmartcontractexecution
class TxTypeSmartContractExecution extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data"], ["chainId"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedRLP(rlp, ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "txSignatures"]);
    }
}
exports.TxTypeSmartContractExecution = TxTypeSmartContractExecution;
TxTypeSmartContractExecution.type = util_1.TxType.SmartContractExecution;
TxTypeSmartContractExecution.typeName = "TxTypeSmartContractExecution";
TxTypeSmartContractExecution.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "to": field_1.FieldTypeAddress,
    "value": field_1.FieldTypeUint256,
    "from": field_1.FieldTypeAddress,
    "data": field_1.FieldTypeBytes,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/basic#txtypeaccountupdate
class TxTypeAccountUpdate extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, from, rlpEncodedKey]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "from", "key"], ["chainId"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, txSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "from", "key", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, txSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedRLP(rlp, ["nonce", "gasPrice", "gasLimit", "from", "key", "txSignatures"]);
    }
}
exports.TxTypeAccountUpdate = TxTypeAccountUpdate;
TxTypeAccountUpdate.type = util_1.TxType.AccountUpdate;
TxTypeAccountUpdate.typeName = "TxTypeAccountUpdate";
TxTypeAccountUpdate.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "from": field_1.FieldTypeAddress,
    "key": field_1.FieldTypeAccountKey,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/basic#txtypecancel
class TxTypeCancel extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, from]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "from"], ["chainId"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, from, txSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "from", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, from, txSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedRLP(rlp, ["nonce", "gasPrice", "gasLimit", "from", "txSignatures"]);
    }
}
exports.TxTypeCancel = TxTypeCancel;
TxTypeCancel.type = util_1.TxType.Cancel;
TxTypeCancel.typeName = "TxTypeCancel";
TxTypeCancel.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "from": field_1.FieldTypeAddress,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
};
//# sourceMappingURL=basic.js.map