"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxTypeFeeDelegatedCancelWithRatio = exports.TxTypeFeeDelegatedAccountUpdateWithRatio = exports.TxTypeFeeDelegatedSmartContractExecutionWithRatio = exports.TxTypeFeeDelegatedSmartContractDeployWithRatio = exports.TxTypeFeeDelegatedValueTransferMemoWithRatio = exports.TxTypeFeeDelegatedValueTransferWithRatio = void 0;
const field_1 = require("../field");
const util_1 = require("../util");
const factory_1 = require("./factory");
// https://docs.klaytn.foundation/content/klaytn/design/transactions/partial-fee-delegation#txtypefeedelegatedvaluetransferwithratio
class TxTypeFeeDelegatedValueTransferWithRatio extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, feeRatio]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "feeRatio"], ["chainId"]);
    }
    // SigFeePayerRLP = encode([ encode([type, nonce, gasPrice, gas, to, value, from, feeRatio]), feePayer, chainid, 0, 0 ])
    sigFeePayerRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "feeRatio"], ["feePayer", "chainId"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, feeRatio, txSignatures])
    senderTxHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "feeRatio", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, feeRatio, txSignatures, feePayer, feePayerSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "feeRatio", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, feeRatio, txSignatures])
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, feeRatio, txSignatures, feePayer, feePayerSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedVarlenRLP(rlp, ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "feeRatio", "txSignatures"], ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "feeRatio", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
}
exports.TxTypeFeeDelegatedValueTransferWithRatio = TxTypeFeeDelegatedValueTransferWithRatio;
TxTypeFeeDelegatedValueTransferWithRatio.type = util_1.TxType.FeeDelegatedValueTransferWithRatio;
TxTypeFeeDelegatedValueTransferWithRatio.typeName = "TxTypeFeeDelegatedValueTransferWithRatio";
TxTypeFeeDelegatedValueTransferWithRatio.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "to": field_1.FieldTypeAddress,
    "value": field_1.FieldTypeUint256,
    "from": field_1.FieldTypeAddress,
    "feeRatio": field_1.FieldTypeUint8,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
    "feePayer": field_1.FieldTypeAddress,
    "feePayerSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/partial-fee-delegation#txtypefeedelegatedvaluetransfermemowithratio
class TxTypeFeeDelegatedValueTransferMemoWithRatio extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, feeRatio]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "feeRatio"], ["chainId"]);
    }
    // SigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, feeRatio]), feePayer, chainid, 0, 0])
    sigFeePayerRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "feeRatio"], ["feePayer", "chainId"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, feeRatio, txSignatures])
    senderTxHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "feeRatio", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, feeRatio, txSignatures, feePayer, feePayerSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "feeRatio", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, feeRatio, txSignatures])
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, feeRatio, txSignatures, feePayer, feePayerSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedVarlenRLP(rlp, ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "feeRatio", "txSignatures"], ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "feeRatio", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
}
exports.TxTypeFeeDelegatedValueTransferMemoWithRatio = TxTypeFeeDelegatedValueTransferMemoWithRatio;
TxTypeFeeDelegatedValueTransferMemoWithRatio.type = util_1.TxType.FeeDelegatedValueTransferMemoWithRatio;
TxTypeFeeDelegatedValueTransferMemoWithRatio.typeName = "TxTypeFeeDelegatedValueTransferMemoWithRatio";
TxTypeFeeDelegatedValueTransferMemoWithRatio.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "to": field_1.FieldTypeAddress,
    "value": field_1.FieldTypeUint256,
    "from": field_1.FieldTypeAddress,
    "data": field_1.FieldTypeBytes,
    "feeRatio": field_1.FieldTypeUint8,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
    "feePayer": field_1.FieldTypeAddress,
    "feePayerSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/partial-fee-delegation#txtypefeedelegatedsmartcontractdeploywithratio
class TxTypeFeeDelegatedSmartContractDeployWithRatio extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, humanReadable, feeRatio, codeFormat]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "feeRatio", "codeFormat"], ["chainId"]);
    }
    // SigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, humanReadable, feeRatio, codeFormat]), feePayer, chainid, 0, 0])
    sigFeePayerRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "feeRatio", "codeFormat"], ["feePayer", "chainId"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, feeRatio, codeFormat, txSignatures])
    senderTxHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "feeRatio", "codeFormat", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, feeRatio, codeFormat, txSignatures, feePayer, feePayerSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "feeRatio", "codeFormat", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, feeRatio, codeFormat, txSignatures])
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, feeRatio, codeFormat, txSignatures, feePayer, feePayerSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedVarlenRLP(rlp, ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "feeRatio", "codeFormat", "txSignatures"], ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "feeRatio", "codeFormat", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
}
exports.TxTypeFeeDelegatedSmartContractDeployWithRatio = TxTypeFeeDelegatedSmartContractDeployWithRatio;
TxTypeFeeDelegatedSmartContractDeployWithRatio.type = util_1.TxType.FeeDelegatedSmartContractDeployWithRatio;
TxTypeFeeDelegatedSmartContractDeployWithRatio.typeName = "TxTypeFeeDelegatedSmartContractDeployWithRatio";
TxTypeFeeDelegatedSmartContractDeployWithRatio.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "to": field_1.FieldTypeAddress,
    "value": field_1.FieldTypeUint256,
    "from": field_1.FieldTypeAddress,
    "data": field_1.FieldTypeBytes,
    "humanReadable": field_1.FieldTypeBool,
    "feeRatio": field_1.FieldTypeUint8,
    "codeFormat": field_1.FieldTypeUint8,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
    "feePayer": field_1.FieldTypeAddress,
    "feePayerSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/partial-fee-delegation#txtypefeedelegatedsmartcontractexecutionwithratio
class TxTypeFeeDelegatedSmartContractExecutionWithRatio extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, feeRatio]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "feeRatio"], ["chainId"]);
    }
    // SigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, feeRatio]), feePayer, chainid, 0, 0])
    sigFeePayerRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "feeRatio"], ["feePayer", "chainId"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, feeRatio, txSignatures])
    senderTxHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "feeRatio", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, feeRatio, txSignatures, feePayer, feePayerSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "feeRatio", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, feeRatio, txSignatures])
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, feeRatio, txSignatures, feePayer, feePayerSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedVarlenRLP(rlp, ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "feeRatio", "txSignatures"], ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "feeRatio", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
}
exports.TxTypeFeeDelegatedSmartContractExecutionWithRatio = TxTypeFeeDelegatedSmartContractExecutionWithRatio;
TxTypeFeeDelegatedSmartContractExecutionWithRatio.type = util_1.TxType.FeeDelegatedSmartContractExecutionWithRatio;
TxTypeFeeDelegatedSmartContractExecutionWithRatio.typeName = "TxTypeFeeDelegatedSmartContractExecutionWithRatio";
TxTypeFeeDelegatedSmartContractExecutionWithRatio.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "to": field_1.FieldTypeAddress,
    "value": field_1.FieldTypeUint256,
    "from": field_1.FieldTypeAddress,
    "data": field_1.FieldTypeBytes,
    "feeRatio": field_1.FieldTypeUint8,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
    "feePayer": field_1.FieldTypeAddress,
    "feePayerSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/partial-fee-delegation#txtypefeedelegatedaccountupdatewithratio
class TxTypeFeeDelegatedAccountUpdateWithRatio extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, from, rlpEncodedKey, feeRatio]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "from", "key", "feeRatio"], ["chainId"]);
    }
    // SigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, from, rlpEncodedKey, feeRatio]), feePayer, chainid, 0, 0])
    sigFeePayerRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "from", "key", "feeRatio"], ["feePayer", "chainId"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, feeRatio, txSignatures])
    senderTxHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "from", "key", "feeRatio", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, feeRatio, txSignatures, feePayer, feePayerSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "from", "key", "feeRatio", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, feeRatio, txSignatures])
    // TxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, feeRatio, txSignatures, feePayer, feePayerSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedVarlenRLP(rlp, ["nonce", "gasPrice", "gasLimit", "from", "key", "feeRatio", "txSignatures"], ["nonce", "gasPrice", "gasLimit", "from", "key", "feeRatio", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
}
exports.TxTypeFeeDelegatedAccountUpdateWithRatio = TxTypeFeeDelegatedAccountUpdateWithRatio;
TxTypeFeeDelegatedAccountUpdateWithRatio.type = util_1.TxType.FeeDelegatedAccountUpdateWithRatio;
TxTypeFeeDelegatedAccountUpdateWithRatio.typeName = "TxTypeFeeDelegatedAccountUpdateWithRatio";
TxTypeFeeDelegatedAccountUpdateWithRatio.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "from": field_1.FieldTypeAddress,
    "key": field_1.FieldTypeAccountKey,
    "feeRatio": field_1.FieldTypeUint8,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
    "feePayer": field_1.FieldTypeAddress,
    "feePayerSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/partial-fee-delegation#txtypefeedelegatedcancelwithratio
class TxTypeFeeDelegatedCancelWithRatio extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, from, feeRatio]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "from", "feeRatio"], ["chainId"]);
    }
    // SigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, from, feeRatio]), feePayer, chainid, 0, 0])
    sigFeePayerRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "from", "feeRatio"], ["feePayer", "chainId"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, feeRatio, txSignatures])
    senderTxHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "from", "feeRatio", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, from, feeRatio, txSignatures, feePayer, feePayerSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "from", "feeRatio", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, feeRatio, txSignatures])
    // TxHashRLP = type + encode([nonce, gasPrice, gas, from, feeRatio, txSignatures, feePayer, feePayerSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedVarlenRLP(rlp, ["nonce", "gasPrice", "gasLimit", "from", "feeRatio", "txSignatures"], ["nonce", "gasPrice", "gasLimit", "from", "feeRatio", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
}
exports.TxTypeFeeDelegatedCancelWithRatio = TxTypeFeeDelegatedCancelWithRatio;
TxTypeFeeDelegatedCancelWithRatio.type = util_1.TxType.FeeDelegatedCancelWithRatio;
TxTypeFeeDelegatedCancelWithRatio.typeName = "TxTypeFeeDelegatedCancelWithRatio";
TxTypeFeeDelegatedCancelWithRatio.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "from": field_1.FieldTypeAddress,
    "feeRatio": field_1.FieldTypeUint8,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
    "feePayer": field_1.FieldTypeAddress,
    "feePayerSignatures": field_1.FieldTypeSignatureTuples,
};
//# sourceMappingURL=partialfeedelegated.js.map