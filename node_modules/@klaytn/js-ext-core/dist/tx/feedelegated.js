"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxTypeFeeDelegatedCancel = exports.TxTypeFeeDelegatedAccountUpdate = exports.TxTypeFeeDelegatedSmartContractExecution = exports.TxTypeFeeDelegatedSmartContractDeploy = exports.TxTypeFeeDelegatedValueTransferMemo = exports.TxTypeFeeDelegatedValueTransfer = void 0;
const field_1 = require("../field");
const util_1 = require("../util");
const factory_1 = require("./factory");
// https://docs.klaytn.foundation/content/klaytn/design/transactions/fee-delegation#txtypefeedelegatedvaluetransfer
class TxTypeFeeDelegatedValueTransfer extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from"], ["chainId"]);
    }
    // SigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from]), feePayer, chainid, 0, 0 ])
    sigFeePayerRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from"], ["feePayer", "chainId"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, txSignatures])
    senderTxHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, txSignatures, feePayer, feePayerSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, txSignatures])
    // TxHashRLP       = type + encode([nonce, gasPrice, gas, to, value, from, txSignatures, feePayer, feePayerSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedVarlenRLP(rlp, ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "txSignatures"], ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
}
exports.TxTypeFeeDelegatedValueTransfer = TxTypeFeeDelegatedValueTransfer;
TxTypeFeeDelegatedValueTransfer.type = util_1.TxType.FeeDelegatedValueTransfer;
TxTypeFeeDelegatedValueTransfer.typeName = "TxTypeFeeDelegatedValueTransfer";
TxTypeFeeDelegatedValueTransfer.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "to": field_1.FieldTypeAddress,
    "value": field_1.FieldTypeUint256,
    "from": field_1.FieldTypeAddress,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
    "feePayer": field_1.FieldTypeAddress,
    "feePayerSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/fee-delegation#txtypefeedelegatedvaluetransfermemo
class TxTypeFeeDelegatedValueTransferMemo extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data"], ["chainId"]);
    }
    // SigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input]), feePayer, chainid, 0, 0])
    sigFeePayerRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data"], ["feePayer", "chainId"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures])
    senderTxHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures, feePayer, feePayerSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures])
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures, feePayer, feePayerSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedVarlenRLP(rlp, ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "txSignatures"], ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
}
exports.TxTypeFeeDelegatedValueTransferMemo = TxTypeFeeDelegatedValueTransferMemo;
TxTypeFeeDelegatedValueTransferMemo.type = util_1.TxType.FeeDelegatedValueTransferMemo;
TxTypeFeeDelegatedValueTransferMemo.typeName = "TxTypeFeeDelegatedValueTransferMemo";
TxTypeFeeDelegatedValueTransferMemo.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "to": field_1.FieldTypeAddress,
    "value": field_1.FieldTypeUint256,
    "from": field_1.FieldTypeAddress,
    "data": field_1.FieldTypeBytes,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
    "feePayer": field_1.FieldTypeAddress,
    "feePayerSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/fee-delegation#txtypefeedelegatedsmartcontractdeploy
class TxTypeFeeDelegatedSmartContractDeploy extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "codeFormat"], ["chainId"]);
    }
    // SigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat]), feePayer, chainid, 0, 0])
    sigFeePayerRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "codeFormat"], ["feePayer", "chainId"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, txSignatures])
    senderTxHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "codeFormat", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, txSignatures, feePayer, feePayerSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "codeFormat", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, txSignatures])
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, txSignatures, feePayer, feePayerSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedVarlenRLP(rlp, ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "codeFormat", "txSignatures"], ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "humanReadable", "codeFormat", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
}
exports.TxTypeFeeDelegatedSmartContractDeploy = TxTypeFeeDelegatedSmartContractDeploy;
TxTypeFeeDelegatedSmartContractDeploy.type = util_1.TxType.FeeDelegatedSmartContractDeploy;
TxTypeFeeDelegatedSmartContractDeploy.typeName = "TxTypeFeeDelegatedSmartContractDeploy";
TxTypeFeeDelegatedSmartContractDeploy.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "to": field_1.FieldTypeAddress,
    "value": field_1.FieldTypeUint256,
    "from": field_1.FieldTypeAddress,
    "data": field_1.FieldTypeBytes,
    "humanReadable": field_1.FieldTypeBool,
    "codeFormat": field_1.FieldTypeUint8,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
    "feePayer": field_1.FieldTypeAddress,
    "feePayerSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/fee-delegation#txtypefeedelegatedsmartcontractexecution
class TxTypeFeeDelegatedSmartContractExecution extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data"], ["chainId"]);
    }
    // SigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input]), feePayer, chainid, 0, 0])
    sigFeePayerRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "to", "value", "from", "data"], ["feePayer", "chainId"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures])
    senderTxHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures, feePayer, feePayerSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures])
    // TxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures, feePayer, feePayerSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedVarlenRLP(rlp, ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "txSignatures"], ["nonce", "gasPrice", "gasLimit", "to", "value", "from", "data", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
}
exports.TxTypeFeeDelegatedSmartContractExecution = TxTypeFeeDelegatedSmartContractExecution;
TxTypeFeeDelegatedSmartContractExecution.type = util_1.TxType.FeeDelegatedSmartContractExecution;
TxTypeFeeDelegatedSmartContractExecution.typeName = "TxTypeFeeDelegatedSmartContractExecution";
TxTypeFeeDelegatedSmartContractExecution.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "to": field_1.FieldTypeAddress,
    "value": field_1.FieldTypeUint256,
    "from": field_1.FieldTypeAddress,
    "data": field_1.FieldTypeBytes,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
    "feePayer": field_1.FieldTypeAddress,
    "feePayerSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/fee-delegation#txtypefeedelegatedaccountupdate
class TxTypeFeeDelegatedAccountUpdate extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, from, rlpEncodedKey]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "from", "key"], ["chainId"]);
    }
    // SigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, from, rlpEncodedKey]), feePayer, chainid, 0, 0])
    sigFeePayerRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "from", "key"], ["feePayer", "chainId"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, txSignatures])
    senderTxHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "from", "key", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, txSignatures, feePayer, feePayerSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "from", "key", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, txSignatures])
    // TxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, txSignatures, feePayer, feePayerSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedVarlenRLP(rlp, ["nonce", "gasPrice", "gasLimit", "from", "key", "txSignatures"], ["nonce", "gasPrice", "gasLimit", "from", "key", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
}
exports.TxTypeFeeDelegatedAccountUpdate = TxTypeFeeDelegatedAccountUpdate;
TxTypeFeeDelegatedAccountUpdate.type = util_1.TxType.FeeDelegatedAccountUpdate;
TxTypeFeeDelegatedAccountUpdate.typeName = "TxTypeFeeDelegatedAccountUpdate";
TxTypeFeeDelegatedAccountUpdate.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "from": field_1.FieldTypeAddress,
    "key": field_1.FieldTypeAccountKey,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
    "feePayer": field_1.FieldTypeAddress,
    "feePayerSignatures": field_1.FieldTypeSignatureTuples,
};
// https://docs.klaytn.foundation/content/klaytn/design/transactions/fee-delegation#txtypefeedelegatedcancel
class TxTypeFeeDelegatedCancel extends factory_1.KlaytnTx {
    // SigRLP = encode([encode([type, nonce, gasPrice, gas, from]), chainid, 0, 0])
    sigRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "from"], ["chainId"]);
    }
    // SigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, from]), feePayer, chainid, 0, 0])
    sigFeePayerRLP() {
        return this.encodeNestedRLP(["type", "nonce", "gasPrice", "gasLimit", "from"], ["feePayer", "chainId"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, txSignatures])
    senderTxHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "from", "txSignatures"]);
    }
    // TxHashRLP = type + encode([nonce, gasPrice, gas, from, txSignatures, feePayer, feePayerSignatures])
    txHashRLP() {
        return this.encodeTypePrefixedRLP(["nonce", "gasPrice", "gasLimit", "from", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
    // SenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, txSignatures])
    // TxHashRLP = type + encode([nonce, gasPrice, gas, from, txSignatures, feePayer, feePayerSignatures])
    setFieldsFromRLP(rlp) {
        this.decodeTypePrefixedVarlenRLP(rlp, ["nonce", "gasPrice", "gasLimit", "from", "txSignatures"], ["nonce", "gasPrice", "gasLimit", "from", "txSignatures", "feePayer", "feePayerSignatures"]);
    }
}
exports.TxTypeFeeDelegatedCancel = TxTypeFeeDelegatedCancel;
TxTypeFeeDelegatedCancel.type = util_1.TxType.FeeDelegatedCancel;
TxTypeFeeDelegatedCancel.typeName = "TxTypeFeeDelegatedCancel";
TxTypeFeeDelegatedCancel.fieldTypes = {
    "type": field_1.FieldTypeUint8,
    "nonce": field_1.FieldTypeUint64,
    "gasPrice": field_1.FieldTypeUint256,
    "gasLimit": field_1.FieldTypeUint64,
    "from": field_1.FieldTypeAddress,
    "chainId": field_1.FieldTypeUint64,
    "txSignatures": field_1.FieldTypeSignatureTuples,
    "feePayer": field_1.FieldTypeAddress,
    "feePayerSignatures": field_1.FieldTypeSignatureTuples,
};
//# sourceMappingURL=feedelegated.js.map