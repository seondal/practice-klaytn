"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Signature = _interopRequireDefault(require("./Signature"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
 * web3rpc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The TxTypeFeeDelegatedSmartContractDeployWithRatio model module.
 * @module model/TxTypeFeeDelegatedSmartContractDeployWithRatio
 * @version 0.9.8
 */
var TxTypeFeeDelegatedSmartContractDeployWithRatio = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>TxTypeFeeDelegatedSmartContractDeployWithRatio</code>.
   * @alias module:model/TxTypeFeeDelegatedSmartContractDeployWithRatio
   * @param typeInt {Number} The integer indicating TxTypeFeeDelegatedSmartContractDeployWithRatio: 42
   * @param from {String} The address from which the transaction is sent.
   * @param to {String} The address to which the transaction is directed.
   * @param value {String} Integer of the value sent with this transaction.
   * @param input {String} The data sent along with the transaction.
   * @param humanReadable {Boolean} true if the address is humanReadable, false if the address is not humanReadable. Currently, the value should be false. Human-readable addresses will be supported later.
   * @param codeFormat {String} The code format of smart contract code. The value 0 indicates EVM.
   * @param feePayer {String} The fee payer address of the transaction.
   * @param feeRatio {String} Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender. The range of fee ratio is 1 ~ 99, if it is out of range, the transaction will not be accepted.
   */
  function TxTypeFeeDelegatedSmartContractDeployWithRatio(typeInt, from, to, value, input, humanReadable, codeFormat, feePayer, feeRatio) {
    _classCallCheck(this, TxTypeFeeDelegatedSmartContractDeployWithRatio);
    TxTypeFeeDelegatedSmartContractDeployWithRatio.initialize(this, typeInt, from, to, value, input, humanReadable, codeFormat, feePayer, feeRatio);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(TxTypeFeeDelegatedSmartContractDeployWithRatio, null, [{
    key: "initialize",
    value: function initialize(obj, typeInt, from, to, value, input, humanReadable, codeFormat, feePayer, feeRatio) {
      obj['typeInt'] = typeInt;
      obj['from'] = from;
      obj['to'] = to;
      obj['value'] = value;
      obj['input'] = input;
      obj['humanReadable'] = humanReadable;
      obj['codeFormat'] = codeFormat;
      obj['feePayer'] = feePayer;
      obj['feeRatio'] = feeRatio;
    }

    /**
     * Constructs a <code>TxTypeFeeDelegatedSmartContractDeployWithRatio</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TxTypeFeeDelegatedSmartContractDeployWithRatio} obj Optional instance to populate.
     * @return {module:model/TxTypeFeeDelegatedSmartContractDeployWithRatio} The populated <code>TxTypeFeeDelegatedSmartContractDeployWithRatio</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new TxTypeFeeDelegatedSmartContractDeployWithRatio();
        if (data.hasOwnProperty('typeInt')) {
          obj['typeInt'] = _ApiClient["default"].convertToType(data['typeInt'], 'Number');
        }
        if (data.hasOwnProperty('from')) {
          obj['from'] = _ApiClient["default"].convertToType(data['from'], 'String');
        }
        if (data.hasOwnProperty('to')) {
          obj['to'] = _ApiClient["default"].convertToType(data['to'], 'String');
        }
        if (data.hasOwnProperty('gas')) {
          obj['gas'] = _ApiClient["default"].convertToType(data['gas'], 'String');
        }
        if (data.hasOwnProperty('gasPrice')) {
          obj['gasPrice'] = _ApiClient["default"].convertToType(data['gasPrice'], 'String');
        }
        if (data.hasOwnProperty('nonce')) {
          obj['nonce'] = _ApiClient["default"].convertToType(data['nonce'], 'String');
        }
        if (data.hasOwnProperty('value')) {
          obj['value'] = _ApiClient["default"].convertToType(data['value'], 'String');
        }
        if (data.hasOwnProperty('input')) {
          obj['input'] = _ApiClient["default"].convertToType(data['input'], 'String');
        }
        if (data.hasOwnProperty('humanReadable')) {
          obj['humanReadable'] = _ApiClient["default"].convertToType(data['humanReadable'], 'Boolean');
        }
        if (data.hasOwnProperty('codeFormat')) {
          obj['codeFormat'] = _ApiClient["default"].convertToType(data['codeFormat'], 'String');
        }
        if (data.hasOwnProperty('feePayer')) {
          obj['feePayer'] = _ApiClient["default"].convertToType(data['feePayer'], 'String');
        }
        if (data.hasOwnProperty('signatures')) {
          obj['signatures'] = _ApiClient["default"].convertToType(data['signatures'], [_Signature["default"]]);
        }
        if (data.hasOwnProperty('feeRatio')) {
          obj['feeRatio'] = _ApiClient["default"].convertToType(data['feeRatio'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TxTypeFeeDelegatedSmartContractDeployWithRatio</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TxTypeFeeDelegatedSmartContractDeployWithRatio</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(TxTypeFeeDelegatedSmartContractDeployWithRatio.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data[property]) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
        throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
      }
      // ensure the json data is a string
      if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
        throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
      }
      // ensure the json data is a string
      if (data['gas'] && !(typeof data['gas'] === 'string' || data['gas'] instanceof String)) {
        throw new Error("Expected the field `gas` to be a primitive type in the JSON string but got " + data['gas']);
      }
      // ensure the json data is a string
      if (data['gasPrice'] && !(typeof data['gasPrice'] === 'string' || data['gasPrice'] instanceof String)) {
        throw new Error("Expected the field `gasPrice` to be a primitive type in the JSON string but got " + data['gasPrice']);
      }
      // ensure the json data is a string
      if (data['nonce'] && !(typeof data['nonce'] === 'string' || data['nonce'] instanceof String)) {
        throw new Error("Expected the field `nonce` to be a primitive type in the JSON string but got " + data['nonce']);
      }
      // ensure the json data is a string
      if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
        throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
      }
      // ensure the json data is a string
      if (data['input'] && !(typeof data['input'] === 'string' || data['input'] instanceof String)) {
        throw new Error("Expected the field `input` to be a primitive type in the JSON string but got " + data['input']);
      }
      // ensure the json data is a string
      if (data['codeFormat'] && !(typeof data['codeFormat'] === 'string' || data['codeFormat'] instanceof String)) {
        throw new Error("Expected the field `codeFormat` to be a primitive type in the JSON string but got " + data['codeFormat']);
      }
      // ensure the json data is a string
      if (data['feePayer'] && !(typeof data['feePayer'] === 'string' || data['feePayer'] instanceof String)) {
        throw new Error("Expected the field `feePayer` to be a primitive type in the JSON string but got " + data['feePayer']);
      }
      if (data['signatures']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['signatures'])) {
          throw new Error("Expected the field `signatures` to be an array in the JSON data but got " + data['signatures']);
        }
        // validate the optional field `signatures` (array)
        var _iterator2 = _createForOfIteratorHelper(data['signatures']),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var item = _step2.value;
            _Signature["default"].validateJsonObject(item);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        ;
      }
      // ensure the json data is a string
      if (data['feeRatio'] && !(typeof data['feeRatio'] === 'string' || data['feeRatio'] instanceof String)) {
        throw new Error("Expected the field `feeRatio` to be a primitive type in the JSON string but got " + data['feeRatio']);
      }
      return true;
    }
  }]);
  return TxTypeFeeDelegatedSmartContractDeployWithRatio;
}();
TxTypeFeeDelegatedSmartContractDeployWithRatio.RequiredProperties = ["typeInt", "from", "to", "value", "input", "humanReadable", "codeFormat", "feePayer", "feeRatio"];

/**
 * The integer indicating TxTypeFeeDelegatedSmartContractDeployWithRatio: 42
 * @member {Number} typeInt
 */
TxTypeFeeDelegatedSmartContractDeployWithRatio.prototype['typeInt'] = undefined;

/**
 * The address from which the transaction is sent.
 * @member {String} from
 */
TxTypeFeeDelegatedSmartContractDeployWithRatio.prototype['from'] = undefined;

/**
 * The address to which the transaction is directed.
 * @member {String} to
 */
TxTypeFeeDelegatedSmartContractDeployWithRatio.prototype['to'] = undefined;

/**
 * (optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
 * @member {String} gas
 */
TxTypeFeeDelegatedSmartContractDeployWithRatio.prototype['gas'] = undefined;

/**
 * (optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.
 * @member {String} gasPrice
 */
TxTypeFeeDelegatedSmartContractDeployWithRatio.prototype['gasPrice'] = undefined;

/**
 * (optional) Integer of a nonce.
 * @member {String} nonce
 */
TxTypeFeeDelegatedSmartContractDeployWithRatio.prototype['nonce'] = undefined;

/**
 * Integer of the value sent with this transaction.
 * @member {String} value
 */
TxTypeFeeDelegatedSmartContractDeployWithRatio.prototype['value'] = undefined;

/**
 * The data sent along with the transaction.
 * @member {String} input
 */
TxTypeFeeDelegatedSmartContractDeployWithRatio.prototype['input'] = undefined;

/**
 * true if the address is humanReadable, false if the address is not humanReadable. Currently, the value should be false. Human-readable addresses will be supported later.
 * @member {Boolean} humanReadable
 */
TxTypeFeeDelegatedSmartContractDeployWithRatio.prototype['humanReadable'] = undefined;

/**
 * The code format of smart contract code. The value 0 indicates EVM.
 * @member {String} codeFormat
 */
TxTypeFeeDelegatedSmartContractDeployWithRatio.prototype['codeFormat'] = undefined;

/**
 * The fee payer address of the transaction.
 * @member {String} feePayer
 */
TxTypeFeeDelegatedSmartContractDeployWithRatio.prototype['feePayer'] = undefined;

/**
 * (optional - only for klay_sendTransactionAsFeePayer API) An array of signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s.
 * @member {Array.<module:model/Signature>} signatures
 */
TxTypeFeeDelegatedSmartContractDeployWithRatio.prototype['signatures'] = undefined;

/**
 * Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender. The range of fee ratio is 1 ~ 99, if it is out of range, the transaction will not be accepted.
 * @member {String} feeRatio
 */
TxTypeFeeDelegatedSmartContractDeployWithRatio.prototype['feeRatio'] = undefined;
var _default = exports["default"] = TxTypeFeeDelegatedSmartContractDeployWithRatio;