import { TxType } from "../util";
import { KlaytnTx } from "./factory";
export declare class TxTypeFeeDelegatedValueTransfer extends KlaytnTx {
    static type: TxType;
    static typeName: string;
    static fieldTypes: {
        type: import("../field").FieldTypeNumberBits;
        nonce: import("../field").FieldTypeNumberBits;
        gasPrice: import("../field").FieldTypeNumberBits;
        gasLimit: import("../field").FieldTypeNumberBits;
        to: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        value: import("../field").FieldTypeNumberBits;
        from: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        chainId: import("../field").FieldTypeNumberBits;
        txSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
        feePayer: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        feePayerSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
    };
    sigRLP(): string;
    sigFeePayerRLP(): string;
    senderTxHashRLP(): string;
    txHashRLP(): string;
    setFieldsFromRLP(rlp: string): void;
}
export declare class TxTypeFeeDelegatedValueTransferMemo extends KlaytnTx {
    static type: TxType;
    static typeName: string;
    static fieldTypes: {
        type: import("../field").FieldTypeNumberBits;
        nonce: import("../field").FieldTypeNumberBits;
        gasPrice: import("../field").FieldTypeNumberBits;
        gasLimit: import("../field").FieldTypeNumberBits;
        to: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        value: import("../field").FieldTypeNumberBits;
        from: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        data: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        chainId: import("../field").FieldTypeNumberBits;
        txSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
        feePayer: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        feePayerSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
    };
    sigRLP(): string;
    sigFeePayerRLP(): string;
    senderTxHashRLP(): string;
    txHashRLP(): string;
    setFieldsFromRLP(rlp: string): void;
}
export declare class TxTypeFeeDelegatedSmartContractDeploy extends KlaytnTx {
    static type: TxType;
    static typeName: string;
    static fieldTypes: {
        type: import("../field").FieldTypeNumberBits;
        nonce: import("../field").FieldTypeNumberBits;
        gasPrice: import("../field").FieldTypeNumberBits;
        gasLimit: import("../field").FieldTypeNumberBits;
        to: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        value: import("../field").FieldTypeNumberBits;
        from: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        data: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        humanReadable: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        codeFormat: import("../field").FieldTypeNumberBits;
        chainId: import("../field").FieldTypeNumberBits;
        txSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
        feePayer: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        feePayerSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
    };
    sigRLP(): string;
    sigFeePayerRLP(): string;
    senderTxHashRLP(): string;
    txHashRLP(): string;
    setFieldsFromRLP(rlp: string): void;
}
export declare class TxTypeFeeDelegatedSmartContractExecution extends KlaytnTx {
    static type: TxType;
    static typeName: string;
    static fieldTypes: {
        type: import("../field").FieldTypeNumberBits;
        nonce: import("../field").FieldTypeNumberBits;
        gasPrice: import("../field").FieldTypeNumberBits;
        gasLimit: import("../field").FieldTypeNumberBits;
        to: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        value: import("../field").FieldTypeNumberBits;
        from: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        data: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        chainId: import("../field").FieldTypeNumberBits;
        txSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
        feePayer: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        feePayerSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
    };
    sigRLP(): string;
    sigFeePayerRLP(): string;
    senderTxHashRLP(): string;
    txHashRLP(): string;
    setFieldsFromRLP(rlp: string): void;
}
export declare class TxTypeFeeDelegatedAccountUpdate extends KlaytnTx {
    static type: TxType;
    static typeName: string;
    static fieldTypes: {
        type: import("../field").FieldTypeNumberBits;
        nonce: import("../field").FieldTypeNumberBits;
        gasPrice: import("../field").FieldTypeNumberBits;
        gasLimit: import("../field").FieldTypeNumberBits;
        from: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        key: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        chainId: import("../field").FieldTypeNumberBits;
        txSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
        feePayer: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        feePayerSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
    };
    sigRLP(): string;
    sigFeePayerRLP(): string;
    senderTxHashRLP(): string;
    txHashRLP(): string;
    setFieldsFromRLP(rlp: string): void;
}
export declare class TxTypeFeeDelegatedCancel extends KlaytnTx {
    static type: TxType;
    static typeName: string;
    static fieldTypes: {
        type: import("../field").FieldTypeNumberBits;
        nonce: import("../field").FieldTypeNumberBits;
        gasPrice: import("../field").FieldTypeNumberBits;
        gasLimit: import("../field").FieldTypeNumberBits;
        from: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        chainId: import("../field").FieldTypeNumberBits;
        txSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
        feePayer: {
            canonicalize(value: any): string;
            emptyValue(): string;
        };
        feePayerSignatures: {
            canonicalize(value: import("../util").SignatureLike[]): import("../util").SignatureTuple[];
            emptyValue(): import("../util").SignatureTuple[];
        };
    };
    sigRLP(): string;
    sigFeePayerRLP(): string;
    senderTxHashRLP(): string;
    txHashRLP(): string;
    setFieldsFromRLP(rlp: string): void;
}
//# sourceMappingURL=feedelegated.d.ts.map